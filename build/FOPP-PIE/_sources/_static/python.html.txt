<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=1080, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <h2><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python_(programming_language)&amp;action=edit&amp;section=1" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="thumb tright"><div class="thumbinner" style="width:152px;"><strong><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/94/Guido_van_Rossum_OSCON_2006_cropped.png/150px-Guido_van_Rossum_OSCON_2006_cropped.png" decoding="async" width="150" height="225" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/94/Guido_van_Rossum_OSCON_2006_cropped.png/225px-Guido_van_Rossum_OSCON_2006_cropped.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/94/Guido_van_Rossum_OSCON_2006_cropped.png/300px-Guido_van_Rossum_OSCON_2006_cropped.png 2x" data-file-width="1175" data-file-height="1762" /></strong>  <div class="thumbcaption"><div class="magnify"><strong></strong></div><strong>Guido van Rossum</strong> at OSCON 2006.</div></div></div>
<div role="note" class="hatnote navigation-not-searchable">Main article: <strong>History of Python</strong></div>
<p>Python was conceived in the late 1980s<sup id="cite_ref-venners-interview-pt-1_31-0" class="reference"><a href="#cite_note-venners-interview-pt-1-31">&#91;31&#93;</a></sup> by <strong>Guido van Rossum</strong> at <strong>Centrum Wiskunde &amp; Informatica</strong> (CWI) in the <strong>Netherlands</strong> as a successor to the <strong>ABC language</strong> (itself inspired by <strong>SETL</strong>)<sup id="cite_ref-AutoNT-12_32-0" class="reference"><a href="#cite_note-AutoNT-12-32">&#91;32&#93;</a></sup>, capable of <strong>exception handling</strong> and interfacing with the <strong>Amoeba</strong> operating system.<sup id="cite_ref-faq-created_7-1" class="reference"><a href="#cite_note-faq-created-7">&#91;7&#93;</a></sup> Its implementation began in December 1989.<sup id="cite_ref-timeline-of-python_33-0" class="reference"><a href="#cite_note-timeline-of-python-33">&#91;33&#93;</a></sup> Van Rossum's long influence on Python is reflected in the title given to him by the Python community: <i><strong>Benevolent Dictator For Life</strong></i> (BDFL)&#160;&#8211;&#32; a post from which he gave himself permanent vacation on July 12, 2018.<sup id="cite_ref-lj-bdfl-resignation_34-0" class="reference"><a href="#cite_note-lj-bdfl-resignation-34">&#91;34&#93;</a></sup>
</p><p>Python 2.0 was released on 16 October 2000 with many major new features, including a <strong>cycle-detecting</strong> <strong>garbage collector</strong> and support for <strong>Unicode</strong>.<sup id="cite_ref-newin-2.0_35-0" class="reference"><a href="#cite_note-newin-2.0-35">&#91;35&#93;</a></sup>
</p><p>Python 3.0 was released on 3 December 2008. It was a major revision of the language that is not completely <strong>backward-compatible</strong>.<sup id="cite_ref-3.0-release_36-0" class="reference"><a href="#cite_note-3.0-release-36">&#91;36&#93;</a></sup> Many of its major features were <strong>backported</strong> to Python 2.6.x<sup id="cite_ref-pep-3000_37-0" class="reference"><a href="#cite_note-pep-3000-37">&#91;37&#93;</a></sup> and 2.7.x version series.  Releases of Python 3 include the <code>2to3</code> utility, which automates (at least partially) the translation of Python 2 code to Python 3.<sup id="cite_ref-38" class="reference"><a href="#cite_note-38">&#91;38&#93;</a></sup>
</p><p>Python 2.7's <strong>end-of-life</strong> date was initially set at 2015 then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.<sup id="cite_ref-39" class="reference"><a href="#cite_note-39">&#91;39&#93;</a></sup><sup id="cite_ref-40" class="reference"><a href="#cite_note-40">&#91;40&#93;</a></sup> In January 2017, Google announced work on a Python 2.7 to <strong>Go</strong> <strong>transcompiler</strong> to improve performance under concurrent workloads.<sup id="cite_ref-41" class="reference"><a href="#cite_note-41">&#91;41&#93;</a></sup>
</p>
<h2><span class="mw-headline" id="Features_and_philosophy">Features and philosophy</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Python_(programming_language)&amp;action=edit&amp;section=2" title="Edit section: Features and philosophy">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Python is a <strong>multi-paradigm programming language</strong>. <strong>Object-oriented programming</strong> and <strong>structured programming</strong> are fully supported, and many of its features support <strong>functional programming</strong> and <strong>aspect-oriented programming</strong> (including by <strong>metaprogramming</strong><sup id="cite_ref-AutoNT-13_42-0" class="reference"><a href="#cite_note-AutoNT-13-42">&#91;42&#93;</a></sup> and <strong>metaobjects</strong> (magic methods)).<sup id="cite_ref-AutoNT-14_43-0" class="reference"><a href="#cite_note-AutoNT-14-43">&#91;43&#93;</a></sup> Many other paradigms are supported via extensions, including <strong>design by contract</strong><sup id="cite_ref-AutoNT-15_44-0" class="reference"><a href="#cite_note-AutoNT-15-44">&#91;44&#93;</a></sup><sup id="cite_ref-AutoNT-16_45-0" class="reference"><a href="#cite_note-AutoNT-16-45">&#91;45&#93;</a></sup> and <strong>logic programming</strong>.<sup id="cite_ref-AutoNT-17_46-0" class="reference"><a href="#cite_note-AutoNT-17-46">&#91;46&#93;</a></sup>
</p><p>Python uses <strong>dynamic typing</strong>, and a combination of <strong>reference counting</strong> and a cycle-detecting garbage collector for <strong>memory management</strong>. It also features dynamic <strong>name resolution</strong> (<strong>late binding</strong>), which binds method and variable names during program execution.
</p><p>Python's design offers some support for <strong>functional programming</strong> in the <strong>Lisp</strong> tradition. It has <code>filter</code>, <code>map</code>, and <code>reduce</code> functions; <strong>list comprehensions</strong>, <strong>dictionaries</strong>, sets and <strong>generator</strong> expressions.<sup id="cite_ref-AutoNT-59_47-0" class="reference"><a href="#cite_note-AutoNT-59-47">&#91;47&#93;</a></sup> The standard library has two modules (itertools and functools) that implement functional tools borrowed from <strong>Haskell</strong> and <strong>Standard ML</strong>.<sup id="cite_ref-AutoNT-18_48-0" class="reference"><a href="#cite_note-AutoNT-18-48">&#91;48&#93;</a></sup>
</p><p>The language's core philosophy is summarized in the document <i>The <strong>Zen of Python</strong></i> (<i>PEP 20</i>), which includes <strong>aphorisms</strong> such as:<sup id="cite_ref-PEP20_49-0" class="reference"><a href="#cite_note-PEP20-49">&#91;49&#93;</a></sup>
</p>
<ul><li>Beautiful is better than ugly</li>
<li>Explicit is better than implicit</li>
<li>Simple is better than complex</li>
<li>Complex is better than complicated</li>
<li>Readability counts</li></ul>
<p>Rather than having all of its functionality built into its core, Python was designed to be highly <strong>extensible</strong>. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with <strong>ABC</strong>, which espoused the opposite approach.<sup id="cite_ref-venners-interview-pt-1_31-1" class="reference"><a href="#cite_note-venners-interview-pt-1-31">&#91;31&#93;</a></sup>
</p><p>While offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of <strong>Perl</strong>) in favor of a simpler, less-cluttered grammar. As <strong>Alex Martelli</strong> put it: "To describe something as 'clever' is <i>not</i> considered a compliment in the Python culture."<sup id="cite_ref-AutoNT-19_50-0" class="reference"><a href="#cite_note-AutoNT-19-50">&#91;50&#93;</a></sup> Python's philosophy rejects the Perl "<strong>there is more than one way to do it</strong>" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".<sup id="cite_ref-PEP20_49-1" class="reference"><a href="#cite_note-PEP20-49">&#91;49&#93;</a></sup>
</p><p>Python's developers strive to avoid <strong>premature optimization</strong>, and reject patches to non-critical parts of the <strong>CPython</strong> reference implementation that would offer marginal increases in speed at the cost of clarity.<sup id="cite_ref-AutoNT-20_51-0" class="reference"><a href="#cite_note-AutoNT-20-51">&#91;51&#93;</a></sup> When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or use <strong>PyPy</strong>, a <strong>just-in-time compiler</strong>. <strong>Cython</strong> is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.
</p><p>An important goal of Python's developers is keeping it fun to use. This is reflected in the language's name—a tribute to the British comedy group <strong>Monty Python</strong><sup id="cite_ref-AutoNT-24_52-0" class="reference"><a href="#cite_note-AutoNT-24-52">&#91;52&#93;</a></sup>—and in occasionally playful approaches to tutorials and reference materials, such as examples that refer to spam and eggs (from a <strong>famous Monty Python sketch</strong>) instead of the standard <strong>foo and bar</strong>.<sup id="cite_ref-53" class="reference"><a href="#cite_note-53">&#91;53&#93;</a></sup><sup id="cite_ref-54" class="reference"><a href="#cite_note-54">&#91;54&#93;</a></sup>
</p><p>A common <strong>neologism</strong> in the Python community is <i>pythonic</i>, which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called <i>unpythonic</i>.
</p><p>Users and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as <i>Pythonists</i>, <i>Pythonistas</i>, and <i>Pythoneers</i>.<sup id="cite_ref-AutoNT-27_55-0" class="reference"><a href="#cite_note-AutoNT-27-55">&#91;55&#93;</a></sup><sup id="cite_ref-AutoNT-25_56-0" class="reference"><a href="#cite_note-AutoNT-25-56">&#91;56&#93;</a></sup>
</p>
</body>
</html>