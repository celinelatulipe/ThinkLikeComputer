<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/GeneralIntro/Exercises.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Exercises-source.html">Exercises</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <paragraph></paragraph>
    <section ids="chapter-assessment" names="chapter\ assessment">
        <title>Chapter Assessment</title>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="assess_question1_1_1">
        <statement>

        <paragraph>Why create an algorithm?</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>Because computers are better at solving problems.</p>
                </statement>
                <feedback>
                    <p>Computers aren't necessarily better at solving problems, though often they can be quicker than humans. Additionally, algorithms can be used to solve non-computer related problems.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>So that you don't have to solve the problem yourself.</p>
                </statement>
                <feedback>
                    <p>While it is beneficial to have a set of instructions that others can follow, this isn't the best answer. By creating the algorithm, you solve a problem for yourself and others.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>So that you have a general solution to a problem.</p>
                </statement>
                <feedback>
                    <p>Yes, by creating a general solution you can then express it as a program if you choose, and then use a computer to automate the execution.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Because you need a set of instructions to follow.</p>
                </statement>
                <feedback>
                    <p>While it is beneficial to have a set of instructions as that is what an algorithm **is**, it is not **why** we would want to create one.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="assess_question1_1_2">
    <statement>
        <paragraph>Write code to print out the phrase “Hello World”.</paragraph>

    </statement>
    <program label="assess_question1_1_2_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertIn("Hello World", self.getOutput(), "Your output should contain a phrase Hello World")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="assess_question1_1_3">
        <statement>

        <paragraph>What will be output to the console when the following program is run?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve"># print("Catch you later!")
print("Good-bye!")
print("Hope you are well.")
print("Hello!")</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>nothing, there is an error</p>
                </statement>
                <feedback>
                    <p>There is no error in this program.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Catch you later!</p>
                </statement>
                <feedback>
                    <p>Catch you later! is a comment, as indicated by the # sign, so it won't be printed</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>Good-bye!
Hope you are well.
Hello!</p>
                </statement>
                <feedback>
                    <p>Yes, the lines are printed in the order the Python interpreter gets to them, top to bottom.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Hello!
Hope you are well.
Good-bye!</p>
                </statement>
                <feedback>
                    <p>While it might make sense to say hello before good-bye, the Python interpreter just follows instructions in order as given</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Hello!
Hope you are well.
Good-bye!
Catch you later!</p>
                </statement>
                <feedback>
                    <p>No, that is not the order in which Python sees the instructions.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <comment xml:space="preserve">Contributed Exercises</comment>
        <comment xml:space="preserve">~~~~~~~~~~~~~~~~~~~~~</comment>
        <comment xml:space="preserve">.. raw:: html

{% for q in questions: %}
    &lt;div class='oneq full-width'&gt;
        {{ q['htmlsrc']|safe }}
    &lt;/div&gt;
{% endfor %}</comment>
    </section>
</document>
