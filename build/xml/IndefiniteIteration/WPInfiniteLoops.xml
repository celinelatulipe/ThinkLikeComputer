<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/WPInfiniteLoops.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="WPInfiniteLoops-source.html">WPInfiniteLoops</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="infinite-loops" names="üë©‚Äçüíª\ infinite\ loops">
        <title>üë©‚Äçüíª Infinite Loops</title>
        <paragraph>Although the textbook has a time limit which prevents an active code window from running
            indefinitely, you‚Äôll still have to wait a little while if your program has an ininite loop. If
            you accidentally make one outside of the textbook, you won‚Äôt have that same protection.</paragraph>
        <paragraph>So how can you recognize when you are in danger of making an infinite loop?</paragraph>
        <paragraph>First off, if the variable that you are using to determine if the while loop should continue is
            never reset inside the while loop, then your code will have an infinite loop. (Unless of course you use <literal>break</literal> to
            break out of the loop.)</paragraph>
        <paragraph>Additionally, if the while condition is <literal>while True:</literal> and there is no break, then that is another case of an infinite loop!</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">while True:
    print("Will this stop?")

print("We have escaped.")</literal_block>
        <paragraph>Another case where an infinite loop is likely to occur is when you have reassiged the value of the variable used in the while statement in a way that prevents the loop from completing. This is an example below (if it takes too long, try reloading the page and stepping through this example in codelens):</paragraph>

    <program label="ac10_6_1" interactive='activecode' language="python">
    
        <input>
b = 15

while b &lt; 60:
    b = 5
    print("Bugs")
    b = b + 7
        </input>
<tests>


</tests>

    </program>
        <paragraph>Notice how in this case, b is initally set to 15 outside of the while loop, and then reassigned
            the value of 5 inside, on line 4. By the time 7 has been added to b on line 6, we then have to
            check if b is less than 60. Because it isn‚Äôt we again run line 4, and set the value of b to 5
            again. There is no way to break out of this loop.</paragraph>
        <paragraph>Sometimes programs can take a while to run, so how can you determine if your code is just talking a while or if it is stuck inside an infinite loop? Print statements are for programmers, so take advantage of them! You can add print statements to keep track of how your variables are changing as the program processes the instructions given to them.</paragraph>
    </section>
</document>
