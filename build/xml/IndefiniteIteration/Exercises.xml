<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Exercises-source.html">Exercises</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <paragraph></paragraph>
    <section ids="exercises" names="exercises">
        <title>Exercises</title>
        <QuestionNode ids="moreiter-ex-1" line="16" names="moreiter_ex_1" runestone_options="{'number': 1, 'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'moreiter_ex_1', 'qnumber': '', 'question_label': '11.7.1'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">
            <TabbedStuffNode divid="q1" line="19" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q1', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac10_7_1">
    <statement>
                    <paragraph><strong>1.</strong> Using a while loop, create a list <literal>numbers</literal> that contains the numbers 0 through 35. Your while loop should initialize a counter variable to 0. On each iteration, the loop should append the current value of the counter to the list and the counter should increase by 1. The while loop should stop when the counter is greater than 35.</paragraph>

    </statement>
    <program label="ac10_7_1_editor" interactive='activecode' language="python">

        <input>


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(numbers, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "Testing that numbers is assigned to correct values")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="42" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_5784e08291ba43199d43fdab277849f5', 'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': ''}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode ids="moreiter-ex-2" line="47" names="moreiter_ex_2" runestone_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'moreiter_ex_2', 'qnumber': '', 'question_label': '11.7.3'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">

<exercise label="ac10_7_2">
    <statement>
            <paragraph>Using a while loop, create a list called <literal>L</literal> that contains the numbers 0 to 10. (i.e.: Your while loop should initialize a counter variable to 0. On each iteration, the loop should append the current value of the counter variable to <literal>L</literal> and then increase the counter by 1. The while loop should stop once the counter variable is greater than 10.)</paragraph>

    </statement>
    <program label="ac10_7_2_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(L, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "Testing that L was created correctly.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
        </QuestionNode>
        <QuestionNode ids="moreiter-ex-3" line="65" names="moreiter_ex_3" runestone_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'moreiter_ex_3', 'qnumber': '', 'question_label': '11.7.5'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">
            <TabbedStuffNode divid="q3" line="67" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q3', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac10_7_3">
    <statement>
                    <paragraph>Using a while loop, create a list called <literal>nums</literal> that contains the numbers 0 though 20. (i.e: your while looop should initialize a counter variable on 0. During each iteration, the loop should append the current value of the counter variable to <literal>nums</literal> and then increase the counter by 1. The while loop should stop once the counter variable is greater than 20)</paragraph>

    </statement>
    <program label="ac10_7_3_editor" interactive='activecode' language="python">

        <input>

        </input>
<tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(nums, [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"Testing that nums has been assigned the correct elements")

myTests().main()
</tests>

    </program>
</exercise>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode ids="moreiter-ex-4" line="86" names="moreiter_ex_4" runestone_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'moreiter_ex_4', 'qnumber': '', 'question_label': '11.7.7'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">

<exercise label="ac10_7_4">
    <statement>
            <paragraph>Modify the walking turtle program so that rather than a 90 degree left or right turn the
                angle of the turn is determined randomly at each step.</paragraph>

    </statement>
    <program label="ac10_7_4_editor" interactive='activecode' language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program>
</exercise>
        </QuestionNode>
        <QuestionNode ids="moreiter-ex-5" line="96" names="moreiter_ex_5" runestone_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'moreiter_ex_5', 'qnumber': '', 'question_label': '11.7.9'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">
            <TabbedStuffNode divid="q5" line="98" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q5', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac10_7_5">
    <statement>
                    <paragraph>Modify the turtle walk program so that you have two turtles each with a
                        random starting location. Keep the turtles moving until one of them leaves the screen.</paragraph>

    </statement>
    <program label="ac10_7_5_editor" interactive='activecode' language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program>
</exercise>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

    <program label="q5_answer" interactive='activecode' language="python">
    
        <input>
import random
import turtle

def moveRandom(wn, t):
    coin = random.randrange(0,2)
    if coin == 0:
        t.left(90)
    else:
        t.right(90)

    t.forward(50)

def areColliding(t1, t2):
    if t1.distance(t2) &lt; 2:
        return True
    else:
        return False

def isInScreen(w, t):
    leftBound = - w.window_width() / 2
    rightBound = w.window_width() / 2
    topBound = w.window_height() / 2
    bottomBound = -w.window_height() / 2

    turtleX = t.xcor()
    turtleY = t.ycor()

    stillIn = True
    if turtleX &gt; rightBound or turtleX &lt; leftBound:
        stillIn = False
    if turtleY &gt; topBound or turtleY &lt; bottomBound:
        stillIn = False
    return stillIn

t1 = turtle.Turtle()
t2 = turtle.Turtle()
wn = turtle.Screen()

t1.shape('turtle')
t2.shape('circle')

leftBound = -wn.window_width() / 2
rightBound = wn.window_width() / 2
topBound = wn.window_height() / 2
bottomBound = -wn.window_height() / 2

t1.up()
t1.goto(random.randrange(leftBound, rightBound),
        random.randrange(bottomBound, topBound))
t1.setheading(random.randrange(0, 360))
t1.down()

t2.up()
t2.goto(random.randrange(leftBound, rightBound),
        random.randrange(bottomBound, topBound))
t2.setheading(random.randrange(0, 360))
t2.down()


while isInScreen(wn, t1) and isInScreen(wn, t2):
    moveRandom(wn, t1)
    moveRandom(wn, t2)

wn.exitonclick()
        </input>
<tests>


</tests>

    </program>
                </TabNode>
                <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                    <DisqusNode line="181" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_0cd01637a1814f86b11f576c37a46437', 'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': ''}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">
                    </DisqusNode>
                </TabNode>
            </TabbedStuffNode>
        </QuestionNode>
        <QuestionNode ids="moreiter-ex-6" line="186" names="moreiter_ex_6" runestone_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'moreiter_ex_6', 'qnumber': '', 'question_label': '11.7.12'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">

<exercise label="ac10_7_6">
    <statement>
            <paragraph>Create a while loop that initializes a counter at 0 and will run until the counter reaches 50. If the value of the counter is divisible by 10, append the value to the list, <literal>tens</literal>.</paragraph>

    </statement>
    <program label="ac10_7_6_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(tens, [0, 10, 20, 30, 40, 50], "Testing that tens is assigned to correct values.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
        </QuestionNode>
        <QuestionNode ids="moreiter-ex-7" line="205" names="moreiter_ex_7" runestone_options="{'subchapter': 'Exercises', 'chapter': 'IndefiniteIteration', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'moreiter_ex_7', 'qnumber': '', 'question_label': '11.7.14'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/Exercises.rst">

<exercise label="ac10_7_7">
    <statement>
            <paragraph>Use a while loop to iterate through the numbers 0 through 35. If a number is divisible by 3, it should be appended to a list called <literal>three_nums</literal>.</paragraph>

    </statement>
    <program label="ac10_7_7_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(three_nums, [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33], "Testing that three_nums was created correctly.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
        </QuestionNode>
    </section>
</document>
