<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/IndefiniteIteration/ChapterAssessment.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="ChapterAssessment-source.html">ChapterAssessment</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="chapter-assessment" names="chapter\ assessment">
        <title>Chapter Assessment</title>

<exercise label="ac10_8_1">
    <statement>
        <paragraph>Write a function, <literal>sublist</literal>, that takes in a list of numbers as the parameter. In the function, use a while loop to return a sublist of the input list. The sublist should contain the same values of the original list up until it reaches the number 5 (it should not contain the number 5).</paragraph>

    </statement>
    <program label="ac10_8_1_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testThree(self):
      self.assertEqual(sublist([1, 2, 3, 4, 5, 6, 7, 8]), [1, 2, 3, 4], "Testing that sublist([1, 2, 3, 4, 5, 6, 7, 8]) returns [1, 2, 3, 4]")
      self.assertEqual(sublist([5]), [], "Testing that sublist([5]) returns []")
      self.assertEqual(sublist([8, 6, 5]), [8, 6], "Testing that sublist([8, 6, 5]) returns [8, 6]")
      self.assertEqual(sublist([1, 6, 2, 3, 9]), [1, 6, 2, 3, 9], "Testing that sublist([1, 6, 2, 3, 9]) returns ([1, 6, 2, 3, 9])")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac10_8_2">
    <statement>
        <paragraph>Write a function called <literal>check_nums</literal> that takes a list as its parameter, and contains a while loop that only stops once the element of the list is the number 7. What is returned is a list of all of the numbers up until it reaches 7.</paragraph>

    </statement>
    <program label="ac10_8_2_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(check_nums([0,2,4,9,2,3,6,8,12,14,7,9,10,8,3]), [0,2,4,9,2,3,6,8,12,14], "Testing that check_nums stops on the correct postion with input [0,2,4,9,2,3,6,8,12,14,7,9,10,8,3]")
      self.assertEqual(check_nums([9,302,4,62,78,97,10,7,8,23,53,1]), [9,302,4,62,78,97,10], "Testing that check_nums stops on the correct position with input [9,302,4,62,78,97,10,7,8,23,53,1]")
      self.assertEqual(check_nums([7,8,3,2,4,51]), [], "Testing that check_nums stops on the correct position with input [7,8,3,2,4,51]")
      self.assertEqual(check_nums([1, 6, 2, 3, 9]), [1, 6, 2, 3, 9], "Testing that check_nums([1, 6, 2, 3, 9]) returns ([1, 6, 2, 3, 9])")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac10_8_3">
    <statement>
        <paragraph>Write a function, <literal>sublist</literal>, that takes in a list of strings as the parameter. In the function, use a while loop to return a sublist of the input list. The sublist should contain the same values of the original list up until it reaches the string “STOP” (it should not contain the string “STOP”).</paragraph>

    </statement>
    <program label="ac10_8_3_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFour(self):
      self.assertEqual(sublist(["bob", "joe", "lucy", "STOP", "carol", "james"]), ["bob", "joe", "lucy"], "Testing that sublist(['bob', 'joe', 'lucy', 'STOP', 'carol', 'james']) returns ['bob', 'joe', 'lucy']")
      self.assertEqual(sublist(["STOP"]), [], "Testing that sublist(['STOP']) returns []")
      self.assertEqual(sublist(["jackie", "paul", "STOP"]), ["jackie", "paul"], "Testing that sublist(['jackie', 'paul', 'STOP']) returns ['jackie', 'paul']")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac10_8_4">
    <statement>
        <paragraph>Write a function called <literal>stop_at_z</literal> that iterates through a list of strings. Using a while loop, append each string to a new list until the string that appears is “z”. The function should return the new list.</paragraph>

    </statement>
    <program label="ac10_8_4_editor" interactive='activecode' language="python">

        <input>

def stop_at_z():

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(stop_at_z(['c', 'b', 'd', 'zebra', 'h', 'r', 'z', 'm', 'a', 'k']), ['c', 'b', 'd', 'zebra', 'h', 'r'], "Testing the function stop_at_z on the input ['c', 'b', 'd', 'zebra', 'h', 'r', 'z', 'm', 'a', 'k'].")
      self.assertEqual(stop_at_z(['zoo', 'zika', 'ozzie', 'pizzazz', 'z', 'pizza', 'zap', 'haze']), ['zoo', 'zika', 'ozzie', 'pizzazz'], "Testing the function stop_at_z on the input ['zoo', 'zika', 'ozzie', 'pizzazz', 'z', 'pizza', 'zap', 'haze'].")
      self.assertEqual(stop_at_z(['z']), [], "Testing the function stop_at_z on the input ['z'].")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac10_8_5">
    <statement>
        <paragraph>Below is a for loop that works. Underneath the for loop, rewrite the problem so that it does the same thing, but using a while loop instead of a for loop. Assign the accumulated total in the while loop code to the variable <literal>sum2</literal>. Once complete, sum2 should equal sum1.</paragraph>

    </statement>
    <program label="ac10_8_5_editor" interactive='activecode' language="python">

        <input>

sum1 = 0

lst = [65, 78, 21, 33]

for x in lst:
    sum1 = sum1 + x

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFive(self):
      self.assertEqual(sum2, 197, "Testing that sum2 is assigned to correct value.")
      self.assertIn('while', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac10_8_6">
    <statement>
        <paragraph><strong>Challenge:</strong> Write a function called <literal>beginning</literal> that takes a list as input and contains a while loop that only stops once the element of the list is the string ‘bye’. What is returned is a list that contains up to the first 10 strings, regardless of where the loop stops. (i.e., if it stops on the 32nd element, the first 10 are returned. If “bye” is the 5th element, the first 4 are returned.) <emphasis>If you want to make this even more of a challenge, do this without slicing</emphasis></paragraph>

    </statement>
    <program label="ac10_8_6_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(beginning(['water', 'phone', 'home', 'chapstick', 'market', 'headphones', 'bye', 'stickie notes', 'snapchat', 'facebook', 'social media']), ['water', 'phone', 'home', 'chapstick', 'market', 'headphones'], "Testing that beginning returns the correct list on input ['water', 'phone', 'home', 'chapstick', 'market', 'headphones', 'bye', 'stickie notes', 'snapchat', 'facebook', 'social media']")
      self.assertEqual(beginning(['bye', 'no', 'yes', 'maybe', 'sorta']), [], "Testing that beginning returns the correct list on input ['bye', 'no', 'yes', 'maybe', 'sorta']")
      self.assertEqual(beginning(['hello', 'hi', 'hiyah', 'howdy', 'what up', 'whats good', 'holla', 'good afternoon', 'good morning', 'sup', 'see yah', 'toodel loo', 'night', 'until later', 'peace', 'bye', 'good-bye', 'g night']),['hello', 'hi', 'hiyah', 'howdy', 'what up', 'whats good', 'holla', 'good afternoon', 'good morning', 'sup'] , "Testing that beginning returns the correct list on input ['hello', 'hi', 'hiyah', 'howdy', 'what up', 'whats good', 'holla', 'good afternoon', 'good morning', 'sup', 'see yah', 'toodel loo', 'night', 'until later', 'peace', 'bye', 'good-bye', 'g night']")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

        <exercise label="assess_ch10_7_lh">
            <statement>
    <paragraph>: <var />  <var />  </paragraph></statement><setup><var><image align="center" alt="Adding to a list of odd number from 1 to 19" candidates="{'*': 'IndefiniteIteration/Figures/Chapter_10_1.PNG'}" uri="IndefiniteIteration/Figures/Chapter_10_1.PNG" width="900"/><paragraph>Consider the above screenshot of CodeLens animation. What line number has the exit condition for the while loop? <BlankNode/>
How many more times will the exit condition be checked? <BlankNode/></paragraph></var><var><condition number="[3, 3]"><feedback><paragraph>Correct.</paragraph></feedback></condition><condition string="^\s*.*\s*$"><feedback><paragraph>Incorrect. The exit condition is the condition we check to see if the code inside the loop will run.</paragraph></feedback></condition></var></setup></exercise>
        <exercise label="assess_ch10_8_lh">
            <statement>
    <paragraph>: <var />  </paragraph></statement><setup><var><image align="center" alt="While loop incrementing a score" candidates="{'*': 'IndefiniteIteration/Figures/Chapter_10_2.PNG'}" uri="IndefiniteIteration/Figures/Chapter_10_2.PNG" width="900"/><paragraph>The above screenshot shows a program in mid execution. What will the variable score be equal to after the current iteration of the loop completes? <BlankNode/></paragraph></var></setup></exercise>
    <exercise label="assess_ch10_9_lh">
        <statement>

        <paragraph>:</paragraph>
        <image align="center" alt="Infinte loop" candidates="{'*': 'IndefiniteIteration/Figures/Chapter_10_3.PNG'}" uri="IndefiniteIteration/Figures/Chapter_10_3.PNG" width="900"></image>
        <paragraph>The above screenshot is in mid execution. Assuming the user enters 0 next, select all that are true.</paragraph>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>The loop exits and number_sum is printed</p>
                </statement>
                <feedback>
                    <p>Incorrect, take another look at our exit condition and the variable that the user is changing</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>number_sum is now equal to 36</p>
                </statement>
                <feedback>
                    <p>Incorrect, number_sum is currently equal to 29 and the next number added will be 0</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>The loop continues to execute</p>
                </statement>
                <feedback>
                    <p>Correct, this is an infinte loop since we never alter the variable exit's value</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>num is now equal to 0</p>
                </statement>
                <feedback>
                    <p>Correct, the user has entered 0, overwriting nums previous value of 7</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>The variable exit remains 1</p>
                </statement>
                <feedback>
                    <p>Correct, we did not edit exit's value</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
