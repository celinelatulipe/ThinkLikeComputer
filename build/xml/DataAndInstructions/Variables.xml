<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DataAndInstructions/Variables.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Variables-source.html">Variables</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <comment xml:space="preserve">.. _variables:</comment>
    <section ids="variables" names="variables">
        <title>Variables</title>

    <video xml:id="assignvid" youtube="TrrzfHUtyVw" width="560" />
            <paragraph>One of the most powerful features of a programming language is the ability to
            manipulate <strong>variables</strong>. A variable is a name that refers to a value.</paragraph>
        <paragraph><strong>Assignment statements</strong> create new variables and also give them values to refer to.</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">message = "What's up, Doc?"
n = 17
pi = 3.14159</literal_block>
        <paragraph>This example makes three assignments. The first assigns the string value
            <literal>"What's up, Doc?"</literal> to a new variable named <literal>message</literal>. The second assigns the
            integer <literal>17</literal> to <literal>n</literal>, and the third assigns the floating-point number
            <literal>3.14159</literal> to a variable called <literal>pi</literal>.</paragraph>
        <paragraph>The <strong>assignment token</strong>, <literal>=</literal>, should not be confused with <emphasis>equality</emphasis> (we will see later that equality uses the
            <literal>==</literal> token).  The assignment statement links a <emphasis>name</emphasis>, on the left hand
            side of the operator, with a <emphasis>value</emphasis>, on the right hand side.  This is why you
            will get an error if you enter:</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">17 = n</literal_block>
        <tip>
            <paragraph>When reading or writing code, say to yourself “n is assigned 17” or “n gets
                the value 17” or “n is a reference to the object 17” or “n refers to the object 17”.  <strong>Don’t say “n equals 17”</strong>.</paragraph>
        </tip>
        <paragraph>A common way to represent variables on paper is to write the name with an arrow
            pointing to the variable’s value. This kind of figure, known as a <strong>reference diagram</strong>, is often called a <strong>state
                snapshot</strong> because it shows what state each of the variables is in at a
            particular instant in time.  (Think of it as the variable’s state of mind).
            This diagram shows the result of executing the assignment statements shown above.</paragraph>
        <image alt="Reference Diagram" candidates="{'*': 'DataAndInstructions/Figures/refdiagram1.png'}" uri="DataAndInstructions/Figures/refdiagram1.png"></image>
        <paragraph>If your program includes a variable in any expression, whenever that expression is executed it will produce the value
            that is linked to the variable at the time of execution.  In other words, evaluating a variable looks up its value.</paragraph>

    <program label="ac2_7_1" interactive='activecode' language="python">
    
        <input>
message = "What's up, Doc?"
n = 17
pi = 3.14159

print(message)
print(n)
print(pi)
        </input>
<tests>


</tests>

    </program>
        <paragraph>In each case the result is the value of the variable.
            To see this in even more detail, we can run the program using CodeLens.</paragraph>

<program label="clens2_7_1" interactive="codelens" language="python">
    <input>
message = "What's up, Doc?"
n = 17
pi = 3.14159

print(message)
print(n)
print(pi)
    </input>
</program>
        <paragraph>Now, as you step through the statements, you can see
            the variables and the values they reference as those references are
            created.</paragraph>
        <paragraph>We use variables in a program to “remember” things, like a patient’s body temperature.  But variables are <emphasis>variable</emphasis>. This means they can change
            over time, just like a patient’s body temperature can fluctuate during an illness.  You can assign a value
            to a variable, and later assign a different value to the same variable.</paragraph>
        <note>
            <paragraph>This is different from math. In algebra, if you give <literal>x</literal> the value 3, it
                cannot change to refer to a different value half-way through your
                calculations!</paragraph>
        </note>
        <paragraph>To see this, read and then run the following program.
            You’ll notice we change the value of <literal>day</literal> three times, and on the third
            assignment we even give it a value that is of a different type.</paragraph>

<program label="clens2_7_2" interactive="codelens" language="python">
    <input>
day = "Thursday"
print(day)
day = "Friday"
print(day)
day = 21
print(day)
    </input>
</program>
        <paragraph>A great deal of programming is about having the computer remember things.  For example, we might want to keep
            track of the number of missed calls on your phone.  Each time another call is missed, we will arrange to update
            or change the variable so that it will always reflect the correct value.</paragraph>
        <paragraph>Any place in a Python program where a number or string is expected, you can put a variable name instead. The python interpreter will substitute the value for the variable name.</paragraph>
        <paragraph>For example, we can find out the data type of the current value of a variable by putting the variable name inside the parentheses following the function name <literal>type</literal>.</paragraph>

    <program label="ac2_7_2" interactive='activecode' language="python">
    
        <input>
message = "What's up, Doc?"
n = 17
pi = 3.14159

print(type(message))
print(type(n))
print(type(pi))
        </input>
<tests>


</tests>

    </program>
        <note>
            <paragraph>If you have programmed in another language such as Java or C++, you may be used to the idea that <emphasis>variables</emphasis> have types that are declared when the variable name is first introduced in a program. Python doesn’t do that. Variables don’t have types in Python; <emphasis>values</emphasis> do. That means that it is acceptable in Python to have a variable name refer to an integer and later have the same variable name refer to a string. This is almost never a good idea, because it will confuse human readers (including you), but the Python interpreter will not complain.</paragraph>
        </note>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question2_7_1">
        <statement>

        <paragraph>What is printed when the following statements execute?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">day = "Thursday"
day = 32.5
day = 19
print(day)</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>Nothing is printed. A runtime error occurs.</p>
                </statement>
                <feedback>
                    <p>It is legal to change the type of data that a variable holds in Python.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Thursday</p>
                </statement>
                <feedback>
                    <p>This is the first value assigned to the variable day, but the next statements reassign that variable to new values.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>32.5</p>
                </statement>
                <feedback>
                    <p>This is the second value assigned to the variable day, but the next statement reassigns that variable to a new value.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>19</p>
                </statement>
                <feedback>
                    <p>The variable day will contain the last value assigned to it when it is printed.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
