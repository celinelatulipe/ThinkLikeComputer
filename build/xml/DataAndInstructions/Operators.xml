<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DataAndInstructions/Operators.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Operators-source.html">Operators</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <target ids="input" names="input"></target>
    <index entries="['single',\ 'input',\ 'index-0',\ '',\ None] ['single',\ 'input\ dialog',\ 'index-0',\ '',\ None] ['single',\ '+;\ addition',\ 'index-0',\ '',\ None] ['single',\ '-',\ 'index-0',\ '',\ None] ['single',\ '*;\ multiplication\ of\ numbers',\ 'index-0',\ '',\ None] ['single',\ '**',\ 'index-0',\ '',\ None] ['single',\ 'multiplication',\ 'index-0',\ '',\ None] ['single',\ 'operators\ and\ operands',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="operators-and-operands index-0" names="operators\ and\ operands">
        <title>Operators and Operands</title>
        <paragraph>You can build complex expressions out of simpler ones using <strong>operators</strong>. Operators are special tokens that represent computations like addition,
            multiplication and division. The values the operator works on are called
            <strong>operands</strong>.</paragraph>
        <paragraph>The following are all legal Python expressions:</paragraph>
        <literal_block force="False" language="default" linenos="False" xml:space="preserve">20 + 32
5 ** 2
(5 + 9) * (15 - 7)</literal_block>
        <paragraph>The tokens <literal>+</literal>, <literal>-</literal>, and <literal>*</literal>, and the use of parentheses for grouping,
            mean in Python what they mean in mathematics. The asterisk (<literal>*</literal>) is the
            token for multiplication, and <literal>**</literal> is the token for exponentiation (so the second line above evaluates to 5 squared (25)).
            Addition, subtraction, multiplication, and exponentiation all do what you
            expect.</paragraph>
        <paragraph>Remember that if we want to see the results of the computation, the program needs to specify that with the word <literal>print</literal>. The first three computations occur, but their results are not printed out to the console.</paragraph>

    <program label="ac_operators_example_not_printing" interactive='activecode' language="python">
    
        <input>
20 + 32
5 ** 2
(5 + 9) * (15 - 7)
print(7 + 5)
        </input>
<tests>


</tests>

    </program>
        <paragraph>In Python 3, which we will be using, the division operator <literal>/</literal> produces a floating point result (even if the result is an integer): <literal>4/2</literal> is <literal>2.0</literal>. If you want truncated division, which ignores the remainder, you can use the <literal>//</literal> operator (for example, <literal>5//2</literal> is <literal>2</literal>).</paragraph>

    <program label="ac_integer_floating_division" interactive='activecode' language="python">
    
        <input>
print(9 / 5)
print(5 / 9)
print(9 // 5)
        </input>
<tests>


</tests>

    </program>
        <paragraph>Pay particular attention to the examples above. Note that <literal>9//5</literal> truncates rather than rounding, so it produces the value 1 rather than 2.</paragraph>
        <paragraph>The truncated division operator, <literal>//</literal>, also works on floating point numbers. It truncates to the nearest integer, but still produces a floating point result. Thus <literal>7.0 // 3.0</literal> is <literal>2.0</literal>.</paragraph>

    <program label="ac_integer_floating_division2" interactive='activecode' language="python">
    
        <input>
print(7.0 / 3.0)
print(7.0 // 3.0)
        </input>
<tests>


</tests>

    </program>
        <index entries="['single',\ 'modulus',\ 'index-1',\ '',\ None] ['single',\ '%',\ 'index-1',\ '',\ None] ['single',\ 'remainder',\ 'index-1',\ '',\ None]" inline="False"></index>
        <target refid="index-1"></target>
        <paragraph ids="index-1">The <strong>modulus operator</strong>, sometimes also called the <strong>remainder operator</strong> or <strong>integer remainder operator</strong> works on integers (and integer expressions) and yields
            the remainder when the first operand is divided by the second. In Python (and many other programming languages), the
            modulus operator is a percent sign (<literal>%</literal>). The syntax is the same as for other
            operators.</paragraph>

    <program label="ac_modulus_example" interactive='activecode' language="python">
    
        <input>
print(7 // 3)    # This is the integer division operator
print(7 % 3)     # This is the remainder or modulus operator
        </input>
<tests>


</tests>

    </program>
        <paragraph>In the above example, 7 divided by 3 is 2 when we use integer division and there is a remainder of 1.</paragraph>
        <paragraph>The modulus operator turns out to be surprisingly useful. For example, you can
            check whether one number is divisible by anotherâ€”if <literal>x % y</literal> is zero, then
            <literal>x</literal> is divisible by <literal>y</literal>.
            Also, you can extract the right-most digit or digits from a number.  For
            example, <literal>x % 10</literal> yields the right-most digit of <literal>x</literal> (in base 10).
            Similarly <literal>x % 100</literal> yields the last two digits.</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question2_3_1">
        <statement>

        <paragraph>What value is printed when the following statement executes?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">print(18 / 4)</literal_block>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>4.5</p>
                </statement>
                <feedback>
                    <p>Because the result is not an integer, a floating point answer is produced.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Even if // were used, it would still truncate, not round</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>Perhaps you are thinking of the integer division operator, //</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>4.0</p>
                </statement>
                <feedback>
                    <p>/ performs exact division, without truncation</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>/ does division. Perhaps you were thinking of %, which computes the remainder?</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question2_3_2">
        <statement>

        <paragraph>What value is printed when the following statement executes?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">print(18.0 // 4)</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>4.5</p>
                </statement>
                <feedback>
                    <p>- // does truncated division.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>- Neither / nor // leads to rounding up</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>- Even though it truncates, it produces a floating point result</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>4.0</p>
                </statement>
                <feedback>
                    <p>- Yes, even though it truncates, it produces a floating point result because 18.0 is a float</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>- / does division. Perhaps you were thinking of %, which computes the remainder?</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question2_3_3">
        <statement>

        <paragraph>What value is printed when the following statement executes?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">print(18 % 4)</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>4.25</p>
                </statement>
                <feedback>
                    <p>The % operator returns the remainder after division.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>The % operator returns the remainder after division.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>The % operator returns the remainder after division.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>The % operator returns the remainder after division.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
