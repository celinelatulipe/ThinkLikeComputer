<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DataAndInstructions/OrderofOperations.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="OrderofOperations-source.html">OrderofOperations</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="order-of-operations" names="order\ of\ operations">
        <title>Order of Operations</title>

    <video xml:id="precedencevid" youtube="Ezve3QJv6Aw" width="560" />
            <paragraph>When more than one operator appears in an expression, the order of evaluation
            depends on the <strong>rules of precedence</strong>. Python follows the same precedence
            rules for its mathematical operators that mathematics does.</paragraph>
        <comment xml:space="preserve">The acronym PEMDAS</comment>
        <comment xml:space="preserve">is a useful way to remember the order of operations:</comment>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph><emphasis>Parentheses</emphasis> have the highest precedence and can be used to force an
                    expression to evaluate in the order you want. Since expressions in
                    parentheses are evaluated first, <literal>2 * (3-1)</literal> is 4, and <literal>(1+1)**(5-2)</literal> is
                    8. You can also use parentheses to make an expression easier to read, as in
                    <literal>(minute * 100) / 60</literal>: in this case, the parentheses don’t change the result,
                    but they reinforce that the expression in parentheses will be evaluated first.</paragraph>
            </list_item>
            <list_item>
                <paragraph><emphasis>Exponentiation</emphasis> has the next highest precedence, so <literal>2**1+1</literal> is 3 and
                    not 4, and <literal>3*1**3</literal> is 3 and not 27.  Can you explain why?</paragraph>
            </list_item>
            <list_item>
                <paragraph><emphasis>Multiplication and both division</emphasis> operators have the same
                    precedence, which is higher than addition and subtraction, which
                    also have the same precedence. So <literal>2*3-1</literal> yields 5 rather than 4, and
                    <literal>5-2*2</literal> is 1, not 6.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Operators with the <emphasis>same</emphasis> precedence are
                    evaluated from left-to-right. In algebra we say they are <emphasis>left-associative</emphasis>.
                    So in the expression <literal>6-3+2</literal>, the subtraction happens first, yielding 3.
                    We then add 2 to get the result 5. If the operations had been evaluated from
                    right to left, the result would have been <literal>6-(3+2)</literal>, which is 1.</paragraph>
            </list_item>
        </enumerated_list>
        <comment xml:space="preserve">(The</comment>
        <comment xml:space="preserve">acronym PEDMAS could mislead you to thinking that division has higher</comment>
        <comment xml:space="preserve">precedence than multiplication, and addition is done ahead of subtraction -</comment>
        <comment xml:space="preserve">don't be misled.  Subtraction and addition are at the same precedence, and</comment>
        <comment xml:space="preserve">the left-to-right rule applies.)</comment>
        <note>
            <paragraph>Due to some historical quirk, an exception to the left-to-right
                left-associative rule is the exponentiation operator <literal>**</literal>. A useful hint
                is to always use parentheses to force exactly the order you want when
                exponentiation is involved:</paragraph>
        </note>

    <program label="ac2_11_1" interactive='activecode' language="python">
    
        <input>
print(2 ** 3 ** 2)     # the right-most ** operator gets done first!
print((2 ** 3) ** 2)   # use parentheses to force the order you want!
        </input>
<tests>


</tests>

    </program>
        <note>
            <paragraph>This is a second way that parentheses are used in Python. The first way you’ve already seen is that () indicates a function call, with the inputs going inside the parentheses. How can Python tell when parentheses specify to call a function, and when they are just forcing the order of operations for ambiguous operator expressions?</paragraph>
            <paragraph>The answer is that if there’s a a function to the left of the parentheses, then the parentheses indicate a function call, and otherwise not.</paragraph>
        </note>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question2_11_1">
        <statement>

        <paragraph>What is the value of the following expression:</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">16 - 2 * 5 // 3 + 1</literal_block>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>14</p>
                </statement>
                <feedback>
                    <p>Using parentheses, the expression is evaluated as (2*5) first, then (10 // 3), then (16-3), and then (13+1).</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>24</p>
                </statement>
                <feedback>
                    <p>Remember that * has precedence over  -.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>Remember that // has precedence over -.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>13.667</p>
                </statement>
                <feedback>
                    <p>Remember that // does integer division.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <paragraph>Here is an animation for the above expression:</paragraph>
<exercise runestone='se_ac2_11_1' />    </section>
</document>
