<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DataAndInstructions/ConvertTypeFunctions.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="ConvertTypeFunctions-source.html">ConvertTypeFunctions</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="type-conversion-functions" names="type\ conversion\ functions">
        <title>Type conversion functions</title>
        <paragraph>Sometimes it is necessary to convert values from one type to another.  Python provides
            a few simple functions that will allow us to do that.  The functions <literal>int</literal>, <literal>float</literal> and <literal>str</literal>
            will (attempt to) convert their arguments into types <literal>int</literal>, <literal>float</literal> and <literal>str</literal>
            respectively.  We call these <strong>type conversion</strong> functions.</paragraph>
        <paragraph>The <literal>int</literal> function can take a floating point number or a string, and turn it
            into an int. For floating point numbers, it <emphasis>discards</emphasis> the decimal portion of
            the number - a process we call <emphasis>truncation towards zero</emphasis> on the number line.
            Let us see this in action:</paragraph>

    <program label="ac2_6_1" interactive='activecode' language="python">
    
        <input>
print(3.14, int(3.14))
print(3.9999, int(3.9999))       # This doesn't round to the closest int!
print(3.0, int(3.0))
print(-3.999, int(-3.999))        # Note that the result is closer to zero

print("2345", int("2345"))        # parse a string to produce an int
print(17, int(17))                # int even works on integers
print(int("23bottles"))
        </input>
<tests>


</tests>

    </program>
        <paragraph>The last case shows that a string has to be a syntactically legal number,
            otherwise you’ll get one of those pesky runtime errors.  Modify the example by deleting the
            <literal>bottles</literal> and rerun the program.  You should see the integer <literal>23</literal>.</paragraph>
        <paragraph>The type converter <literal>float</literal> can turn an integer, or a syntactically
            legal string, into a float.</paragraph>

    <program label="ac2_6_2" interactive='activecode' language="python">
    
        <input>
print(float("123.45"))
print(type(float("123.45")))
        </input>
<tests>


</tests>

    </program>
        <paragraph>The type converter <literal>str</literal> turns its argument into a string.  Remember that when we print a string, the
            quotes are removed in the output window.  However, if we print the type, we can see that it is definitely <literal>str</literal>.</paragraph>

    <program label="ac2_6_3" interactive='activecode' language="python">
    
        <input>
print(str(17))
print(str(123.45))
print(type(str(123.45)))
        </input>
<tests>


</tests>

    </program>
        <paragraph>One common operation where you might need to do a type conversion is when you are concatenating several strings together but want to include a numeric value as part of the final string. Because we can’t concatenate a string with an integer or floating point number, we will often have to convert numbers to strings before concatenating them.</paragraph>
        <image alt='a variable stores the value 55. a print statement tries to print "the value is" concatenated with the integer, but a runtime error occurs. Solution is to convert the integer into a string so that it can be concatenated.' candidates="{'*': 'DataAndInstructions/Figures/type_cast.gif'}" uri="DataAndInstructions/Figures/type_cast.gif"></image>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question2_6_1">
        <statement>

        <paragraph>What value is printed when the following statement executes?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">print(int(53.785))</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>Nothing is printed. It generates a runtime error.</p>
                </statement>
                <feedback>
                    <p>The statement is valid Python code.  It calls the int function on 53.785 and then prints the value that is returned.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>53</p>
                </statement>
                <feedback>
                    <p>The int function truncates all values after the decimal and prints the integer value.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>54</p>
                </statement>
                <feedback>
                    <p>When converting to an integer, the int function does not round.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>53.785</p>
                </statement>
                <feedback>
                    <p>The int function removes the fractional part of 53.785 and returns an integer, which is then printed.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
