<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DataAndInstructions/Glossary.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Glossary-source.html">Glossary</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="glossary" names="glossary">
        <title>Glossary</title>
        <glossary sorted="False">
            <definition_list classes="glossary">
                <definition_list_item>
                    <term ids="term-assignment-statement">assignment statement<index entries="['single',\ 'assignment\ statement',\ 'term-assignment-statement',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A statement that assigns a value to a name (variable). To the left of
                            the assignment operator, <literal>=</literal>, is a name. To the right of the
                            assignment token is an expression which is evaluated by the Python
                            interpreter and then assigned to the name. The difference between the
                            left and right hand sides of the assignment statement is often
                            confusing to new programmers. In the following assignment:</paragraph>
                        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">n = n + 1</literal_block>
                        <paragraph><literal>n</literal> plays a very different role on each side of the <literal>=</literal>. On the
                            right it is a <emphasis>value</emphasis> and makes up part of the <emphasis>expression</emphasis> which will
                            be evaluated by the Python interpreter before assigning it to the name
                            on the left.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-assignment-token">assignment token<index entries="['single',\ 'assignment\ token',\ 'term-assignment-token',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph><literal>=</literal> is Python’s assignment token, which should not be confused
                            with the mathematical comparison operator using the same symbol.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-class">class<index entries="['single',\ 'class',\ 'term-class',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>see <strong>data type</strong> below</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-data-type">data type<index entries="['single',\ 'data\ type',\ 'term-data-type',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A set of values. The type of a value determines how it can be used in
                            expressions. So far, the types you have seen are integers (<literal>int</literal>),
                            floating-point numbers (<literal>float</literal>), and strings (<literal>str</literal>).</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-decrement">decrement<index entries="['single',\ 'decrement',\ 'term-decrement',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>Decrease by 1.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-evaluate">evaluate<index entries="['single',\ 'evaluate',\ 'term-evaluate',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>To simplify an expression by performing the operations in order to
                            yield a single value.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-expression">expression<index entries="['single',\ 'expression',\ 'term-expression',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A combination of operators and operands (variables and values) that represents a
                            single result value.  Expressions are evaluated to give that result.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-float">float<index entries="['single',\ 'float',\ 'term-float',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A Python data type which stores <emphasis>floating-point</emphasis> numbers.
                            Floating-point numbers are stored internally in two parts: a <emphasis>base</emphasis> and
                            an <emphasis>exponent</emphasis>. When printed in the standard format, they look like
                            decimal numbers. Beware of rounding errors when you use <literal>float</literal>s,
                            and remember that they are only approximate values.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-increment">increment<index entries="['single',\ 'increment',\ 'term-increment',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>Both as a noun and as a verb, increment means to increase by 1.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-initialization-of-a-variable">initialization (of a variable)<index entries="['single',\ 'initialization\ (of\ a\ variable)',\ 'term-initialization-of-a-variable',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>To initialize a variable is to give it an initial value.
                            Since in Python variables don’t exist
                            until they are assigned values, they are initialized when they are
                            created.  In other programming languages this is not the case, and
                            variables can be created without being initialized, in which case they
                            have either default or <emphasis>garbage</emphasis> values.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-int">int<index entries="['single',\ 'int',\ 'term-int',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A Python data type that holds positive and negative <strong>whole</strong> numbers.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-integer-division">integer division<index entries="['single',\ 'integer\ division',\ 'term-integer-division',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>An operation that divides one integer by another and yields an integer.
                            Integer division yields only the whole number of times that the
                            numerator is divisible by the denominator and discards any remainder.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-keyword">keyword<index entries="['single',\ 'keyword',\ 'term-keyword',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A reserved word that is used by the compiler to parse program; you
                            cannot use keywords like <literal>if</literal>, <literal>def</literal>, and <literal>while</literal> as variable
                            names.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-literal">literal<index entries="['single',\ 'literal',\ 'term-literal',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A number or string that is written directly in a program. Sometimes these are also referred to as literal values, or just values, but be careful not to confuse a literal value as written in a program with an internal value maintained by the Python interpreter during execution of a program.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-logical-operator">logical operator<index entries="['single',\ 'logical\ operator',\ 'term-logical-operator',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>One of the operators that combines boolean expressions: <literal>and</literal>,
                            <literal>or</literal>, and <literal>not</literal>.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-modulus-operator">modulus operator<index entries="['single',\ 'modulus\ operator',\ 'term-modulus-operator',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>An operator, denoted with a percent sign ( <literal>%</literal>), that works on
                            integers and yields the remainder when one number is divided by
                            another.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-object">object<index entries="['single',\ 'object',\ 'term-object',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>Also known as a data object (or data value).  The fundamental things that programs are designed to
                            manipulate (or that programmers ask to do things for them).</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-operand">operand<index entries="['single',\ 'operand',\ 'term-operand',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>One of the values on which an operator operates.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-operator">operator<index entries="['single',\ 'operator',\ 'term-operator',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A special symbol that represents a simple computation like addition,
                            multiplication, or string concatenation.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-prompt-string">prompt string<index entries="['single',\ 'prompt\ string',\ 'term-prompt-string',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>Used during interactive input to provide the use with hints as to what type of value to enter.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-reference-diagram">reference diagram<index entries="['single',\ 'reference\ diagram',\ 'term-reference-diagram',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A picture showing a variable with an arrow pointing to the value (object) that the variable refers to. See also <strong>state snapshot</strong>.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-rules-of-precedence">rules of precedence<index entries="['single',\ 'rules\ of\ precedence',\ 'term-rules-of-precedence',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>The set of rules governing the order in which expressions involving
                            multiple operators and operands are evaluated.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-state-snapshot">state snapshot<index entries="['single',\ 'state\ snapshot',\ 'term-state-snapshot',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A graphical representation of a set of variables and the values to
                            which they refer, taken at a particular instant during the program’s
                            execution.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-statement">statement<index entries="['single',\ 'statement',\ 'term-statement',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>An instruction that the Python interpreter can execute.  So far we have
                            only seen the assignment statement, but we will soon meet the
                            <literal>import</literal> statement and the <literal>for</literal> statement.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-str">str<index entries="['single',\ 'str',\ 'term-str',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A Python data type that holds a string of characters.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-type-conversion-function">type conversion function<index entries="['single',\ 'type\ conversion\ function',\ 'term-type-conversion-function',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A function that can convert a data value from one type to another.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-value">value<index entries="['single',\ 'value',\ 'term-value',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A number or string (or other things to be named later) that can be
                            stored in a variable or computed in an expression.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-variable">variable<index entries="['single',\ 'variable',\ 'term-variable',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A name that refers to a value.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-variable-name">variable name<index entries="['single',\ 'variable\ name',\ 'term-variable-name',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A name given to a variable. Variable names in Python consist of a
                            sequence of letters (a..z, A..Z, or _) and digits (0..9) that begins
                            with a letter.  In best programming practice, variable names should be
                            chosen so that they describe their use in the program, making the
                            program <emphasis>self documenting</emphasis>.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
        </glossary>
    </section>
</document>
