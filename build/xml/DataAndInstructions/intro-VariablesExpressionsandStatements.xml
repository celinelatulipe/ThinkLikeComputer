<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DataAndInstructions/intro-VariablesExpressionsandStatements.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="intro-VariablesExpressionsandStatements-source.html">intro-VariablesExpressionsandStatements</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <target refid="simple-python-data"></target>
    <section ids="introduction simple-python-data" names="introduction simple_python_data">
        <title>Introduction</title>
        <index entries="['single',\ 'value',\ 'index-0',\ '',\ None] ['single',\ 'data\ type',\ 'index-0',\ '',\ None] ['single',\ 'string',\ 'index-0',\ '',\ None] ['single',\ 'integer',\ 'index-0',\ '',\ None] ['single',\ 'int',\ 'index-0',\ '',\ None] ['single',\ 'float',\ 'index-0',\ '',\ None] ['single',\ 'class',\ 'index-0',\ '',\ None] ['single',\ 'literal',\ 'index-0',\ '',\ None] ['single',\ 'output',\ 'index-0',\ '',\ None] ['single',\ 'triple\ quoted\ string',\ 'index-0',\ '',\ None]" inline="False"></index>
        <target refid="index-0"></target>
        <target refid="values-n-types"></target>

    <video xml:id="typesnconvert" youtube="vNfCfowr-pQ" width="560" />
            <paragraph>This chapter introduces several basic building blocks of Python programs:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>literals, like numbers and character strings</paragraph>
            </list_item>
            <list_item>
                <paragraph>operators, like <literal>+</literal> and <literal>*</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph>function calls, which take values as inputs and compute new values</paragraph>
            </list_item>
            <list_item>
                <paragraph>variables, which save values so they can be used later in the program</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>These are the basic building blocks that are assembled to create programs that you interact with everyday—from the software running on your smartwatch, to the infrastructure behind the largest websites, and every app running on your phone.</paragraph>
        <section ids="learning-goals" names="learning\ goals">
            <title>Learning Goals</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>To understand Python’s storage model</paragraph>
                </list_item>
                <list_item>
                    <paragraph>To understand how to assign values to variables so they can be stored and reused</paragraph>
                </list_item>
                <list_item>
                    <paragraph>To understand operator precedence</paragraph>
                </list_item>
                <list_item>
                    <paragraph>To distinguish between expressions, values, and printed representations</paragraph>
                </list_item>
                <list_item>
                    <paragraph>To recognize &amp; explain hard coding</paragraph>
                </list_item>
                <list_item>
                    <paragraph>To understand how to get input from an end user</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="objectives" names="objectives">
            <title>Objectives</title>
            <paragraph>After completing the exercises in this chapter, you should be able to:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Given some sample code, identify variables that reference an object of a particular type</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Given a variable of one type, convert it to another</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Simulate evaluation of an expression and assignment statement</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Use reassignment to increment a variable</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Get input from a user and convert the input to the appropriate type</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Identify the following types of values: strings, integers, floats, functions</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Recognize valid vs. invalid variable names</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Write an assignment statement</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Update a reference diagram after reassignment</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>
