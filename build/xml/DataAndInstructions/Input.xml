<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DataAndInstructions/Input.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Input-source.html">Input</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'order\ of\ operations',\ 'index-0',\ '',\ None] ['single',\ 'rules\ of\ precedence',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="input index-0" names="input">
        <title>Input</title>
        <comment xml:space="preserve">video should go here, taken from steve's youtube video on print + input</comment>
        <paragraph>Our programs get more interesting if they don’t do exactly the same thing every time they run.
            One way to make them more interesting is to get <strong>input</strong> from the user.  Luckily, in Python
            there is a built-in function to accomplish this task.  It is called <literal>input</literal>.</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">n = input("Please enter your name: ")</literal_block>
        <paragraph>The input function allows the programmer to provide a <strong>prompt string</strong>. In the example above,
            it is “Please enter your name: “.  When the function is evaluated, the prompt is
            shown (in the browser, look for a popup window).
            The user of the program can type some text and press <literal>return</literal>. When this
            happens the text that has been entered is returned from the <literal>input</literal> function,
            and in this case assigned to the variable <literal>n</literal>.  Run this example a few times and
            try some different names in the input box that appears.</paragraph>

    <program label="ac2_16_1" interactive='activecode' language="python">
    
        <input>
n = input("Please enter your name: ")
print("Hello", n)
        </input>
<tests>


</tests>

    </program>
        <paragraph>It is very important to note that the <literal>input</literal> function returns a string value. Even if you
            asked the user to enter their age, you would get back a string like
            <literal>"17"</literal>.  It would be your job, as the programmer, to convert that string into
            an int or a float, using the <literal>int</literal> or <literal>float</literal> converter functions we saw
            earlier.</paragraph>
        <note>
            <paragraph>We often use the word “input” (or, synonymously, argument) to refer to the values that are passed to any function. Do not confuse that with the <literal>input</literal> <strong>function</strong>, which asks the end user of a program to type in a value. Like any function, <literal>input</literal> itself takes an input argument and produces an output. The input is a character string that is displayed as a prompt to the user. The output is whatever character string the user types.</paragraph>
        </note>
        <paragraph>Here is a program that turns a number of seconds into more human readable counts of hours,
            minutes, and seconds. A call to <literal>input()</literal> allows the user to enter the number of seconds.
            Then we convert that string to an integer.  From there we use the division and modulus
            operators to compute the results.</paragraph>

    <program label="ac2_16_2" interactive='activecode' language="python">
    
        <input>
str_seconds = input("Please enter the number of seconds you wish to convert")
total_secs = int(str_seconds)

hours = total_secs // 3600
secs_still_remaining = total_secs % 3600
minutes =  secs_still_remaining // 60
secs_finally_remaining = secs_still_remaining  % 60

print("Hrs=", hours, "mins=", minutes, "secs=", secs_finally_remaining)
        </input>
<tests>


</tests>

    </program>
        <paragraph>The variable <literal>str_seconds</literal> will refer to the string that is entered by the user. As we said above, even though this string may be <literal>7684</literal>, it is still a string and not a number.  To convert it to an integer, we use the <literal>int</literal> function.
            The result is referred to by <literal>total_secs</literal>.  Now, each time you run the program, you can enter a new value for the number of seconds to be converted.</paragraph>
        <paragraph>Here is a turtle example that asks the user for input on where the turtle should go:</paragraph>

    <program label="ac2_16_3" interactive='activecode' language="python">
    
        <input>
import turtle
wn = turtle.Screen()
zhang = turtle.Turtle()

user_x = input("Enter an x coordinate")
user_y = input("Enter a y coordinate")

x = int(user_x)
y = int(user_y)

zhang.goto(x, y)
        </input>
<tests>


</tests>

    </program>
        <paragraph>The input functions on lines 5 and 6 ask the user to enter coordinates and saves the resulting strings to the <title_reference>user_x</title_reference> and <title_reference>user_y</title_reference> variables. The statements of lines 8 and 9 convert the strings to integers. On line 11, the turtle draws a line from the center of the window to wherever the user specified.</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question2_16_1">
        <statement>

        <paragraph>What is printed when the following statements execute?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">n = input("Please enter your age: ")
# user types in 18
print(type(n))</literal_block>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>&lt;class 'str'&gt;</p>
                </statement>
                <feedback>
                    <p>All input from users is read in as a string.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>&lt;class 'int'&gt;</p>
                </statement>
                <feedback>
                    <p>Even though the user typed in an integer, it does not come into the program as an integer.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>&lt;class 18&gt;</p>
                </statement>
                <feedback>
                    <p>18 is the value of what the user typed, not the type of the data.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>18</p>
                </statement>
                <feedback>
                    <p>18 is the value of what the user typed, not the type of the data.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
