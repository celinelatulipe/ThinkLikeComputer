<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DataAndInstructions/VariableNamesandKeywords.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="VariableNamesandKeywords-source.html">VariableNamesandKeywords</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="variable-names-and-keywords" names="variable\ names\ and\ keywords">
        <title>Variable Names and Keywords</title>
        <paragraph><strong>Variable names</strong> can be arbitrarily long. They can contain both letters and
            digits, but they have to begin with a letter or an underscore. Although it is
            legal to use uppercase letters, by convention we don’t. If you do, remember
            that case matters. <literal>Bruce</literal> and <literal>bruce</literal> are different variables.</paragraph>
        <caution>
            <paragraph>Variable names can <strong>never</strong> contain spaces.</paragraph>
        </caution>
        <paragraph>The underscore character ( <literal>_</literal>) can also appear in a name. It is often used in
            names with multiple words, such as <literal>my_name</literal> or <literal>price_of_tea_in_china</literal>.
            There are some situations in which names beginning with an underscore have
            special meaning, so a safe rule for beginners is to start all names with a
            letter.</paragraph>
        <paragraph>If you give a variable an illegal name, you get a syntax error.  In the example below, each
            of the variable names is illegal.</paragraph>
        <literal_block force="False" language="default" linenos="False" xml:space="preserve">76trombones = "big parade"
more$ = 1000000
class = "Computer Science 101"</literal_block>
        <paragraph><literal>76trombones</literal> is illegal because it does not begin with a letter.  <literal>more$</literal>
            is illegal because it contains an illegal character, the dollar sign. But
            what’s wrong with <literal>class</literal>?</paragraph>
        <paragraph>It turns out that <literal>class</literal> is one of the Python <strong>keywords</strong>. Keywords define
            the language’s syntax rules and structure, and they cannot be used as variable
            names.
            Python has thirty-something keywords (and every now and again improvements to
            Python introduce or eliminate one or two):</paragraph>
        <table>
            <tgroup cols="6">
                <colspec colwidth="8"></colspec>
                <colspec colwidth="8"></colspec>
                <colspec colwidth="8"></colspec>
                <colspec colwidth="8"></colspec>
                <colspec colwidth="8"></colspec>
                <colspec colwidth="8"></colspec>
                <tbody>
                    <row>
                        <entry>
                            <paragraph>and</paragraph>
                        </entry>
                        <entry>
                            <paragraph>as</paragraph>
                        </entry>
                        <entry>
                            <paragraph>assert</paragraph>
                        </entry>
                        <entry>
                            <paragraph>break</paragraph>
                        </entry>
                        <entry>
                            <paragraph>class</paragraph>
                        </entry>
                        <entry>
                            <paragraph>continue</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>def</paragraph>
                        </entry>
                        <entry>
                            <paragraph>del</paragraph>
                        </entry>
                        <entry>
                            <paragraph>elif</paragraph>
                        </entry>
                        <entry>
                            <paragraph>else</paragraph>
                        </entry>
                        <entry>
                            <paragraph>except</paragraph>
                        </entry>
                        <entry>
                            <paragraph>exec</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>finally</paragraph>
                        </entry>
                        <entry>
                            <paragraph>for</paragraph>
                        </entry>
                        <entry>
                            <paragraph>from</paragraph>
                        </entry>
                        <entry>
                            <paragraph>global</paragraph>
                        </entry>
                        <entry>
                            <paragraph>if</paragraph>
                        </entry>
                        <entry>
                            <paragraph>import</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>in</paragraph>
                        </entry>
                        <entry>
                            <paragraph>is</paragraph>
                        </entry>
                        <entry>
                            <paragraph>lambda</paragraph>
                        </entry>
                        <entry>
                            <paragraph>nonlocal</paragraph>
                        </entry>
                        <entry>
                            <paragraph>not</paragraph>
                        </entry>
                        <entry>
                            <paragraph>or</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>pass</paragraph>
                        </entry>
                        <entry>
                            <paragraph>raise</paragraph>
                        </entry>
                        <entry>
                            <paragraph>return</paragraph>
                        </entry>
                        <entry>
                            <paragraph>try</paragraph>
                        </entry>
                        <entry>
                            <paragraph>while</paragraph>
                        </entry>
                        <entry>
                            <paragraph>with</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>yield</paragraph>
                        </entry>
                        <entry>
                            <paragraph>True</paragraph>
                        </entry>
                        <entry>
                            <paragraph>False</paragraph>
                        </entry>
                        <entry>
                            <paragraph>None</paragraph>
                        </entry>
                        <entry>
                        </entry>
                        <entry>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <paragraph>You might want to keep this list handy. If the interpreter complains about one
            of your variable names and you don’t know why, see if it is on this list.</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question2_8_1">
        <statement>

        <paragraph>True or False:  the following is a legal variable name in Python:   A_good_grade_is_A+</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>True</p>
                </statement>
                <feedback>
                    <p>-  The + character is not allowed in variable names.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>False</p>
                </statement>
                <feedback>
                    <p>-  The + character is not allowed in variable names (everything else in this name is fine).</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question2_8_2">
        <statement>

        <paragraph>Which variable name would be appropriate for storing what day of the week January 1st falls on?</paragraph>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>january_first_day</p>
                </statement>
                <feedback>
                    <p>-  Yes, this is a good name to store the day of the week for January 1st.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>1st_january</p>
                </statement>
                <feedback>
                    <p>-  No, you can't start a variable name with a numeric digit.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>january_1st day_of_week</p>
                </statement>
                <feedback>
                    <p>-  No, you can't have a space in a variable name.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>januaryFirst</p>
                </statement>
                <feedback>
                    <p>-  While this variable name is legal, it doesn't follow the convention of using underscores between words and avoiding use of uppercase letters.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
