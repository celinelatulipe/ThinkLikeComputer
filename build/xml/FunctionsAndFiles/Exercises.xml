<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsAndFiles/Exercises.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Exercises-source.html">Exercises</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <paragraph></paragraph>
    <section ids="exercises" names="exercises">
        <title>Exercises</title>
        <paragraph>Below are the datafiles that you have been using so far, and will continue to use for the rest of the chapter.</paragraph>
        <paragraph>The file below is <literal>travel_plans.txt</literal>.</paragraph>
        <raw format="html" xml:space="preserve">&lt;pre id="travel_plans.txt"&gt;
This summer I will be travelling.
I will go to...
Italy: Rome
Greece: Athens
England: London, Manchester
France: Paris, Nice, Lyon
Spain: Madrid, Barcelona, Granada
Austria: Vienna
I will probably not even want to come back!
However, I wonder how I will get by with all the different languages.
I only know English!
&lt;/pre&gt;</raw>
        <paragraph>The file below is <literal>school_prompt.txt</literal>.</paragraph>
        <raw format="html" xml:space="preserve">&lt;pre id="school_prompt.txt"&gt;
Writing essays for school can be difficult but
many students find that by researching their topic that they
have more to say and are better informed. Here are the university
we require many undergraduate students to take a first year writing requirement
so that they can
have a solid foundation for their writing skills. This comes
in handy for many students.
Different schools have different requirements, but everyone uses
writing at some point in their academic career, be it essays, research papers,
technical write ups, or scripts.
&lt;/pre&gt;</raw>
        <paragraph>The file below is <literal>emotion_words.txt</literal>.</paragraph>
        <raw format="html" xml:space="preserve">&lt;pre id="emotion_words.txt"&gt;
Sad upset blue down melancholy somber bitter troubled
Angry mad enraged irate irritable wrathful outraged infuriated
Happy cheerful content elated joyous delighted lively glad
Confused disoriented puzzled perplexed dazed befuddled
Excited eager thrilled delighted
Scared afraid fearful panicked terrified petrified startled
Nervous anxious jittery jumpy tense uneasy apprehensive
&lt;/pre&gt;</raw>
        <QuestionNode ids="files-ex-1" line="67" names="files_ex_1" runestone_options="{'number': 1, 'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'files_ex_1', 'qnumber': '', 'question_label': '5.14.1'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsAndFiles/Exercises.rst">
            <block_quote>
                <TabbedStuffNode divid="q1" line="70" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsAndFiles/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q1', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac5_14_1">
    <statement>
                        <paragraph>The following sample file called <literal>studentdata.txt</literal> contains one line for each student in an imaginary class.  The
                            students name is the first thing on each line, followed by some exam scores.
                            The number of scores might be different for each student.</paragraph>
                        <raw format="html" xml:space="preserve">&lt;pre id="studentdata.txt"&gt;
joe 10 15 20 30 40
bill 23 16 19 22
sue 8 22 17 14 32 17 24 21 2 9 11 17
grace 12 28 21 45 26 10
john 14 32 25 16 89
&lt;/pre&gt;</raw>
                        <paragraph>Using the text file <literal>studentdata.txt</literal> write a program that prints out the names of
                            students that have more than six quiz scores.</paragraph>

    </statement>
    <program label="ac5_14_1_editor" interactive='activecode' language="python">

        <input>

# Hint: first see if you can write a program that just prints out the number of scores on each line
# Then, make it print the number only if the number is at least six
# Then, switch it to printing the name instead of the number

        </input>
<tests>
from unittest.gui import TestCaseGui
import re
class myTests(TestCaseGui):
    def testOne(self):
        names = []
        with open('studentdata.txt', 'r') as fh:
            for line in fh:
                values = line.split()
                name = values[0]
                scores = values[1:]
                if len(scores) &gt; 6:
                    names.append(name)
        self.assertEqual(self.getOutput().rstrip(), '\n'.join(names), 'Checking names')
        for name in names:
            self.assertFalse(re.search(name, self.getEditorText()), 'Checking for hardcoding')
        if re.search(r'[^#]+= *open', self.getEditorText(), re.M):
            self.assertTrue(re.search(r'[^#]+\.close\(', self.getEditorText(), re.M), 'Checking for matching open and close statements')
        else:
            self.assertTrue(re.search(r'with[ (] *open', self.getEditorText(), re.M), 'Checking open statement')
myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                    <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

    <program label="ch_files_q1answer" interactive='activecode' language="python">
    
        <input>
f = open("studentdata.txt", "r")

for aline in f:
    items = aline.split()
    if len(items[1:]) &gt; 6:
        print(items[0])

f.close()
        </input>
<tests>


</tests>

    </program>
                    </TabNode>
                </TabbedStuffNode>
            </block_quote>
        </QuestionNode>
        <QuestionNode ids="files-ex-2" line="137" names="files_ex_2" runestone_options="{'number': 2, 'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'files_ex_2', 'qnumber': '', 'question_label': '5.14.4'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsAndFiles/Exercises.rst">
            <block_quote>
                <TabbedStuffNode divid="q2" line="140" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsAndFiles/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q2', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac5_14_2">
    <statement>
                        <paragraph>Create a list called <literal>destination</literal> using the data stored in <literal>travel_plans.txt</literal>. Each element of the list should contain a line from the file that lists a country and cities inside that country. Hint: each line that has this information also has a colon <literal>:</literal> in it.</paragraph>

    </statement>
    <program label="ac5_14_2_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFour(self):
      self.assertEqual(destination, ['Italy: Rome\n', 'Greece: Athens\n', 'England: London, Manchester\n', 'France: Paris, Nice, Lyon\n', 'Spain: Madrid, Barcelona, Granada\n', 'Austria: Vienna\n'], "Testing that destination is assigned to correct values.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </block_quote>
        </QuestionNode>
        <QuestionNode ids="files-ex-3" line="162" names="files_ex_3" runestone_options="{'number': 3, 'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'files_ex_3', 'qnumber': '', 'question_label': '5.14.6'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsAndFiles/Exercises.rst">
            <block_quote>
                <TabbedStuffNode divid="q3" line="165" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsAndFiles/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q3', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'FunctionsAndFiles', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac5_14_3">
    <statement>
                        <paragraph>Create a list called <literal>j_emotions</literal> that contains every word in <literal>emotion_words.txt</literal> that begins with the letter “j”.</paragraph>

    </statement>
    <program label="ac5_14_3_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(j_emotions, ['joyous', 'jittery', 'jumpy'], "Testing that j_emotions was created correctly.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </block_quote>
        </QuestionNode>
    </section>
</document>
