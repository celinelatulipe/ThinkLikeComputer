<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsAndFiles/WorkingwithDataFiles.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="WorkingwithDataFiles-source.html">WorkingwithDataFiles</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="working-with-data-files" names="working\ with\ data\ files">
        <title>Working with Data Files</title>

    <video xml:id="filesintrovideo" youtube="zASE-UA2YKg" width="560" />
            <paragraph>So far, the data we have used in this book have all been either coded right into the program, or have been
            entered by the user. In real life data reside in files. For example, the images we worked with in the image
            processing unit ultimately live in files on your hard drive. Web pages, and word processing documents, and
            music are other examples of data that live in files. In the rest of this chapter we will introduce the Python
            concepts necessary to use data from files in our programs.</paragraph>
        <paragraph>For our purposes, we will assume that our data files are text filesâ€“that is, files filled with characters.
            The Python programs that you write are stored as text files.  We can create these files in any of a number of
            ways. For example, we could use a text editor to type in and save the data.  We could also download the data
            from a website and then save it in a file. Regardless of how the file is created, Python will allow us to
            manipulate the contents.</paragraph>
        <paragraph>In Python, we must <strong>open</strong> files before we can use them and <strong>close</strong> them when we are done with them. As
            you might expect, once a file is opened it becomes a Python object just like all other data.
            <reference internal="True" refid="filemethods1a"><inline classes="std std-ref">Table 1</inline></reference> shows the functions and methods that can be used to open and close files.</paragraph>
        <target refid="filemethods1a"></target>
        <table ids="filemethods1a" names="filemethods1a">
            <tgroup cols="3">
                <colspec colwidth="16"></colspec>
                <colspec colwidth="24"></colspec>
                <colspec colwidth="106"></colspec>
                <thead>
                    <row>
                        <entry>
                            <paragraph><strong>Method Name</strong></paragraph>
                        </entry>
                        <entry>
                            <paragraph><strong>Use</strong></paragraph>
                        </entry>
                        <entry>
                            <paragraph><strong>Explanation</strong></paragraph>
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <paragraph><literal>open</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph><literal>open(filename,'r')</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Open a file called filename and use it for reading.  This will return a reference to a file object.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>open</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph><literal>open(filename,'w')</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>Open a file called filename and use it for writing.  This will also return a reference to a file object.</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph><literal>close</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph><literal>filevariable.close()</literal></paragraph>
                        </entry>
                        <entry>
                            <paragraph>File use is complete.</paragraph>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <comment xml:space="preserve">Learning Goals
--------------

* To understand the structure of file systems
* To understand opening files with different modes
* To introduce files as another kind of sequence that one can iterate over
* To introduce the read/transform/write pattern
* To introduce parallel assignment to two or three variables</comment>
        <comment xml:space="preserve">Objectives
----------

* Demonstrate that you can read a single value from each line in a file
* Convert the line to the appropriate value
* Read a line and convert it into multiple values using split and assignment to multiple variables</comment>
    </section>
</document>
