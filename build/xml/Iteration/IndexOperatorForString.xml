<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Iteration/IndexOperatorForString.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="IndexOperatorForString-source.html">IndexOperatorForString</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ '[\ ];\ string\ indexing',\ 'index-0',\ '',\ None] ['single',\ 'index;\ string',\ 'index-0',\ '',\ None] ['single',\ 'string;\ index',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="index-operator-working-with-the-characters-of-a-string index-0" names="index\ operator:\ working\ with\ the\ characters\ of\ a\ string">
        <title>Index Operator: Working with the Characters of a String</title>
        <paragraph>The <strong>indexing operator</strong> (Python uses square brackets to enclose the index)
            selects a single character from a string.  The characters are accessed by their position or
            index value.  For example, in the string shown below, the 14 characters are indexed left to right
            from postion 0 to position 13.</paragraph>
        <image alt="index values" candidates="{'*': 'Iteration/Figures/indexvalues.png'}" uri="Iteration/Figures/indexvalues.png"></image>
        <paragraph>It is also the case that the positions are named from right to left using negative numbers where -1 is
            the rightmost index and so on. Note that the character at index 6 (or -8) is the blank character.</paragraph>

    <program label="ac4_5_1" interactive='activecode' language="python">
    
        <input>
school = "Luther College"
m = school[2]
print(m)

lastchar = school[-1]
print(lastchar)
        </input>
<tests>


</tests>

    </program>
        <paragraph>The expression <literal>school[2]</literal> selects the character at index 2 from <literal>school</literal>, and creates a new
            string containing just this one character. The variable <literal>m</literal> refers to the result.</paragraph>
        <paragraph>The letter at index zero of <literal>"Luther College"</literal> is <literal>L</literal>.  So at
            position <literal>[2]</literal> we have the letter <literal>t</literal>.</paragraph>
        <paragraph>If you want the zero-eth letter of a string, you just put 0, or any expression
            with the value 0, in the brackets.  Give it a try.</paragraph>
        <paragraph>The expression in brackets is called an <strong>index</strong>. An index specifies a member
            of an ordered collection.  In this case the collection of characters in the string. The index
            <emphasis>indicates</emphasis> which character you want. It can be any integer
            expression so long as it evaluates to a valid index value.</paragraph>
        <paragraph>Note that indexing returns a <emphasis>string</emphasis> — Python has no special type for a single character.
            It is just a string of length 1.</paragraph>
        <section ids="index-operator-accessing-elements-of-a-list" names="index\ operator:\ accessing\ elements\ of\ a\ list">
            <title>Index Operator: Accessing Elements of a List</title>
            <paragraph>The syntax for accessing the elements of a list is the same as the syntax for
                accessing the characters of a string.  We use the index operator  <literal>[]</literal>
                . The expression inside the brackets specifies
                the index. Remember that the indices start at 0. Any integer expression can be used
                as an index and as with strings, negative index values will locate items from the right instead
                of from the left.</paragraph>
            <paragraph>When we say the first, third or nth character of a sequence, we generally mean counting the usual way, starting with 1.  The nth character and the character AT INDEX n are different then:  The nth character is at index n-1.  The fourth character in a string is at index 3. The seventh element in a list is at index 6. Make sure you are clear on what you mean!</paragraph>
            <paragraph>Try to predict what will be printed out by the following code, and then run it to check your
                prediction. (Actually, it’s a good idea to always do that with the code examples. You
                will learn much more if you force yourself to make a prediction before you see the output.)</paragraph>

    <program label="ac4_5_2" interactive='activecode' language="python">
    
        <input>
numbers = [17, 123, 87, 34, 66, 8398, 44]
print(numbers[2])
print(numbers[9-8])
print(numbers[-2])
        </input>
<tests>


</tests>

    </program>

    <program label="ac4_5_3" interactive='activecode' language="python">
    
        <input>
prices = [1.99, 2.00, 5.50, 20.95, 100.98]
print(prices[0])
print(prices[-1])
print(prices[3-5])
        </input>
<tests>


</tests>

    </program>
            <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question4_5_1">
        <statement>

            <paragraph>What is printed by the following statements?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">s = "python rocks"
print(s[3])</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>t</p>
                </statement>
                <feedback>
                    <p>Index locations do not start with 1, they start with 0.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>h</p>
                </statement>
                <feedback>
                    <p>Yes, index locations start with 0.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>c</p>
                </statement>
                <feedback>
                    <p>s[-3] would return c, counting from right to left.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Error, you cannot use the [ ] operator with a string.</p>
                </statement>
                <feedback>
                    <p>[ ] is the index operator.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question4_5_2">
        <statement>

            <paragraph>What is printed by the following statements?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">s = "python rocks"
print(s[2] + s[-4])</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>tr</p>
                </statement>
                <feedback>
                    <p>Almost, t is at postion 2, counting left to right starting from 0; but r is at -5, counting right to left starting from -1.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>to</p>
                </statement>
                <feedback>
                    <p>For -4 you count from right to left, starting with -1.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>ps</p>
                </statement>
                <feedback>
                    <p>p is at location 0, not 2.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>nn</p>
                </statement>
                <feedback>
                    <p>n is at location 5, not 2.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Error, you cannot use the [ ] operator with the + operator.</p>
                </statement>
                <feedback>
                    <p>[ ] operator returns a string that can be concatenated with another string.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question4_5_3">
        <statement>

            <paragraph>What is printed by the following statements?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
print(alist[5])</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>[ ]</p>
                </statement>
                <feedback>
                    <p>The empty list is at index 4.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>3.14</p>
                </statement>
                <feedback>
                    <p>Yes, 3.14 is at index 5 since we start counting at 0 and sublists count as one item.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>False</p>
                </statement>
                <feedback>
                    <p>False is at index 6.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>"dog"</p>
                </statement>
                <feedback>
                    <p>Look again, the element at index 3 is a list. This list only counts as one element.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="ac4_5_4">
    <statement>
            <paragraph>Assign the value of the 34th element of <literal>lst</literal> to the variable <literal>output</literal>.</paragraph>

    </statement>
    <program label="ac4_5_4_editor" interactive='activecode' language="python">

        <input>
lst = ["hi", "morning", "dog", "506", "caterpillar", "balloons", 106, "yo-yo", "python", "moon", "water", "sleepy", "daffy", 45, "donald", "whiteboard", "glasses", "markers", "couches", "butterfly", "100", "magazine", "door", "picture", "window", ["Olympics", "handle"], "chair", "pages", "readings", "burger", "juggle", "craft", ["store", "poster", "board"], "laptop", "computer", "plates", "hotdog", "salad", "backpack", "zipper", "ring", "watch", "finger", "bags", "boxes", "pods", "peas", "apples", "horse", "guinea pig", "bowl", "EECS"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(output, "laptop", "Testing that output value is assigned to correct value.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac4_5_5">
    <statement>
            <paragraph>Assign the value of the 23rd element of <literal>l</literal> to the variable <literal>checking</literal>.</paragraph>

    </statement>
    <program label="ac4_5_5_editor" interactive='activecode' language="python">

        <input>
l = ["hi", "goodbye", "python", "106", "506", 91, ['all', 'Paul', 'Jackie', "UMSI", 1, "Stephen", 4.5], 109, "chair", "pizza", "wolverine", 2017, 3.92, 1817, "account", "readings", "papers", 12, "facebook", "twitter", 193.2, "snapchat", "leaders and the best", "social", "1986", 9, 29, "holiday", ["women", "olympics", "gold", "rio", 21, "2016", "men"], "26trombones"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(checking, "leaders and the best", "Testing that checking has the correct element assigned.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac4_5_6">
    <statement>
            <paragraph>Assign the value of the last chacter of <literal>lst</literal> to the variable <literal>output</literal>. Do this so that the length of lst doesn’t matter.</paragraph>

    </statement>
    <program label="ac4_5_6_editor" interactive='activecode' language="python">

        <input>
lst = "Every chess or checkers game begins from the same position and has a finite number of moves that can be played. While the number of possible scenarios and moves is quite large, it is still possible for computers to calculate that number and even be programmed to respond well against a human player..."

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testThree(self):
      self.assertEqual(output, ".", "Testing that output value is assigned to correct value.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
            <note>
                <paragraph>Why does counting start at 0 going from left to right, but at -1 going from right to left? Well, indexing starting at 0
                    has a long history in computer science having to do with some low-level implementation details that we won’t
                    go into. For indexing from right to left, it might seem natural to do the analgous thing
                    and start at -0. Unfortunately, -0 is the same as 0, so s[-0] can’t be the last item. Remember we
                    said that programming languages are formal languages where details matter and
                    everything is taken literally?</paragraph>
            </note>
        </section>
    </section>
</document>
