<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Iteration/Glossary.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Glossary-source.html">Glossary</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="glossary" names="glossary">
        <title>Glossary</title>
        <glossary sorted="False">
            <definition_list classes="glossary">
                <definition_list_item>
                    <term ids="term-accumulator-pattern">accumulator pattern<index entries="['single',\ 'accumulator\ pattern',\ 'term-accumulator-pattern',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A pattern where the program initializes an accumulator variable and then changes it
                            during each iteration, accumulating a final result.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-Control-Flow">Control Flow<index entries="['single',\ 'Control\ Flow',\ 'term-Control-Flow',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>Also known as the <strong>flow of execution</strong>, the order in which a program executes. By default, the control flow is <strong>*sequential*</strong>.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-for-loop-traversal-for">for loop traversal (<literal>for</literal>)<index entries="['single',\ 'for\ loop\ traversal\ (for)',\ 'term-for-loop-traversal-for',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph><emphasis>Traversing</emphasis> a string or a list means accessing each character in the string or item in the list, one at a time.  For example, the following for loop:</paragraph>
                        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">for ix in 'Example':
    ...</literal_block>
                        <paragraph>executes the body of the loop 7 times with different values of <literal>ix</literal> each time.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-index">index<index entries="['single',\ 'index',\ 'term-index',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A variable or value used to select a member of an ordered collection, such as
                            a character from a string, or an element from a list.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-loop-body">loop body<index entries="['single',\ 'loop\ body',\ 'term-loop-body',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>The loop body contains the statements of the program that will be iterate through upon each loop. The loop body is always indented.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-pattern">pattern<index entries="['single',\ 'pattern',\ 'term-pattern',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A sequence of statements, or a style of coding something that has
                            general applicability in a number of different situations.  Part of
                            becoming a mature programmer is to learn and establish the
                            patterns and algorithms that form your toolkit.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-range">range<index entries="['single',\ 'range',\ 'term-range',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A function that produces a list of numbers. For example, <literal>range(5)</literal>, produces a list of five
                            numbers, starting with 0, <literal>[0, 1, 2, 3, 4]</literal>.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-sequential-flow">sequential flow<index entries="['single',\ 'sequential\ flow',\ 'term-sequential-flow',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>The execution of a program from top to bottom, one statement at a time</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-terminating-condition">terminating condition<index entries="['single',\ 'terminating\ condition',\ 'term-terminating-condition',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A condition which stops an interation from continuing</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-traverse">traverse<index entries="['single',\ 'traverse',\ 'term-traverse',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>To iterate through the elements of a collection, performing a similar
                            operation on each.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
        </glossary>
    </section>
</document>
