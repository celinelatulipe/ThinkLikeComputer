<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Iteration/week2a2.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="week2a2-source.html">week2a2</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="chapter-assessment" names="chapter\ assessment">
        <title>Chapter Assessment</title>
        <paragraph><strong>Check your understanding</strong></paragraph>

<exercise label="assess_ch4_1">
    <statement>
        <paragraph>Write one for loop to print out each character of the string <literal>my_str</literal> on a separate line.</paragraph>

    </statement>
    <program label="assess_ch4_1_editor" interactive='activecode' language="python">

        <input>
my_str = "MANITOBA"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def test_output(self):
    self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
    self.assertIn("M\nA\nN\nI\nT\nO\nB\nA", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ch4_2">
    <statement>
        <paragraph>Write one for loop to print out each element of the list <literal>several_things</literal>. Then, write <emphasis>another</emphasis> for loop to print out the TYPE of each element of the list <literal>several_things</literal>. To complete this problem you should have written two different for loops, each of which iterates over the list <literal>several_things</literal>, but each of those 2 for loops should have a different result.</paragraph>

    </statement>
    <program label="assess_ch4_2_editor" interactive='activecode' language="python">

        <input>
several_things = ["hello", 2, 4, 6.0, 7.5, 234352354, "the end", "", 99]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def test_output(self):
      self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
      str1 = "hello\n2\n4\n6.0\n7.5\n234352354\nthe end\n\n99\n&lt;class 'str'&gt;\n&lt;class 'int'&gt;\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'float'&gt;\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n&lt;class 'str'&gt;\n&lt;class 'int'&gt;"
      str2 = "hello\n2\n4\n6.0\n7.5\n234352354\nthe end\n\n99\n&lt;type 'str'&gt;\n&lt;type 'int'&gt;\n&lt;type 'int'&gt;\n&lt;type 'float'&gt;\n&lt;type 'float'&gt;\n&lt;type 'int'&gt;\n&lt;type 'str'&gt;\n&lt;type 'str'&gt;\n&lt;type 'int'&gt;"
      self.assertTrue(str1 in self.getOutput() or str2 in self.getOutput(), "Testing output (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ch4_3">
    <statement>
        <paragraph>Write code that uses iteration to print out <strong>the length</strong> of each element of the list stored in <literal>str_list</literal>.</paragraph>

    </statement>
    <program label="assess_ch4_3_editor" interactive='activecode' language="python">

        <input>
str_list = ["hello", "", "goodbye", "wonderful", "I love Python"]

# Write your code here.
=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def test_output(self):
        self.assertIn("for", self.getEditorText(), "Testing whether you used a for loop (Don't worry about actual and expected values).")
        self.assertIn("5\n0\n7\n9\n13", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ch4_4">
    <statement>
        <paragraph>Write a program that uses the turtle module <strong>and</strong> a for loop to draw something. It doesnâ€™t have to be complicated, but draw something different than we have done in the past. (Hint: if you are drawing something complicated, it could get tedious to watch it draw over and over. Try setting <literal>.speed(10)</literal> for the turtle to draw fast, or <literal>.speed(0)</literal> for it to draw super fast with no animation.)</paragraph>

    </statement>
    <program label="assess_ch4_4_editor" interactive='activecode' language="python">

        <input>
import turtle
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ch4_5">
    <statement>
        <paragraph>Write code to count the number of characters in <literal>original_str</literal> using the accumulation pattern and assign the answer to a variable <literal>num_chars</literal>. Do NOT use the <literal>len</literal> function to solve the problem (if you use it while you are working on this problem, comment it out afterward!)</paragraph>

    </statement>
    <program label="assess_ch4_5_editor" interactive='activecode' language="python">

        <input>
original_str = "The quick brown rhino jumped over the extremely lazy fox."


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
       self.assertEqual(num_chars, len(original_str), "Testing whether num_chars_sent has the correct value")
       self.assertNotIn('len', self.getEditorText(), "Testing that you are not including the len function in your code. (Don't worry about Actual and Expected Values.)")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
        <comment xml:space="preserve">the following two activities use .split, so they can be moved to chapter 10</comment>
        <comment xml:space="preserve">.. activecode:: assess_ps_02_07
:language: python
:autograde: unittest
:practice: T
:topics: Iteration/TraversalandtheforLoopByIndex

``addition_str`` is a string with a list of numbers separated by the ``+`` sign. Write code that uses the accumulation pattern to take the sum of all of the numbers and assigns it to ``sum_val`` (an integer). (You should use the ``.split("+")`` function to split by ``"+"`` and ``int()`` to cast to an integer).

~~~~
addition_str = "2+5+10+20"


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
       self.assertEqual(sum_val, 37, "Testing whether sum_val has the correct value")
       self.assertIn('split', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
       self.assertIn('int', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()</comment>
        <comment xml:space="preserve">.. activecode:: assess_ch4_6
:language: python
:autograde: unittest
:practice: T
:topics: Iteration/TraversalandtheforLoopByIndex

``week_temps_f`` is a string with a list of fahrenheit temperatures separated by the ``,`` sign. Write code that uses the accumulation pattern to compute the **average** (sum divided by number of items) and assigns it to ``avg_temp``. Do not hard code your answer (i.e., make your code compute both the sum or the number of items in ``week_temps_f``) (You should use the ``.split(",")`` function to split by ``","`` and ``float()`` to cast to a float).

~~~~
week_temps_f = "75.1,77.7,83.2,82.5,81.0,79.5,85.7"


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(avg_temp, 80.67142857142858, 7, "Testing that avg_temp has the correct value")
        self.assertIn('split', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
        self.assertIn('float', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()</comment>

<exercise label="assess_ch4_7">
    <statement>
        <paragraph>Write code to create a list of numbers from 0 to 67 and assign that list to the variable <literal>nums</literal>. Do not hard code the list.</paragraph>

    </statement>
    <program label="assess_ch4_7_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(nums, list(range(68)), "Testing that nums is a list that contains the correct elements.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="assess_ch4_8_lh">
        <statement>

        <block_quote>
            <image align="center" alt="image of numerous variables being declared and assigned values" candidates="{'*': 'Iteration/Figures/cdq4-1.png'}" uri="Iteration/Figures/cdq4-1.png" width="900"></image>
            <paragraph>Given the following output, frame, and arrow indicators, what happens in the next step?</paragraph>
        </block_quote>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>0 is printed</p>
                </statement>
                <feedback>
                    <p>Not quite, as shown, 0 has already printed</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>1 is printed</p>
                </statement>
                <feedback>
                    <p>Not quite, The next line to execute is at the top of the for loop, not the print</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>The variable i checks for the end of the loop</p>
                </statement>
                <feedback>
                    <p>Correct! The code needs to check the list and see if there is anything left to do (line 1). Once it realizes it still has numbers to process, the loop continues.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>An error is thrown</p>
                </statement>
                <feedback>
                    <p>Not quite, this code runs properly, try it yourself.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="assess_ch4_9_lh">
        <statement>

        <paragraph>:</paragraph>
        <image align="center" alt="image of numerous variables being declared and assigned values" candidates="{'*': 'Iteration/Figures/cdq4-2.png'}" uri="Iteration/Figures/cdq4-2.png" width="900"></image>
        <paragraph>The red arrow is still pointing to line 6 but we can see in the global frame that j is â€˜oâ€™. Why is the next line to execute line 6?</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>Because 'o' gets printed twice</p>
                </statement>
                <feedback>
                    <p>Not quite, there is no reason for 'o' to print again</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Because the loop starts again</p>
                </statement>
                <feedback>
                    <p>Not quite, once a loop finishes running in its entirety, it can't hop back up to run again</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>Because the code is checking for another iteration</p>
                </statement>
                <feedback>
                    <p>Correct! The code needs to check in the list and see if there is anything left to do (line 6). Once it realizes there isn't, the code block completes</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Because there is an error in the code</p>
                </statement>
                <feedback>
                    <p>Not quite, this code runs properly, try it yourself.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

        <exercise label="assess_ch4_10_lh">
            <statement>
    <paragraph>: <var />  </paragraph></statement><setup><var><image align="center" alt="image of numerous variables being declared and assigned values" candidates="{'*': 'Iteration/Figures/cdq4-3.png'}" uri="Iteration/Figures/cdq4-3.png" width="900"/><paragraph>The next line to execute is shown with the red arrow (line 4). What line of code will execute next?
<BlankNode/></paragraph></var></setup></exercise>    </section>
</document>
