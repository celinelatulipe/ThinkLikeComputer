<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Iteration/WPNamingVariablesinForLoops.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="WPNamingVariablesinForLoops-source.html">WPNamingVariablesinForLoops</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C) Paul Resnick.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="naming-variables-in-for-loops" names="👩‍💻\ naming\ variables\ in\ for\ loops">
        <title>👩‍💻 Naming Variables in For Loops</title>
        <paragraph>We’ve mentioned before about carefully choosing your variable names. Though the
            names you choose aren’t meaningful to the program, they can be to you. When we
            choose names for variables in for loops, the more understandable they are to us,
            the easier it will be to use them. Here are some tips to make your for loops more
            readable for yourself and anyone else who may read your programs:</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>Use singular nouns for the iterator variable, which is also called the loop variable (things like “song”, “book”, “post”, “letter”, “word”).</paragraph>
            </list_item>
            <list_item>
                <paragraph>Use plural nouns for the sequence variable (i.e., name you list something like “songs”, “books”, “posts”, “letters”, “words”).</paragraph>
            </list_item>
        </enumerated_list>
        <paragraph>While these two tips won’t always apply, they are general best practices when it
            comes to choosing variable names. Below we have an example!</paragraph>

    <program label="ac4_8_1" interactive='activecode' language="python">
    
        <input>
# x is a list defined elsewhere

for y in x:
    print(y)
        </input>
<tests>


</tests>

    </program>
        <paragraph>Since we can’t see the contents of x right now - this might be the case if we have
            a long program - then these names would make the program hard to understand. Let’s
            compare this to a program that does the same thing, but uses better names.</paragraph>

    <program label="ac4_8_2" interactive='activecode' language="python">
    
        <input>
# genres is a list defined elsewhere

for genre in genres:
    print(genre)
        </input>
<tests>


</tests>

    </program>
        <paragraph>Here what we expect is much more clear, even if we didn’t see how genres was initialized!</paragraph>
        <paragraph>The code below was used to initialize x and genres so you’re free to look at it but you
            don’t need to run it!</paragraph>

    <program label="a46_8_3" interactive='activecode' language="python">
    
        <input>
x = ["jazz", "pop", "rock", "country", "punk", "folk", "hip-hop", "rap", "alternative"]
genres = ["jazz", "pop", "rock", "country", "punk", "folk", "hip-hop", "rap", "alternative"]
        </input>
<tests>


</tests>

    </program>
    </section>
</document>
