<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Iteration/FlowofExecutionoftheforLoop.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="FlowofExecutionoftheforLoop-source.html">FlowofExecutionoftheforLoop</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'control\ flow',\ 'index-0',\ '',\ None] ['single',\ 'flow\ of\ execution',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="flow-of-execution-of-the-for-loop index-0" names="flow\ of\ execution\ of\ the\ for\ loop">
        <title>Flow of Execution of the for Loop</title>
        <paragraph>As a program executes, the interpreter always keeps track of which statement is
            about to be executed.  We call this the <strong>control flow</strong>, or the <strong>flow of
                execution</strong> of the program.  When humans execute programs, they often use their
            finger to point to each statement in turn.  So you could think of control flow
            as “Python’s moving finger”.</paragraph>
        <paragraph>Control flow until now has been strictly top to bottom, one statement at a
            time.  We call this type of control <strong>sequential</strong>.
            Sequential flow of control is always assumed to be the default behavior for a computer program.
            The <literal>for</literal> statement changes this.</paragraph>
        <paragraph>Flow of control is often easy to visualize and understand if we draw a flowchart.
            This flowchart shows the exact steps and logic of how the <literal>for</literal> statement executes.</paragraph>
        <image align="center" candidates="{'*': 'Iteration/Figures/new_flowchart_for.png'}" uri="Iteration/Figures/new_flowchart_for.png" width="300px"></image>
        <note>
            <paragraph>Not sure what a flowchart is? Check out this funny take on it, in <reference name="XKCD" refuri="http://xkcd.com/518/">XKCD</reference><target ids="xkcd" names="xkcd" refuri="http://xkcd.com/518/"></target>. <reference name="And this one" refuri="http://xkcd.com/1195/">And this one</reference><target ids="and-this-one" names="and\ this\ one" refuri="http://xkcd.com/1195/"></target>.</paragraph>
        </note>
        <paragraph>A codelens demonstration is a good way to help you visualize exactly how the flow of control
            works with the for loop.  Try stepping forward and backward through the program by pressing
            the buttons.  You can see the value of <literal>name</literal> change as the loop iterates through the list of
            friends.</paragraph>

<program label="vtest" interactive="codelens" language="python">
    <input>
for name in ["Joe", "Amy", "Brad", "Angelina", "Zuki", "Thandi", "Paris"]:
    print("Hi ", name, "  Please come to my party on Saturday!")
    </input>
</program>
        <paragraph>While loops may not seem to be necessary when you’re iterating over a few items, it is extremely helpful when
            iterating over lots of items. Imagine if you needed to change what happened in the code block. On the top, when you use
            iteration, this is easy. On the bottom, when you have hard coded the process, this is more difficult.</paragraph>
        <image align="center" alt="Demonstration of using iteration over hard coding the iteration." candidates="{'*': 'Iteration/Figures/5.4diagram.PNG'}" scale="90" uri="Iteration/Figures/5.4diagram.PNG"></image>
    </section>
</document>
