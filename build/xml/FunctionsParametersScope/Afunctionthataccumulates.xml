<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsParametersScope/Afunctionthataccumulates.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Afunctionthataccumulates-source.html">Afunctionthataccumulates</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="a-function-that-accumulates" names="a\ function\ that\ accumulates">
        <title>A function that accumulates</title>
        <paragraph>We have used the <literal>len</literal> function a lot already. If it weren’t part of Python, our lives as programmers would have been
            a lot harder.</paragraph>
        <paragraph>Well, actually, not that much harder. Now that we know how to define functions, we could define <literal>len</literal> ourselves if it
            did not exist. Previously, we have used the accumlator pattern to count the number of lines in a file. Let’s use that
            same idea and just wrap it in a function definition. We’ll call it <literal>mylen</literal> to distinguish it from the real <literal>len</literal>
            which already exists. We actually <emphasis>could</emphasis> call it len, but that wouldn’t be a very good idea, because it would replace
            the original len function, and our implementation may not be a very good one.</paragraph>

    <program label="ac8_6_1" interactive='activecode' language="python">
    
        <input>
def mylen(seq):
    c = 0 # initialize count variable to 0
    for _ in seq:
        c = c + 1   # increment the counter for each item in seq
    return c

print(mylen("hello"))
print(mylen([1, 2, 7]))
        </input>
<tests>


</tests>

    </program>
<exercise label='pp8_6_1'   indentation='hide' language='python'><statement>
        <paragraph>Rearrange the code statements to match the activecode window above. (This is an exercise in noticing where the indenting and outdenting happens, and where the return statement goes.)</paragraph>
</statement>
<blocks><block order='5' >
<cline>def mylen(x):</cline>
</block><block order='6' >
<cline>    c = 0 # initialize count variable to 0</cline>
</block><block order='3' >
<cline>    for y in x:</cline>
</block><block order='2' >
<cline>        c = c + 1   # increment the counter for each item in x</cline>
</block><block order='1' >
<cline>    return c</cline>
</block><block order='4' >
<cline>print(mylen("hello"))</cline>
<cline>print(mylen([1, 2, 7]))</cline>
</block></blocks></exercise>        <paragraph><strong>Check your Understanding</strong></paragraph>

<exercise label="ac8_6_2">
    <statement>
        <paragraph><strong>1.</strong> Write a function named <literal>total</literal> that takes a list of integers as input, and returns the total value of all those integers added together.</paragraph>

    </statement>
    <program label="ac8_6_2_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(total([1, 2, 3, 4, 5]), 15, "Testing the total function on input [1, 2, 3, 4, 5].")
      self.assertEqual(total([0, 0, 0, 0]), 0, "Testing the total function on input [0, 0, 0, 0].")
      self.assertEqual(total([]), 0, "Testing the total function on input [].")
      self.assertEqual(total([2]), 2, "Testing the total function on input [2].")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac8_6_3">
    <statement>
        <paragraph><strong>2.</strong> Write a function called <literal>count</literal> that takes a list of numbers as input and returns a count of the number of elements in the list.</paragraph>

    </statement>
    <program label="ac8_6_3_editor" interactive='activecode' language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(count([]), 0, "Testing the function count with input []")
      self.assertEqual(count([1, 5, 9, -2, 9, 23]), 6, "Testing the function count with input [1, 5, 9, -2, 9, 23]")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>
</document>
