<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsParametersScope/Glossary.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Glossary-source.html">Glossary</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="glossary" names="glossary">
        <title>Glossary</title>
        <glossary sorted="False">
            <definition_list classes="glossary">
                <definition_list_item>
                    <term ids="term-argument">argument<index entries="['single',\ 'argument',\ 'term-argument',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A value provided to a function when the function is called. This value
                            is assigned to the corresponding parameter in the function. The argument
                            can be the result of an expression which may involve operators,
                            operands and calls to other fruitful functions.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-body">body<index entries="['single',\ 'body',\ 'term-body',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>The second part of a compound statement. The body consists of a
                            sequence of statements all indented the same amount from the beginning
                            of the header. The standard amount of indentation used within the
                            Python community is 4 spaces.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-calling-stack">calling stack<index entries="['single',\ 'calling\ stack',\ 'term-calling-stack',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A sequence (stack) of frames, showing all the function calls that are in process
                            but not yet complete. When one function’s code invokes another function call,
                            there will be more than one frame on the stack.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-compound-statement">compound statement<index entries="['single',\ 'compound\ statement',\ 'term-compound-statement',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A statement that consists of two parts:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>header - which begins with a keyword determining the statement
                                    type, and ends with a colon.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>body - containing one or more statements indented the same amount
                                    from the header.</paragraph>
                            </list_item>
                        </enumerated_list>
                        <paragraph>The syntax of a compound statement looks like this:</paragraph>
                        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">keyword expression:
    statement
    statement
    ...</literal_block>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-docstring">docstring<index entries="['single',\ 'docstring',\ 'term-docstring',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>If the first thing in a function body is a string (or, we’ll see later, in other situations
                            too) that is attached to the function as its <literal>__doc__</literal> attribute.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-flow-of-execution">flow of execution<index entries="['single',\ 'flow\ of\ execution',\ 'term-flow-of-execution',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>The order in which statements are executed during a program run.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-function">function<index entries="['single',\ 'function',\ 'term-function',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A named sequence of statements that performs some useful operation.
                            Functions may or may not take parameters and may or may not produce a
                            result.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-function-call">function call<index entries="['single',\ 'function\ call',\ 'term-function-call',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A statement that executes a function. It consists of the name of the
                            function followed by a list of arguments enclosed in parentheses.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-function-composition">function composition<index entries="['single',\ 'function\ composition',\ 'term-function-composition',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>Using the output from one function call as the input to another.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-function-definition">function definition<index entries="['single',\ 'function\ definition',\ 'term-function-definition',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A statement that creates a new function, specifying its name,
                            parameters, and the statements it executes.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-fruitful-function">fruitful function<index entries="['single',\ 'fruitful\ function',\ 'term-fruitful-function',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A function that returns a value when it is called.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-global-variable">global variable<index entries="['single',\ 'global\ variable',\ 'term-global-variable',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A variable defined at the top level, not inside any function.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-header-line">header line<index entries="['single',\ 'header\ line',\ 'term-header-line',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>The first part of a compound statement. A header line begins with a keyword and
                            ends with a colon (:)</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-lifetime">lifetime<index entries="['single',\ 'lifetime',\ 'term-lifetime',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>Variables and objects have lifetimes — they are created at some point during
                            program execution, and will be destroyed at some time. In python, objects
                            live as long as there is some variable pointing to it, or it is part of some
                            other compound object, like a list or a dictionary. In python, local variables
                            live only until the function finishes execution.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-local-variable">local variable<index entries="['single',\ 'local\ variable',\ 'term-local-variable',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A variable defined inside a function. A local variable can only be used
                            inside its function. Parameters of a function are also a special kind
                            of local variable.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-method">method<index entries="['single',\ 'method',\ 'term-method',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A special kind of function that is invoked on objects of particular types of
                            objects, using the syntax <literal>&lt;expr&gt;.&lt;methodname&gt;(&lt;additional parameter values&gt;)</literal></paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-None">None<index entries="['single',\ 'None',\ 'term-None',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A special Python value. One use in Python is that it is returned
                            by functions that do not execute a return statement with a return argument.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-parameter">parameter<index entries="['single',\ 'parameter',\ 'term-parameter',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A name used inside a function to refer to the value which was passed
                            to it as an argument.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-return-value">return value<index entries="['single',\ 'return\ value',\ 'term-return-value',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>The value provided as the result of a function call.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-side-effect">side effect<index entries="['single',\ 'side\ effect',\ 'term-side-effect',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>Some lasting effect of a function call, other than its return value. Side effects include print statements, changes to mutable objects, and changes to the values of global variables.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-stack-frame">stack frame<index entries="['single',\ 'stack\ frame',\ 'term-stack-frame',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>A frame that keeps track of the values of local variables during a function execution,
                            and where to return control when the function execution completes.</paragraph>
                    </definition>
                </definition_list_item>
                <definition_list_item>
                    <term ids="term-type-annotation">type annotation<index entries="['single',\ 'type\ annotation',\ 'term-type-annotation',\ 'main',\ None]"></index></term>
                    <definition>
                        <paragraph>An optional notation that specifies the type of a function parameter or function result.</paragraph>
                    </definition>
                </definition_list_item>
            </definition_list>
        </glossary>
    </section>
</document>
