<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/FunctionsParametersScope/Printvsreturn.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Printvsreturn-source.html">Printvsreturn</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="print-vs-return" names="üë©‚Äçüíª\ print\ vs.\ return">
        <title>üë©‚Äçüíª Print vs. return</title>
        <paragraph>Many beginning programmers find the distinction between print and return very confusing, especially since most of the
            illustrations of return values in intro texts like this one show the returned value from a function call by printing
            it, as in <literal>print(square(g(2)))</literal>.</paragraph>
        <paragraph>The print statement is fairly easy to understand. It takes a python object and outputs a printed representation of it
            in the output console. In this Runestone book, that shows up in the little window beneath the activecode area. You can think of the print statement as something that takes an object from the land of the
            program and makes it visible to the land of the programmer.</paragraph>
        <note>
            <paragraph><strong>Print is for programmers</strong>. Remember that slogan. Printing has no effect on the ongoing execution of a program. It doesn‚Äôt assign a value to a variable. It doesn‚Äôt return a value from a function call.</paragraph>
        </note>
        <paragraph>If you‚Äôre confused, chances are the source of your confusion is really about returned values and the evaluation of
            complex expressions. A function that returns a value is producing a value for use <emphasis>by the program</emphasis>, in particular for
            use in the part of the code where the function was invoked. Remember that when a function is invoked, the function‚Äôs
            code block is executed ‚Äì all that code indented under the <literal>def</literal> statement gets executed, following the rules of the
            Python formal language for what should and should not execute as it goes. But when the function returns, control goes
            back to the calling location, and a return value may come back with it.</paragraph>
        <paragraph>You‚Äôve already seen some function calls in Chapter 1. When we told you about the function <literal>square</literal> that we defined,
            you saw that the expression <literal>square(2)</literal> evaluated to the integer value <literal>4</literal>.</paragraph>
        <paragraph>That‚Äôs because the <literal>square</literal> function <emphasis>returns</emphasis> a value: the square of whatever input is passed into it.</paragraph>
        <paragraph>If a returned value is for use <emphasis>by the program</emphasis>, why did you make that function invocation to return a value? What do
            you use the result of the function call for? There are three possibilities.</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <definition_list>
                    <definition_list_item>
                        <term>Save it for later.</term>
                        <definition>
                            <paragraph>The returned value may be:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>Assigned to a variable. For example, <literal>w = square(3)</literal></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Put in a list. For example, <literal>L.append(square(3))</literal> (We‚Äôll learn about append in the next chapter!)</paragraph>
                                </list_item>
                            </bullet_list>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </list_item>
            <list_item>
                <definition_list>
                    <definition_list_item>
                        <term>Use it in a more complex expression.</term>
                        <definition>
                            <paragraph>In that case, think of the return value as
                                replacing the entire text of the function invocation. For example, if there is a line
                                of code <literal>w = square(square(3) + 7) - 5</literal>, think of the return value 9 replacing the
                                text square(3) in that invocation, so it becomes <literal>square(9 + 7) -5</literal>.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </list_item>
            <list_item>
                <definition_list>
                    <definition_list_item>
                        <term>Print it for human consumption.</term>
                        <definition>
                            <paragraph>For example, <literal>print(square(3))</literal> outputs 9 to the
                                console. Note that, unless the return value is first  saved as in possibility 1, it will be available
                                only to the programmer watching the console, not to the program as it continues executing.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </list_item>
        </enumerated_list>
        <paragraph>If your only purpose in running a function is to make an output visible for human consumption, there are two ways to
            do it. You can put one or more print statements inside the function definition and not bother to return anything from
            the function (the value None will be returned). In that case, invoke the function without a print statement. For
            example, you can have an entire line of code that reads <literal>f(3)</literal>. That will run the function f and throw away the
            return value. Of course, if square doesn‚Äôt print anything out or have any side effects, it‚Äôs useless to call it and do
            nothing with the return value. But with a function that has print statements inside it, it can be quite useful.</paragraph>
        <paragraph>The other possibility is to return a value from the function and print it, as in <literal>print(f(3))</literal>. As you start to
            write larger, more complex programs, this will be more typical. Indeed the print statement will usually only be a
            temporary measure while you‚Äôre developing the program. Eventually, you‚Äôll end up calling f and saving the return value
            or using it as part of a more complex expression.</paragraph>
        <paragraph>You will know you‚Äôve really internalized the idea of functions when you are no longer confused about the difference
            between print and return. Keep working at it until it makes sense to you!</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question8_10_1">
        <statement>

        <paragraph>What will the following code output?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">def square(x):
    return x*x

def g(y):
    return y + 3

def h(y):
    return square(y) + 3

print(h(2))</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>2 is the input; the value returned from h is what will be printed.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Don't forget that 2 gets squared.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>First square 2, then add 3.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>25</p>
                </statement>
                <feedback>
                    <p>3 is added to the result of squaring 2</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Error: y has a value but x is an unbound variable inside the square function</p>
                </statement>
                <feedback>
                    <p>When square is called, x is bound to the parameter value that is passed in, 2.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question8_10_2">
        <statement>

        <paragraph>What will the following code output?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">def square(x):
    return x*x

def g(y):
    return y + 3

def h(y):
    return square(y) + 3

print(g(h(2))</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>Better read the section above one more time.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Better read the section above one more time.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>That's h(2), but it is passed to g.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>10</p>
                </statement>
                <feedback>
                    <p>h(2) returns 7, so y is bound to 7 when g is invoked.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Error: you can't nest function calls</p>
                </statement>
                <feedback>
                    <p>Ah, but you can nest function calls.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
