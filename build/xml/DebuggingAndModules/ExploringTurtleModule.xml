<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/ExploringTurtleModule.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="ExploringTurtleModule-source.html">ExploringTurtleModule</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'instance',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="exploring-the-turtle-module index-0" names="üê¢\ exploring\ the\ turtle\ module">
        <title>üê¢ Exploring the Turtle Module</title>
        <paragraph>We already introduced the idea of drawing with turtles. In the next few sections we will delve more deeply into this fun module. The turtle module is designed to help students learning how to program explore programming concepts in a way that is visually fun and interesting. Using turtles also will allow us in later chapters to explore aspects of interactive programming. With turtles, there is a visual output that an end user can view and (as you learn more programming) interact with.</paragraph>
        <paragraph>Here is a turtle that starts to draw a dashed line:</paragraph>

    <program label="ac3_11_1" interactive='activecode' language="python">
    
        <input>
import turtle             # allows us to use the turtles library
wn = turtle.Screen()      # creates a graphics window
maya = turtle.Turtle()    # create a turtle named maya

maya.forward(50)         # tell maya to move forward by 50 units
maya.penup()             # tell maya to pick up pen, so maya can move without drawing
maya.forward(25)          # move forward without drawing
maya.pendown()            # put the pen back down to draw
maya.forward(50)          # move forward by 50 units
        </input>
<tests>


</tests>

    </program>
        <paragraph>Now that you know a bit more about Python, we can explain a bit more about what is going on here.</paragraph>
        <paragraph>Line 1 imports the Turtle module. This brings us two new <strong>types</strong> that we can use: the <literal>Turtle</literal> type, and the
            <literal>Screen</literal> type.</paragraph>
        <paragraph>On line 2, we create and open what the turtle module calls a screen (we would
            prefer to call it a window, or in the case of this web version of Python
            simply a canvas), which we assign to variable <literal>wn</literal>. The dot notation <literal>turtle.Screen</literal> means <emphasis>‚ÄúThe Screen type
                that is defined within the turtle module‚Äù</emphasis>.  Every screen/window
            contains a <strong>canvas</strong>, which is the area inside the window on which we can draw.</paragraph>
        <paragraph>In line 3 we create a turtle. Remember that Python is case
            sensitive, so the module name, <literal>turtle</literal>, with a lowercase <literal>t</literal>, is different from the
            type <literal>Turtle</literal> because of the uppercase <literal>T</literal>. The variable <literal>maya</literal> is made to refer to this
            turtle.</paragraph>
        <paragraph>These first three lines set us up so that we are ready to do some drawing.</paragraph>
        <paragraph>In lines 4-8, we instruct the turtle ‚Äòmaya‚Äô to draw part of a dashed line. Run the program and trace through lines 5-9 to understand what is happening. The turtle only leaves a trace when the tail (pen) is down. When you create a tutrle, their tail is down by default.</paragraph>
        <admonition classes="admonition-complete-the-line">
            <title>Complete the line ‚Ä¶</title>
            <paragraph>Modify the program by adding the commands necessary to have <emphasis>maya</emphasis> make a dashed line that goes to the right edge of the canvas. The code will be repetitive. In the next chapter we will learn how to write this code so that it is more efficient!</paragraph>
        </admonition>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question3_11_1">
        <statement>

        <paragraph>What instruction do you give a turtle to allow it to move without drawing?</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>forward()</p>
                </statement>
                <feedback>
                    <p>No, forward() just moves the turtle in it's current direction.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>forward_penup()</p>
                </statement>
                <feedback>
                    <p>No, this is not a valid instruction?</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>penup()</p>
                </statement>
                <feedback>
                    <p>Yes, this instruction picks up a pen, and movement after this will not leave a line.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>pendown()</p>
                </statement>
                <feedback>
                    <p>No, this instruction puts the pen down, and movement instructions after this will draw a line.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <paragraph>Maya the turtle is an <strong>object</strong> and once we have created a turtle object, we can make it perform actions. Objects have <strong>methods</strong>, things that they can do. We can make use of this by <strong>invoking</strong> or activating turtle <strong>methods</strong>. A method is a set of program instructions that are for a specific type of object. Turtle methods are sets of instrutcions that all turtles know how to respond to. Because maya is an object, we use dot notation to call or invoke the turtle methods; <literal>maya.forward(50)</literal> says to call the forward() method, for the turtle object maya, with the specific distance of 50 units.</paragraph>
        <paragraph>In addition to methods ‚Äî the things an object can do ‚Äî an object can also
            have <strong>attributes</strong> ‚Äî (sometimes called <emphasis>properties</emphasis>) which store information about the current state of an object. For example, each
            turtle has a <emphasis>color</emphasis> attribute. The method invocation  <literal>maya.color("red")</literal>
            will make maya red and the line that maya draws will be red too.</paragraph>
        <paragraph>The color of the turtle, the width of its pen(tail), the position of the turtle
            within the window, which way it is facing, and so on are all part of its
            current <strong>state</strong>. Similarly, the window object has a background color which is part of its state.</paragraph>
        <paragraph>Quite a number of methods exist that allow us to modify the turtle and
            window objects. In the example below, we show just a couple and have only commented
            those lines that are different from the previous example. Note also that we have decided
            to call our turtle object <emphasis>tess</emphasis>. When we create objects, we can call them whatever we want.</paragraph>

    <program label="ac3_11_2" interactive='activecode' language="python">
    
        <input>
import turtle

wn = turtle.Screen()
wn.bgcolor("lightgreen")        # set the window background color

tess = turtle.Turtle()
tess.color("blue")              # make tess blue
tess.pensize(3)                 # set the width of her pen

tess.forward(50)
tess.left(120)
tess.forward(50)

wn.exitonclick()                # wait for a user click on the canvas
        </input>
<tests>


</tests>

    </program>
        <paragraph>The last line plays a very important role. The wn variable refers to the window shown
            above. When we invoke its <literal>exitonclick</literal> method, the program pauses execution and waits for the user to click the mouse somewhere in the window.
            When this click event occurs, the response is to close the turtle window and
            exit (stop execution of) the Python program.</paragraph>
        <paragraph>Each time we run this program, a new drawing window pops up, and will remain on the
            screen until we click on it.</paragraph>
        <admonition classes="admonition-extend-this-program">
            <title>Extend this program ‚Ä¶</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Modify this program so that before it creates the window, it prompts
                        the user to enter the desired background color.It should store the
                        user‚Äôs responses in a variable, and modify the color of the window
                        according to the user‚Äôs wishes.
                        (Hint: you can find a list of permitted color names at
                        <reference refuri="https://www.w3schools.com/colors/colors_names.asp">https://www.w3schools.com/colors/colors_names.asp</reference>. It includes some quite
                        unusual ones, like ‚ÄúPeachPuff‚Äù  and ‚ÄúHotPink‚Äù.)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Do similar changes to allow the user, at runtime, to set tess‚Äô color.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Do the same for the width of tess‚Äô pen. <emphasis>Hint:</emphasis> your dialog with the
                        user will return a string, but tess‚Äô <literal>pensize</literal> method
                        expects its argument to be an <literal>int</literal>. That means you need to convert
                        the string to an int before you pass it to <literal>pensize</literal>.</paragraph>
                </list_item>
            </enumerated_list>
        </admonition>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question3_11_2">
        <statement>

        <paragraph>Consider the following code:</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">import turtle
wn = turtle.Screen()
alex = turtle.Turtle()
alex.forward(150)
alex.left(90)
alex.forward(75)</literal_block>
        <paragraph>What does the line ‚Äúimport turtle‚Äù do?</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>It creates a new turtle object that can be used for drawing.</p>
                </statement>
                <feedback>
                    <p>The line &quot;alex = turtle.Turtle()&quot; is what actually creates the turtle object.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>It defines the module turtle which will allow you to create a Turtle object and draw with it.</p>
                </statement>
                <feedback>
                    <p>This line imports the module called turtle, which has all the built in functions for drawing on the screen with the Turtle object.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>It makes the turtle draw half of a rectangle on the screen.</p>
                </statement>
                <feedback>
                    <p>This functionality is performed with the lines: &quot;alex.forward(150)&quot;, &quot;lex.left(90)&quot;, and &quot;alex.forward(75)&quot;</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Nothing, it is unnecessary.</p>
                </statement>
                <feedback>
                    <p>If we leave it out, Python will give an error saying that it does not know about the name &quot;turtle&quot; when it reaches the line &quot;wn = turtle.Screen()&quot;</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question3_11_3">
        <statement>

        <paragraph>Why do we type <literal>turtle.Turtle()</literal> to get a new Turtle object?</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>This is simply for clarity.  It would also work to just type "Turtle()" instead of "turtle.Turtle()".</p>
                </statement>
                <feedback>
                    <p>We must specify the name of the module where Python can find the Turtle object.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>The period (.) is what tells Python that we want to invoke a new object.</p>
                </statement>
                <feedback>
                    <p>The period separates the module name from the object name.  The parentheses at the end are what tell Python to invoke a new object.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>The first "turtle" (before the period) tells Python that we are referring to the turtle module, which is where the object "Turtle" is found.</p>
                </statement>
                <feedback>
                    <p>Yes, the Turtle type is defined in the module turtle.  Remember that Python is case sensitive and Turtle is different from turtle.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question3_11_4">
        <statement>

        <paragraph>True or False: A Turtle object can have any name that follows the naming rules from Chapter 2.</paragraph>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>True</p>
                </statement>
                <feedback>
                    <p>In this chapter you saw one named alex and one named tess, but any legal variable name is allowed.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>False</p>
                </statement>
                <feedback>
                    <p>A variable, including one referring to a Turtle object, can have whatever name you choose as long as it follows the naming conventions from Chapter 2.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question3_11_5">
        <statement>

        <paragraph>Which of the following sequence of instructions would produce the following image?</paragraph>
        <image alt="long line to north with shorter line to west on top" candidates="{'*': 'DebuggingAndModules/Figures/turtleTest1.png'}" uri="DebuggingAndModules/Figures/turtleTest1.png"></image>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>right turn of 90 degrees before drawing, draw a line 150 pixels long, turn left 90, and draw a line 75 pixels long</p>
                </statement>
                <feedback>
                    <p>This would turn the turtle to the south before drawing</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>left turn of 180 degrees before drawing,  draw a line 150 pixels long, turn left 90, and draw a line 75 pixels long</p>
                </statement>
                <feedback>
                    <p>This would turn the turtle to the west before drawing</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>left turn of 270 degrees before drawing,  draw a line 150 pixels long, turn left 90, and draw a line 75 pixels long</p>
                </statement>
                <feedback>
                    <p>This would turn the turtle to the south before drawing</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>right turn of 270 degrees before drawing, draw a line 150 pixels long, turn right 90, and draw a line 75 pixels long</p>
                </statement>
                <feedback>
                    <p>This is almost correct, but the short end would be facing east instead of west.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>left turn of 90 degrees before drawing,  draw a line 150 pixels long, turn left 90, and draw a line 75 pixels long</p>
                </statement>
                <feedback>
                    <p>Yes, the turtle starts facing east, so to turn it north you can turn left 90 or right 270 degrees.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <paragraph><strong>Mixed up programs</strong></paragraph>
<exercise label='pp3_11_1'   indentation='hide' language='python'><statement>
        <paragraph>The following program uses a turtle to draw a capital L in white on a blue background as shown to the left,</paragraph>
        <image align="left" alt="image of a navigational compass and a letter L drawn by Turtle." candidates="{'*': 'DebuggingAndModules/Figures/BlueTurtleL.png'}" uri="DebuggingAndModules/Figures/BlueTurtleL.png" width="150"></image>
        <paragraph>But the lines are mixed up. The program should do all necessary set-up and create the turtle and set the pen size to 10. The turtle should then turn to face south, draw a line that is 150 pixels long, turn to face east, and draw a line that is 75 pixels long. Finally, set the window to close when the user clicks in it.</paragraph>
        <paragraph>Drag the blocks of statements from the left column to the right column and put them in the right order. Then click on <emphasis>Check Me</emphasis> to see if you are right. You will be told if any of the lines are in the wrong order.</paragraph>
</statement>
<blocks><block order='2' >
<cline>import turtle</cline>
<cline>wn = turtle.Screen()</cline>
</block><block order='5' >
<cline>wn.bgcolor("blue")</cline>
<cline>jamal = turtle.Turtle()</cline>
</block><block order='3' >
<cline>jamal.color("white")</cline>
<cline>jamal.pensize(10)</cline>
</block><block order='4' >
<cline>jamal.right(90)</cline>
<cline>jamal.forward(150)</cline>
</block><block order='1' >
<cline>jamal.left(90)</cline>
<cline>jamal.forward(75)</cline>
<cline>wn.exitonclick()</cline>
</block></blocks></exercise><exercise label='pp3_11_2'   indentation='hide' language='python'><statement>
        <paragraph>The following program uses a turtle to draw a capital T in white on a green background as shown to the left,</paragraph>
        <image align="left" alt="image of a letter T drawn by Turtle." candidates="{'*': 'DebuggingAndModules/Figures/TurtleT.png'}" uri="DebuggingAndModules/Figures/TurtleT.png" width="150"></image>
        <paragraph>But the lines are mixed up. The program should do all necessary set-up, create the turtle, and set the pen size to 10. After that the turtle should turn to face north, draw a line that is 150 pixels long, turn to face west, and draw a line that is 50 pixels long. Next, the turtle should turn 180 degrees and draw a line that is 100 pixels long. Finally, set the window to close when the user clicks in it.</paragraph>
        <paragraph>Drag the blocks of statements from the left column to the right column and put them in the right order. Then click on <emphasis>Check Me</emphasis> to see if you are right. You will be told if any of the lines are in the wrong order.</paragraph>
</statement>
<blocks><block order='1' >
<cline>import turtle</cline>
<cline>wn = turtle.Screen()</cline>
<cline>wn.bgcolor("green")</cline>
<cline>jamal = turtle.Turtle()</cline>
<cline>jamal.color("white")</cline>
<cline>jamal.pensize(10)</cline>
</block><block order='5' >
<cline>jamal.left(90)</cline>
<cline>jamal.forward(150)</cline>
</block><block order='2' >
<cline>jamal.left(90)</cline>
<cline>jamal.forward(50)</cline>
</block><block order='3' >
<cline>jamal.right(180)</cline>
<cline>jamal.forward(100)</cline>
</block><block order='4' >
<cline>wn.exitonclick()</cline>
</block></blocks></exercise>    </section>
</document>
