<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/RuntimeErrors.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="RuntimeErrors-source.html">RuntimeErrors</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'error;runtime',\ 'index-0',\ '',\ None] ['single',\ 'runtime\ error',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="runtime-errors index-0" names="runtime\ errors">
        <title>Runtime Errors</title>
        <paragraph>The second type of error is a <strong>runtime error</strong>. A program with a runtime error
            is one that passed the interpreter’s syntax checks, and started to execute.
            However, during the execution of one of the statements in the program, an error
            occurred that caused the interpreter to stop executing the program and display
            an error message. Runtime errors are also called <strong>exceptions</strong> because they usually
            indicate that something exceptional (and bad) has happened.</paragraph>
        <paragraph>Here are some examples of common runtime errors you are sure to encounter:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>Misspelled or incorrectly capitalized variable and function names</paragraph>
            </list_item>
            <list_item>
                <paragraph>Attempts to perform operations (such as math operations) on data of the wrong type (ex.
                    attempting to subtract two variables that hold string values)</paragraph>
            </list_item>
            <list_item>
                <paragraph>Dividing by zero</paragraph>
            </list_item>
            <list_item>
                <paragraph>Attempts to use a type conversion function such as <literal>int</literal> on a value that can’t be converted to an int</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>The following program contains various runtime errors. Can you spot any of them?
            After locating the error, run the program to see the error message.</paragraph>

    <program label="debug_rterr" interactive='activecode' language="python">
    
        <input>
subtotal = input("Enter total before tax:")
tax = .08 * subTotal
print("tax on", subtotal, "is:", tax)
        </input>
<tests>


</tests>

    </program>
        <paragraph>Notice the following important differences between syntax errors and runtime errors that can help you as you try to diagnose
            and repair the problem:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>If the error message mentions <literal>SyntaxError</literal>, you know that the problem has to do with syntax: the structure of the code,
                    the punctuation, etc.</paragraph>
            </list_item>
            <list_item>
                <paragraph>If the program runs partway and then crashes, you know the problem is a runtime error. Programs with syntax errors
                    don’t execute even one line.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>Stay tuned for more details on the various types of runtime errors. We have a whole section of this
            chapter dedicated to that topic.</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question3_4_1">
        <statement>

        <paragraph>Which of the following is a run-time error?</paragraph>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>Attempting to divide by 0.</p>
                </statement>
                <feedback>
                    <p>Python cannot reliably tell if you are trying to divide by 0 until it is executing your program (e.g., you might be asking the user for a value and then dividing by that value—you cannot know what value the user will enter before you run the program).</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Forgetting a colon at the end of a statement where one is required.</p>
                </statement>
                <feedback>
                    <p>This is a problem with the formal structure of the program.  Python knows where colons are required and can detect when one is missing simply by looking at the code without running it.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Forgetting to divide by 100 when printing a percentage amount.</p>
                </statement>
                <feedback>
                    <p>This will produce the wrong answer, but Python will not consider it an error at all.  The programmer is the one who understands that the answer produced is wrong.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question3_4_2">
        <statement>

        <paragraph>Who or what typically finds runtime errors?</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>The programmer.</p>
                </statement>
                <feedback>
                    <p>Programmers rarely find all the runtime errors, there is a computer program that will do it for us.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>The interpreter.</p>
                </statement>
                <feedback>
                    <p>If an instruction is illegal to perform at that point in the execution, the interpreter will stop with a message describing the exception.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>The computer.</p>
                </statement>
                <feedback>
                    <p>Well, sort of.  But it is a special thing in the computer that does it.  The stand alone computer without this additional piece can not do it.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>The teacher / instructor.</p>
                </statement>
                <feedback>
                    <p>Your teacher and instructor may be able to find most of your runtime errors, but only because they have experience looking at code and possibly writing code.  With experience runtime errors are easier to find.  But we also have an automated way of finding these types of errors.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
