<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/InstancesAHerdofTurtles.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="InstancesAHerdofTurtles-source.html">InstancesAHerdofTurtles</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'instance',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="instances-a-herd-of-turtles index-0" names="instances:\ a\ herd\ of\ turtles">
        <title>Instances: A Herd of Turtles</title>
        <paragraph>Just like we can have many different integers in a program, we can have many
            turtles. Each of them is an independent object and we call each one an <strong>instance</strong> of the
            Turtle type (class). Each instance has its own attributes and methods — so alex might
            draw with a thin pink pen and be at some position, while tess might be going in a different
            direction with a fat black pen. So here is what happens when alex completes a square and
            tess completes a triangle:</paragraph>

    <program label="ac3_12_1" interactive='activecode' language="python">
    
        <input>
import turtle
wn = turtle.Screen()             # Set up the window and its attributes
wn.bgcolor("lightgreen")


tess = turtle.Turtle()           # create tess and set their pen width
tess.pensize(5)

alex = turtle.Turtle()           # create alex
alex.color("hotpink")            # set their color

tess.forward(80)                 # Let tess draw an equilateral triangle
tess.left(120)
tess.forward(80)
tess.left(120)
tess.forward(80)
tess.left(120)                   # complete the triangle

tess.right(180)                  # turn tess around
tess.forward(80)                 # move them away from the origin so we can see alex

alex.forward(50)                 # make alex draw a square
alex.left(90)
alex.forward(50)
alex.left(90)
alex.forward(50)
alex.left(90)
alex.forward(50)
alex.left(90)

wn.exitonclick()
        </input>
<tests>


</tests>

    </program>
        <paragraph>Here are some <emphasis>How to think like a computer scientist</emphasis> observations:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>There are 360 degrees in a full circle. If you add up all the turns that a
                    turtle makes, <emphasis>no matter what steps occurred between the turns</emphasis>, you can
                    easily figure out if they add up to some multiple of 360. This should
                    convince you that alex is facing in exactly the same direction as they were when
                    they were first created. (Geometry conventions have 0 degrees facing East and
                    that is the case here too!)</paragraph>
            </list_item>
            <list_item>
                <paragraph>We could have left out the last turn for alex, but that would not have been
                    as satisfying. If you’re asked to draw a closed shape like a square or a
                    rectangle, it is a good idea to complete all the turns and to leave the
                    turtle back where it started, facing the same direction as it started in.
                    This makes reasoning about the program and composing chunks of code into
                    bigger programs easier for us humans!</paragraph>
            </list_item>
            <list_item>
                <paragraph>We did the same with tess: tess drew a triangle and turned through a full
                    360 degress. Then we turned tess around and moved them aside.  Even the blank
                    line 18 is a hint about how the programmer’s <emphasis>mental chunking</emphasis> is working: in
                    big terms, tess’ movements were chunked as “draw the triangle” (lines 12-17)
                    and then “move away from the origin” (lines 19 and 20).</paragraph>
            </list_item>
            <list_item>
                <paragraph>One of the key uses for comments is to record your mental chunking, and big
                    ideas. They’re not always explicit in the code.</paragraph>
            </list_item>
            <list_item>
                <paragraph>And, uh-huh, two turtles may not be enough for a herd, but you get the idea! Feel
                    free to add a third or fourth turtle.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question3_12_1">
        <statement>

        <paragraph>True or False: You can only have one active turtle at a time. If you create a second one, you will no longer be able to access or use the first.</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>True</p>
                </statement>
                <feedback>
                    <p>You can create and use as many turtles as you like. As long as they have different names, you can operate them independently, and make them move in any order you like. To convince yourself this is true, try interleaving the instructions for alex and tess in ActiveCode box 3.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>False</p>
                </statement>
                <feedback>
                    <p>You can create and use as many turtles as you like. As long as they have different names, you can operate them independently, and make them move in any order you like. If you are not totally convinced, try interleaving the instructions for alex and tess in ActiveCode box 3.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <paragraph><strong>Mixed up programs</strong></paragraph>
<exercise label='pp3_12_1'   indentation='hide' language='python'><statement>
        <paragraph>The following program has one turtle, “jamal”, draw a capital L in blue and then another, “tina”, draw a line to the west in orange as shown to the left:</paragraph>
        <image align="left" alt="image of a capital letter L in blue color drawn by one Turtle and a line to the west in orange color drawn by another Turtle. Both the Turtles have same starting point." candidates="{'*': 'DebuggingAndModules/Figures/TwoTurtles1.png'}" height="100" uri="DebuggingAndModules/Figures/TwoTurtles1.png"></image>
        <paragraph>The program should do all set-up, have “jamal” draw the L, and then have “tina” draw the line. Finally, it should set the window to close when the user clicks in it.</paragraph>
        <paragraph>Drag the blocks of statements from the left column to the right column and put them in the right order. Then click on <emphasis>Check Me</emphasis> to see if you are right. You will be told if any of the lines are in the wrong order.</paragraph>
</statement>
<blocks><block order='1' >
<cline>import turtle</cline>
<cline>wn = turtle.Screen()</cline>
</block><block order='3' >
<cline>jamal = turtle.Turtle()</cline>
<cline>jamal.pensize(10)</cline>
<cline>jamal.color("blue")</cline>
<cline>jamal.right(90)</cline>
<cline>jamal.forward(150)</cline>
</block><block order='4' >
<cline>jamal.left(90)</cline>
<cline>jamal.forward(75)</cline>
</block><block order='2' >
<cline>tina = turtle.Turtle()</cline>
<cline>tina.pensize(10)</cline>
<cline>tina.color("orange")</cline>
<cline>tina.left(180)</cline>
<cline>tina.forward(75)</cline>
</block><block order='5' >
<cline>wn.exitonclick()</cline>
</block></blocks></exercise><exercise label='pp3_12_2'   indentation='hide' language='python'><statement>
        <paragraph>The following program has one turtle, “jamal”, draw a line to the north in blue and then another, “tina”, draw a line to the east in orange as shown to the left,</paragraph>
        <image align="left" alt="Image of a line to the north in blue color drawn by one Turtle and a line to the east in orange drawn by another Turtle. Both the Turtles have a same starting point." candidates="{'*': 'DebuggingAndModules/Figures/TwoTurtlesL.png'}" uri="DebuggingAndModules/Figures/TwoTurtlesL.png" width="150"></image>
        <paragraph>The program should import the turtle module, get the window to draw on, create the turtle “jamal”, have it draw a line to the north, then create the turtle “tina”, and have it draw a line to the east. Finally, it should set the window to close when the user clicks in it.</paragraph>
        <paragraph>Drag the blocks of statements from the left column to the right column and put them in the right order. Then click on <emphasis>Check Me</emphasis> to see if you are right. You will be told if any of the lines are in the wrong order.</paragraph>
</statement>
<blocks><block order='6' >
<cline>import turtle</cline>
</block><block order='1' >
<cline>wn = turtle.Screen()</cline>
</block><block order='3' >
<cline>jamal = turtle.Turtle()</cline>
<cline>jamal.color("blue")</cline>
<cline>jamal.pensize(10)</cline>
</block><block order='4' >
<cline>jamal.left(90)</cline>
<cline>jamal.forward(150)</cline>
</block><block order='5' >
<cline>tina = turtle.Turtle()</cline>
<cline>tina.pensize(10)</cline>
<cline>tina.color("orange")</cline>
<cline>tina.forward(150)</cline>
</block><block order='2' >
<cline>wn.exitonclick()</cline>
</block></blocks></exercise>    </section>
</document>
