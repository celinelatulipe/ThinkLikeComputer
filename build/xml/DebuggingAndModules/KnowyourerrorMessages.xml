<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/KnowyourerrorMessages.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="KnowyourerrorMessages-source.html">KnowyourerrorMessages</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="know-your-error-messages" names="üë©‚Äçüíª\ know\ your\ error\ messages">
        <title>üë©‚Äçüíª Know Your Error Messages</title>
        <paragraph>Many problems in your program will lead to an error message. For example as I was
            writing and testing this chapter of the book I wrote the following version of the
            example program in the previous section.</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">current_time_str = input("What is the current time (in hours 0-23)?")
wait_time_str = input("How many hours do you want to wait")

current_time_int = int(current_time_str)
wait_time_int = int(wait_time_int)

final_time_int = current_time_int + wait_time_int
print(final_time_int)</literal_block>
        <paragraph>Can you see what is wrong, just by looking at the code? Maybe, maybe not. Our brain
            tends to see what we think is there, so sometimes it is very hard to find the problem
            just by looking at the code.  Especially when it is our own code and we are sure that
            we have done everything right!</paragraph>
        <paragraph>Let‚Äôs try the program again, but this time in an activecode:</paragraph>

    <program label="ac3_6_1" interactive='activecode' language="python">
    
        <input>
current_time_str = input("What is the current time (in hours 0-23)?")
wait_time_str = input("How many hours do you want to wait")

current_time_int = int(current_time_str)
wait_time_int = int(wait_time_int)

final_time_int = current_time_int + wait_time_int
print(final_time_int)
        </input>
<tests>


</tests>

    </program>
        <paragraph>Aha! Now we have an error message that might be useful. The name error tells us
            that <literal>wait_time_int</literal> is not defined. It also tells us that the error is on line 5.
            That‚Äôs <strong>really</strong> useful information. Now look at line five and you will see that
            <literal>wait_time_int</literal> is used on both the left and the right hand side of the assignment
            statement.</paragraph>
        <note>
            <paragraph>The error descriptions you see in activecode may be different (and more understandable!) than in a regular
                Python interpreter. The interpreter in activecode is limited in many ways, but it is intended for beginners,
                including the wording chosen to describe errors.</paragraph>
        </note>

    <exercise label="question3_6_1">
        <statement>

        <paragraph>Which of the following explains why <literal>wait_time_int = int(wait_time_int)</literal> is an error?</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>You cannot use a variable on both the left and right hand sides of an assignment statement.</p>
                </statement>
                <feedback>
                    <p>No, You can, as long as all the variables on the right hand side already have values.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>wait_time_int does not have a value so it cannot be used on the right hand side.</p>
                </statement>
                <feedback>
                    <p>Yes.  Variables must already have values in order to be used on the right hand side.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>This is not really an error, Python is broken.</p>
                </statement>
                <feedback>
                    <p>No, No, No!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <paragraph>In writing and using this book over the last few years we have collected a lot of
            statistics about the programs in this book. Here are some statistics about error
            messages for the exercises in this book.</paragraph>
        <image align="center" candidates="{'*': 'DebuggingAndModules/Figures/error_dist.png'}" uri="DebuggingAndModules/Figures/error_dist.png" width="600"></image>
        <paragraph>The vast majority of the error messages encountered for this problem are SyntaxError,
            TypeError, NameError, or ValueError. We will look at these errors in three stages:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>First we will define what these error messages mean.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Then, we will look at some examples that cause these errors to occur.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Finally we will look at ways to help uncover the root cause of these messages.</paragraph>
            </list_item>
        </bullet_list>
        <section ids="syntaxerror" names="syntaxerror">
            <title>SyntaxError</title>
            <paragraph>Syntax errors happen when you make an error in the syntax of your program. Syntax
                errors are like making grammatical errors in writing. If you don‚Äôt use periods and
                commas in your writing then you are making it hard for other readers to figure out
                what you are trying to say. Similarly Python has certain grammatical rules that must
                be followed or else Python can‚Äôt figure out what you are trying to say.</paragraph>
            <paragraph>Usually SyntaxErrors can be traced back to missing punctuation characters, such as
                parentheses, quotation marks, or commas. Remember that in Python commas are used to
                separate parameters to functions. Paretheses must be balanced, or else Python thinks
                that you are trying to include everything that follows as a parameter to some function.</paragraph>
            <paragraph>Here are a couple examples of Syntax errors in the example program we have been using.
                See if you can figure out what caused them.</paragraph>
            <TabbedStuffNode divid="db_tabs1" line="108" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/KnowyourerrorMessages.rst" tabbed_stuff_options="{'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'db_tabs1', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">
                    <paragraph>Find and fix the error in the following code.</paragraph>

    <program label="ac3_6_2" interactive='activecode' language="python">
    
        <input>
current_time_str = input("What is the current time (in hours 0-23)?")
wait_time_str = input("How many hours do you want to wait"

current_time_int = int(current_time_str)
wait_time_int = int(wait_time_str)

final_time_int = current_time_int + wait_time_int
print(final_time_int)
        </input>
<tests>


</tests>

    </program>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">
                    <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">current_time_str = input("What is the current time (in hours 0-23)?")
wait_time_str = input("How many hours do you want to wait"

current_time_int = int(current_time_str)
wait_time_int = int(wait_time_str)

final_time_int = current_time_int + wait_time_int
print(final_time_int)</literal_block>
                    <paragraph>Since the error message points us to line 4 this might be a bit confusing. If
                        you look at line four carefully you will see that there is no problem with the
                        syntax. So, in this case the next step should be to back up and look at the
                        previous line. In this case if you look at line 2 carefully you will see that
                        there is a missing right parenthesis at the end of the line. Remember that
                        parentheses must be balanced. Since Python allows statements to continue over
                        multiple lines inside parentheses python will continue to scan subsequent
                        lines looking for the balancing right parenthesis. However in this case it
                        finds the name <literal>current_time_int</literal> and it will want to interpret that as
                        another parameter to the input function. But, there is not a comma to
                        separate the previous string from the variable so as far as Python is
                        concerned the error here is a missing comma. From your perspective its a
                        missing parenthesis.</paragraph>
                </TabNode>
            </TabbedStuffNode>
            <paragraph><strong>Finding Clues</strong> How can you help yourself find these problems? One trick that can be
                very valuable in this situation is to simply start by commenting out the line number
                that is flagged as having the error. If you comment out line four, the error message
                now changes to point to line 5. Now you ask yourself, am I really that bad that I
                have two lines in a row that have errors on them? Maybe, so taken to the extreme, you
                could comment out all of the remaining lines in the program. Now the error message
                changes to <literal>TokenError: EOF in multi-line statement</literal> This is a very technical way
                of saying that Python got to the end of file (EOF) while it was still looking for
                something. In this case a right parenthesis.</paragraph>
            <TabbedStuffNode divid="db_tabs2" line="164" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/KnowyourerrorMessages.rst" tabbed_stuff_options="{'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'db_tabs2', 'divclass': 'alert alert-warning'}">
                <TabNode tabname="Question" tabnode_options="{'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">
                    <paragraph>Find and fix the error in the following code.</paragraph>

    <program label="ac3_6_3" interactive='activecode' language="python">
    
        <input>
current_time_str = input("What is the "current time" (in hours 0-23)?")
wait_time_str = input("How many hours do you want to wait")

current_time_int = int(current_time_str)
wait_time_int = int(wait_time_str)

final_time_int = current_time_int + wait_time_int
print(final_time_int)
        </input>
<tests>


</tests>

    </program>
                </TabNode>
                <TabNode tabname="Answer" tabnode_options="{'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">
                    <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">current_time_str = input("What is the "current time" (in hours 0-23)?")
wait_time_str = input("How many hours do you want to wait")

current_time_int = int(current_time_str)
wait_time_int = int(wait_time_str)

final_time_int = current_time_int + wait_time_int
print(final_time_int)</literal_block>
                    <paragraph>The error message points you to line 1 and in this case that is exactly where
                        the error occurs. In this case your biggest clue is to notice the difference
                        in  highlighting on the line. Notice that the words ‚Äúcurrent time‚Äù are a
                        different color than those around them. Why is this? Because ‚Äúcurrent time‚Äù
                        is in double quotes inside another pair of double quotes Python thinks that
                        you are finishing off one string, then you have some other names and finally
                        another string. But you haven‚Äôt separated these names or strings by commas,
                        and you haven‚Äôt added them together with the concatenation operator (+). So,
                        there are several corrections you could make. First you could make the
                        argument to input be as follows: <literal>"What is the 'current time' (in hours 0-23)
"</literal> Notice that here we have correctly used single quotes inside double quotes
                        . Another option is to simply remove the extra double quotes. Why were you
                        quoting ‚Äúcurrent time‚Äù anyway? <literal>"What is the current time (in hours 0-23)"</literal></paragraph>
                </TabNode>
            </TabbedStuffNode>
            <paragraph><strong>Finding Clues</strong>  If you follow the same advice as for the last problem, comment out
                line one, you will immediately get a different error message. Here‚Äôs where you need
                to be very careful and not panic. The error message you get now is: <literal>NameError: name
'current_time_str' is not defined on line 4</literal>. You might be very tempted to think
                that this is somehow related to the earlier problem and immediately conclude that
                there is something wrong with the variable name <literal>current_time_str</literal> but if you
                reflect for a minute you will see that by commenting out line one you have caused a
                new and unrelated error. That is you have commented out the creation of the name
                <literal>current_time_str</literal>. So of course when you want to convert it to an <literal>int</literal> you will
                get the NameError. Yes, this can be confusing, but it will become much easier with
                experience. It‚Äôs also important to keep calm, and evaluate each new clue carefully so
                you don‚Äôt waste time chasing problems that are not really there.</paragraph>
            <paragraph>Uncomment line 1 and you are back to the SyntaxError. Another track is to eliminate a
                possible source of error. Rather than commenting out the entire line you might just
                try to assign <literal>current_time_str</literal> to a constant value. For example you might make
                line one look like this:  <literal>current_time_str = "10"  #input("What is the "current
time" (in hours 0-23)?")</literal>. Now you have assigned <literal>current_time_str</literal> to the string
                10, and commented out the input statement. And now the program works! So you
                conclude that the problem must have something to do with the input function.</paragraph>
        </section>
        <section ids="typeerror" names="typeerror">
            <title>TypeError</title>
            <paragraph>TypeErrors occur when you you try to combine two objects that are not compatible. For
                example you try to add together an integer and a string. Usually type errors can be
                isolated to lines that are using mathematical operators, and usually the line number
                given by the error message is an accurate indication of the line.</paragraph>
            <paragraph>Here‚Äôs an example of a type error created by a Polish learner.  See if you can find
                and fix the error.</paragraph>

    <program label="ac3_6_4" interactive='activecode' language="python">
    
        <input>
a = input('wpisz godzine')
x = input('wpisz liczbe godzin')
int(x)
int(a)
h = x // 24
s = x % 24
print (h, s)
a = a + s
print ('godzina teraz', a)
        </input>
<tests>


</tests>

    </program>
            <RevealNode line="257" runestone_options="{'showtitle': 'data-showtitle=&quot;Show me the Solution&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide&quot;', 'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'dbex4_rev', 'instructoronly': '', 'is_dynamic': 'true'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/KnowyourerrorMessages.rst">
                <admonition classes="admonition-solution">
                    <title>Solution</title>
                    <paragraph>In finding this error there are few lessons to think about. First, you may
                        find it very disconcerting that you cannot understand the whole program.
                        Unless you speak Polish then this won‚Äôt be an issue. But, learning what you
                        can ignore, and what you need to focus on is a very important part of the
                        debugging process. Second, types and good variable names are important and
                        can be very helpful. In this case a and x are not particularly helpful names,
                        and in particular they do not help you think about the types of your
                        variables, which as the error message implies is the root of the problem here.
                        The rest of the lessons we will get back to in a minute.</paragraph>
                    <paragraph>The error message provided to you gives you a pretty big hint.
                        <literal>TypeError: unsupported operand type(s) for FloorDiv: 'str' and 'number' on line: 5</literal>
                        On line five we are trying to use integer division on x and 24. The error
                        message tells you that you are tyring to divide a string by a number. In this
                        case you know that 24 is a number so x must be a string. But how? You can
                        see the function call on line 3 where you are converting x to an integer.
                        <literal>int(x)</literal> or so you think. This is lesson three and is one of the most
                        common errors we see in introductory programming. What is the difference
                        between <literal>int(x)</literal> and <literal>x = int(x)</literal></paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>The expression <literal>int(x)</literal> converts the string referenced by x to an integer but it does not store it anywhere.  It is very common to assume that <literal>int(x)</literal> somehow changes x itself, as that is what you are intending!  The thing that makes this very tricky is that <literal>int(x)</literal> is a valid expression, so it doesn‚Äôt cause any kind of error, but rather the error happens later on in the program.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>The assignment statement  <literal>x = int(x)</literal> is very different.  Again, the <literal>int(x)</literal> expression converts the string referenced by x to an integer, but this time it also changes what x references so that x now refers to the integer value returned by the <literal>int</literal> function.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>So, the solution to this problem is to change lines 3 and 4 so they are
                        assignment statements.</paragraph>
                </admonition>
            </RevealNode>
            <paragraph><strong>Finding Clues</strong>  One thing that can help you in this situation is to print out the
                values and the types of the variables involved in the statement that is causing the
                error. You might try adding a print statement after line 4 <literal>print(x, type(x))</literal> You
                will see that at least we have confirmed that x is of type string. Now you need to
                start to work backward through the program. You need to ask yourself, where is x used
                in the program? x is used on lines 2, 3, and of course 5 and 6 (where we are getting
                an error). So maybe you move the print statement to be after line 2 and again after 3.
                Line 3 is where you expect the value of x to be changed to an integer. Could line 4
                be mysteriously changing x back to a string? Not very likely. So the value and type
                of x is just what you would expect it to be after line 2, but not after line 3. This
                helps you isolate the problem to line 3. In fact if you employ one of our earlier
                techniques of commenting out line 3 you will see that this has no impact on the error,
                and is a big clue that line 3 as it is currently written is useless.</paragraph>
        </section>
        <section ids="nameerror" names="nameerror">
            <title>NameError</title>
            <paragraph>Name errors almost always mean that you have used a variable before it has a value.
                Often NameErrors are simply caused by typos in your code. They can be hard to spot if
                you don‚Äôt have a good eye for catching spelling mistakes. Other times you may simply
                mis-remember the name of a variable or even a function you want to call. You have
                seen one example of a NameError at the beginning of this section. Here is another one.
                See if you can get this program to run successfully:</paragraph>

    <program label="ac3_6_5" interactive='activecode' language="python">
    
        <input>
str_time = input("What time is it now?")
str_wait_time = input("What is the number of hours to wait?")
time = int(str_time)
wai_time = int(str_wait_time)

time_when_alarm_go_off = time + wait_time
print(time_when_alarm_go_off)
        </input>
<tests>


</tests>

    </program>
            <RevealNode line="326" runestone_options="{'showtitle': 'data-showtitle=&quot;Show me the Solution&quot;', 'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'db_ex5_reveal', 'hidetitle': 'data-hidetitle=&quot;Hide&quot;', 'instructoronly': '', 'is_dynamic': 'true'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/KnowyourerrorMessages.rst">
                <admonition classes="admonition-solution">
                    <title>Solution</title>
                    <paragraph>In this example, the student seems to be a fairly bad speller, as there are a
                        number of typos to fix. The first one is identified as wait_time is not
                        defined on line 6. Now in this example you can see that there is
                        <literal>str_wait_time</literal> on line 2, and  <literal>wai_time</literal> on line 4 and <literal>wait_time</literal> on
                        line 6. If you do not have very sharp eyes its easy to miss that there is a
                        typo on line 4.</paragraph>
                </admonition>
            </RevealNode>
            <paragraph><strong>Finding Clues</strong>  With name errors one of the best things you can do is use the
                editor, or browser search function. Quite often if you search for the exact word in the
                error message one of two things will happen:</paragraph>
            <paragraph>1.  The word you are searching for will appear only once in your code, it‚Äôs also likely
                that it will be on the right hand side of an assignment statement, or as a parameter to
                a function. That should confirm for you that you have a typo somewhere. If the name in
                question <strong>is</strong> what you thought it should be then you probably have a typo on the left
                hand side of an assignment statement on a line before your error message occurs. Start
                looking backward at your assignment statements. In some cases it‚Äôs really nice to
                leave all the highlighted strings from the search function visible as they will help
                you very quickly find a line where you might have expected your variable to be
                highlighted.</paragraph>
            <paragraph>2.  The second thing that may happen is that you will be looking directly at a line
                where you expected the search to find the string in question, but it will not be
                highlighted. Most often that will be the typo right there.</paragraph>
            <paragraph>Here is another one for you to try:</paragraph>

    <program label="ac3_6_6" interactive='activecode' language="python">
    
        <input>
n = input("What time is it now (in hours)?")
n = imt(n)
m = input("How many hours do you want to wait?")
m = int(m)
sum_time = n + m
time_of_day = sum_time % 12
print("The time is now", time_of_day)
        </input>
<tests>


</tests>

    </program>
            <RevealNode line="370" runestone_options="{'showtitle': 'data-showtitle=&quot;Show me the Solution&quot;', 'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'db_ex6_reveal', 'hidetitle': 'data-hidetitle=&quot;Hide&quot;', 'instructoronly': '', 'is_dynamic': 'true'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/KnowyourerrorMessages.rst">
                <admonition classes="admonition-solution">
                    <title>Solution</title>
                    <paragraph>This one is once again a typo, but the typo is not in a variable name, but
                        rather, the name of a function. The search strategy would help you with this
                        one easily, but there is another clue for you as well. The editor in the
                        textbook, as well as almost all Python editors in the world provide you with
                        color clues. Notice that on line 2 the function <literal>imt</literal> is not highlighted
                        blue like the word <literal>int</literal> on line 4.</paragraph>
                </admonition>
            </RevealNode>
            <paragraph>And one last bit of code to fix.</paragraph>

    <program label="ac3_6_7" interactive='activecode' language="python">
    
        <input>
present_time = input("Enter the present timein hours:")
set_alarm = input("Set the hours for alarm:")
int (present_time, set_time, alarm_time)
alarm_time = present_time + set_alarm
print(alarm_time)
        </input>
<tests>


</tests>

    </program>
            <RevealNode line="393" runestone_options="{'showtitle': 'data-showtitle=&quot;Show me the Solution&quot;', 'subchapter': 'KnowyourerrorMessages', 'chapter': 'DebuggingAndModules', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'db_ex7_reveal', 'hidetitle': 'data-hidetitle=&quot;Hide&quot;', 'instructoronly': '', 'is_dynamic': 'true'}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/DebuggingAndModules/KnowyourerrorMessages.rst">
                <admonition classes="admonition-solution">
                    <title>Solution</title>
                    <paragraph>In this example the error message is about <literal>set_time</literal> not defined on line 3.
                        In this case the undefined name is not used in an assignment statement, but is
                        used as a parameter (incorrectly) to a function call. A search on <literal>set_time</literal>
                        reveals that in fact it is only used once in the program. Did the author mean
                        <literal>set_alarm</literal>? If we make that assumption we immediately get another error
                        <literal>NameError: name 'alarm_time' is not defined on line: 3</literal>. The variable
                        <literal>alarm_time</literal> is defined on line 4, but that does not help us on line 3.
                        Furthermore we now have to ask the question is this function call
                        <literal>int(present_time, set_alarm, alarm_time)</literal> even the correct use of the
                        <literal>int</literal> function? The answer to that is a resounding no. Let‚Äôs list all of the
                        things wrong with line 3:</paragraph>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph><literal>set_time</literal> is not defined and never used, the author probably meant <literal>set_alarm</literal>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>alarm_time</literal> cannot be used as a parameter before it is defined, even on the next line!</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>int</literal> can only convert one string to an integer at a time.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Finally, <literal>int</literal> should be used in an assignment statement.  Even if <literal>int</literal> was called with the correct number of parameters it would have no real effect.</paragraph>
                        </list_item>
                    </enumerated_list>
                </admonition>
            </RevealNode>
            <comment xml:space="preserve">advanced topic!</comment>
            <comment xml:space="preserve">present_time = int(input("Enter the present time(hhmm):"))</comment>
            <comment xml:space="preserve">print type(present_time)</comment>
            <comment xml:space="preserve">min = _ * 60</comment>
            <comment xml:space="preserve">tot_min = min + [2, 4]</comment>
            <comment xml:space="preserve">print(tot_min)</comment>
            <comment xml:space="preserve">set_hrs = int(input("Enter the hours (hhmm):"))</comment>
            <comment xml:space="preserve">alarm_time = present_time + set_hrs</comment>
            <comment xml:space="preserve">print(alarm_time)</comment>
        </section>
        <section ids="valueerror" names="valueerror">
            <title>ValueError</title>
            <paragraph>Value errors occur when you pass a parameter to a function and the function is
                expecting a certain limitations on the values, and the value passed is not compatible.
                We can illustrate that with this particular program in two different ways.</paragraph>

    <program label="ac3_6_8" interactive='activecode' language="python">
    
        <input>
current_time_str = input("What is the current time (in hours 0-23)?")
current_time_int = int(current_time_str)

wait_time_str = input("How many hours do you want to wait")
wait_time_int = int(wait_time_str)

final_time_int = current_time_int + wait_time_int
print(final_time_int)
        </input>
<tests>


</tests>

    </program>
            <paragraph>Run the program but instead of typing in anything to the dialog box just click OK. You
                should see the following error message:  <literal>ValueError: invalid literal for int() with
base 10: '' on line: 4</literal> This error is not because you have made a mistake in your
                program. Although sometimes we do want to check the user input to make sure its valid,
                but we don‚Äôt have all the tools we need for that yet. The error happens because the
                user did not give us something we can convert to an integer, instead we gave it an
                empty string. Try running the program again. Now this time enter ‚Äúten‚Äù instead of
                the number 10. You will get a similar error message.</paragraph>
            <paragraph>ValueErrors are not always caused by user input error, but in this program that is the
                case. We‚Äôll look again at ValueErrors again when we get to more complicated programs.
                For now it is worth repeating that you need to keep track of the restrictions needed
                for your variables, and understand what your function is expecting. You can do this by
                writing comments in your code, or by naming your variables in a way that reminds you of
                their proper form.</paragraph>
        </section>
    </section>
</document>
