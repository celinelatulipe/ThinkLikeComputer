<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Labs/Week5Lab copy.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Week5Lab copy-source.html">Week5Lab copy</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Celine Latulipe.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="week-5-lab" names="week\ 5\ lab">
        <title>Week 5 Lab</title>
        <admonition classes="admonition-material-covered">
            <title>Material Covered</title>
            <paragraph>Basic functions, listener functions and reading in files (Chapter 5)</paragraph>
        </admonition>
        <section ids="level-1" names="level\ 1">
            <title>Level 1</title>
            <paragraph>The following function is missing a docstring with pre and post conditions. The objective of this level is to add the missing docstring.</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Add the missing docstring. You are to find out what is needed for the function to run (aka pre-conditions) and what the output will be/how the program will be altered by running the function (aka post-conditions). You do not need to add or delete any code in this level, only add the docstring.</paragraph>
                </list_item>
            </enumerated_list>
            <tip>
                <paragraph>There are 3 pre-conditions and 2 post conditions</paragraph>
            </tip>
            <system_message level="3" line="29" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Labs/Week5Lab copy.rst" type="ERROR">
                <paragraph>Duplicate ID – see Labs/Week5Lab, line 36</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">.. activecode:: lab5_level1
    :nocodelens:

    ################################################################
    # Student name, ID &amp; lab section
    # Date
    # Lab 5, Level 1
    ################################################################

    import turtle

    wn = turtle.Screen()
    alexander = turtle.Turtle()
    alexander.speed(10)

    def axis():
      """--ADD DOCSTRING AND CONDITIONS HERE--"""

      alexander.forward(200)
      alexander.backward(400)
      home()
      alexander.left(90)
      alexander.forward(200)
      alexander.backward(400)
      home()

    def home():

      alexander.goto(0,0)

    alexander.color("red")

    alexander.pendown()

    axis()

</literal_block>
            </system_message>
        </section>
        <section ids="level-2" names="level\ 2">
            <title>Level 2</title>
            <paragraph>In this level you will create a turtle function that will draw a random line in the window when a key is pressed.</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>The starter code below imports modules and creates a window and a turtle.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create a function called <literal>goto_random()</literal>. Inside this function, create two variables to store random x and y coordinates. Assign these variables random values that range from -200 to 200 (these are left/bottom and right/top window edges). Use the randrange() function to get random numbers.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Add a goto() statement that will send the turtle kyra to a random spot in the window, using the variables from the previous step.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Create another function called <literal>reset()</literal>. This function should return the turtle to the center of the window and clear all the pen lines that the turtle has drawn.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>At the bottom of the program, call the reset function. This ensures the turtle window pops up, since a turtle command is called.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Under the reset function call, register the two functions so that they respond to the correct user key presses. The reset() function should be called when the r key is pressed and the goto_random() function should be called when the f key is pressed.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Finally, add the wn.listen() command at the end. This must be the last line.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Test to make sure this works. Click in the window, then hit the ‘f’ key a few times to make sure the turtle moves around. Then hit the ‘r’ key to ensure the turtle returns to the center and all the lines disappear.</paragraph>
                </list_item>
            </enumerated_list>
            <tip>
                <paragraph>Reference the textbook, Section 5.5 on listener functions if you have difficulty with the syntax for setting up the key press listeners.</paragraph>
            </tip>
            <system_message level="3" line="84" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Labs/Week5Lab copy.rst" type="ERROR">
                <paragraph>Duplicate ID – see Labs/Week5Lab, line 91</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">.. activecode:: lab5_level2
    :nocodelens:

    ################################################################
    # Student name, ID &amp; lab section
    # Date
    # Lab 5, Level 2
    ################################################################

    import turtle #imports the turtle library
    import random #imports the random library

    wn = turtle.Screen() #creates a graphic window

    #-----Add your code below-----------

    kyra = turtle.Turtle()
</literal_block>
            </system_message>
            <paragraph>Below is a clip of how your program should work.</paragraph>
        </section>
        <section ids="level-3" names="level\ 3">
            <title>Level 3</title>
            <paragraph>This level is similar to Level 2, except instead of getting random coordinates in response to key presses, you will read a file containing turtle coordinates and then send a turtle around the window using those specific coordinates.</paragraph>
            <tip>
                <paragraph>Take a look at how the file is formatted before you start to code. The coordinate file is shown at the bottom of this page.</paragraph>
            </tip>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>The provided code sets up a world and a turtle, and opens the file with the coordinates for reading. Run the code to make sure it works. Nothing happens yet.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Iterate through each line of the file. See Section 5.9 in the textbook for how to write a for loop that does this, in particular, look at activity 5.9.3 as an example. For each line, do the following:</paragraph>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph>Split up the coordinates (assign them to a variable called coords)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Access the two elements of coords (using coords[0] and coords[1]), using them in a goto() function to send the turtle to those coordinates</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Print out the following message to the console: “Going to: &lt;xcoordinate&gt; &lt;ycoordinate&gt;”.</paragraph>
                        </list_item>
                    </enumerated_list>
                </list_item>
                <list_item>
                    <paragraph>Once you have written this code, run it to make sure that the turtle does a walk through the coordinates and the coordinates print out to the console.</paragraph>
                </list_item>
            </enumerated_list>
            <system_message level="3" line="123" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Labs/Week5Lab copy.rst" type="ERROR">
                <paragraph>Duplicate ID – see Labs/Week5Lab, line 139</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">.. activecode:: lab5_level3
    :nocodelens:
    :available_files: turtle_coords.txt

    ################################################################
    # Student name, ID &amp; lab section
    # Date
    # Lab 5, Level 3
    ################################################################

    import turtle #iddmports the turtle library

    wn = turtle.Screen() #creates a graphic window
    asif = turtle.Turtle()


    fileref = open("turtle_coords.txt", "r")

    #-----Add your code below-----------


    fileref.close()
</literal_block>
            </system_message>
            <paragraph>Your output should look like this:</paragraph>
            <image align="center" candidates="{'*': 'Labs/Figures/turtle_coords_output.png'}" uri="Labs/Figures/turtle_coords_output.png" width="500"></image>
            <system_message level="3" line="152" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Labs/Week5Lab copy.rst" type="ERROR">
                <paragraph>Duplicate ID – see Labs/Week5Lab, line 168</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">.. datafile:: turtle_coords.txt

   10 125
   -45 67
   67 42
   -20 -180
   173 -2
   16 194
   -87 91
   0 -63


</literal_block>
            </system_message>
        </section>
    </section>
</document>
