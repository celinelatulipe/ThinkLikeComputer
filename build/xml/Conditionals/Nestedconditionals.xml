<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Nestedconditionals.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Nestedconditionals-source.html">Nestedconditionals</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'nested\ conditionals',\ 'index-0',\ '',\ None] ['single',\ 'conditional;\ nested',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="nested-conditionals index-0" names="nested\ conditionals">
        <title>Nested conditionals</title>
        <paragraph>One conditional can also be <strong>nested</strong> within another. For example, assume we have two integer variables, <literal>x</literal> and
            <literal>y</literal>. The following pattern of selection shows how we might decide how they are related to each other.</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">if x &lt; y:
    print("x is less than y")
else:
    if x &gt; y:
        print("x is greater than y")
    else:
        print("x and y must be equal")</literal_block>
        <paragraph>The outer conditional contains two branches.
            The second branch (the else from the outer) contains another <literal>if</literal> statement, which
            has two branches of its own. Those two branches could contain
            conditional statements as well.</paragraph>
        <paragraph>The flow of control for this example can be seen in this flowchart illustration.</paragraph>
        <image candidates="{'*': 'Conditionals/Figures/flowchart_nested_conditional.png'}" uri="Conditionals/Figures/flowchart_nested_conditional.png"></image>
        <paragraph>Here is a complete program that defines values for <literal>x</literal> and <literal>y</literal>.  Run the program and see the result.  Then change the values of the variables to change the flow of control.</paragraph>

    <program label="ac6_8_1" interactive='activecode' language="python">
    
        <input>
x = 10
y = 10

if x &lt; y:
    print("x is less than y")
else:
    if x &gt; y:
        print("x is greater than y")
    else:
        print("x and y must be equal")
        </input>
<tests>


</tests>

    </program>
        <note>
            <paragraph>In some programming languages, matching the if and the else is a problem. However, in Python this is not
                the case. The indentation pattern tells us exactly which else belongs to which if.</paragraph>
        </note>
        <paragraph>If you are still a bit unsure, here is the same selection as part of a codelens example.  Step through it to see how the correct <literal>print</literal> is chosen.</paragraph>

<program label="clens6_8_1" interactive="codelens" language="python">
    <input>
x = 10
y = 10

if x &lt; y:
    print("x is less than y")
else:
    if x > y:
        print("x is greater than y")
    else:
        print("x and y must be equal")
    </input>
</program>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question6_8_1">
        <statement>

        <paragraph>Will the following code cause an error?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">x = -10
if x &lt; 0:
    print("The negative number ",  x, " is not valid here.")
else:
    if x &gt; 0:
        print(x, " is a positive number")
    else:
        print(x," is 0")</literal_block>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>No</p>
                </statement>
                <feedback>
                    <p>This is a legal nested if-else statement.  The inner if-else statement is contained completely within the body of the outer else-block.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Yes</p>
                </statement>
                <feedback>
                    <p>This is a legal nested if-else statement.  The inner if-else statement is contained completely within the body of the outer else-block.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
