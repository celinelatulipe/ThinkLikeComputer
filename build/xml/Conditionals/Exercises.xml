<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Exercises-source.html">Exercises</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <paragraph></paragraph>
    <section ids="exercises" names="exercises">
        <title>Exercises</title>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <TabbedStuffNode divid="q1" line="17" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q1', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_1">
    <statement>
                        <paragraph>Write code that asks the user to enter a numeric score (0-100). In response, it should print out the score and corresponding letter grade, according to the table below.</paragraph>
                        <table>
                            <tgroup cols="2">
                                <colspec colwidth="7"></colspec>
                                <colspec colwidth="5"></colspec>
                                <thead>
                                    <row>
                                        <entry>
                                            <paragraph>Score</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>Grade</paragraph>
                                        </entry>
                                    </row>
                                </thead>
                                <tbody>
                                    <row>
                                        <entry>
                                            <paragraph>&gt;= 90</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>A</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>[80-90)</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>B</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>[70-80)</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>C</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>[60-70)</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>D</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>&lt; 60</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>F</paragraph>
                                        </entry>
                                    </row>
                                </tbody>
                            </tgroup>
                        </table>
                        <paragraph>The square and round brackets denote closed and open intervals.
                            A closed interval includes the number, and open interval excludes it. So 79.99999 gets grade C , but 80 gets grade B.</paragraph>

    </statement>
    <program label="ac6_13_1_editor" interactive='activecode' language="python">

        <input>
scores = [77.51, 92.86, 98.01, 69.71, 78.52, 59.69, 60.49, 85.04, 87.33, 91.04]

        </input>
<tests>
from unittest.gui import TestCaseGui
import re
import math
class myTests(TestCaseGui):
    def testOne(self):
        output = self.getOutput().split('\n')
        editor = self.getEditorText().split('\n')
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
        _grades=[]
        for score in scores:
            _score = float(score)
            if _score &gt;= 90:
                _grades.append('A')
            elif _score &gt;= 80:
                _grades.append('B')
            elif _score &gt;= 70:
                _grades.append('C')
            elif _score &gt;= 60:
                _grades.append('D')
            else:
                _grades.append('F')

        self.assertEqual(grades, _grades)
        # hardcode check
        # LOOK FOR IF STATEMENTS
        outer_ifs = re.findall(r'^(if[ (].*: *)$', self.getEditorText(), re.M)
        outer_elifs = re.findall(r'^(elif[ (].*: *)$', self.getEditorText(), re.M)
        outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
        inner_ifs = re.findall(r'^( +if[ (].*: *)$', self.getEditorText(), re.M)
        inner_elifs = re.findall(r'^( +elif[ (].*: *)$', self.getEditorText(), re.M)
        inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_ifs)==0 and len(outer_elifs)==0 and len(outer_elses)==0 and
                        len(inner_ifs)==1 and len(inner_elifs)==3 and len(inner_elses)==1,
                'Checking if-statements')
        # LOOK FOR for STATEMENTS
        outer_loops = re.findall(r'^(for[ (].* in.*: *)$', self.getEditorText(), re.M)
        inner_loops = re.findall(r'^( +for[ (].* in.*: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_loops)==1 and len(inner_loops)==0, 'Checking for-statements')
myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                    <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

    <program label="ans6_13_1" interactive='activecode' language="python">
    
        <input>
sc = input("Enter a score from 0 to 100 (decimal points are allowed)")
fl_sc = float(sc)

if fl_sc &lt; 60:
    gr = "F"
elif fl_sc &lt; 70:
    gr = "D"
elif fl_sc &lt; 80:
    gr = "C"
elif fl_sc &lt; 90:
    gr = "B"
else:
    gr = "A"

print("Score", fl_sc, "gets a grade of", gr)
        </input>
<tests>


</tests>

    </program>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q2" line="106" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q2', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_2">
    <statement>
                        <paragraph>A year is a <strong>leap year</strong> if it is divisible by 4; however, if the year can be evenly divided by 100, it is NOT a leap year, unless the year is <strong>also</strong> evenly divisible by 400 then it is a leap year. Write code that asks the user to input a year and output True if it’s a leap year, or False otherwise. Use if statements.</paragraph>
                        <table>
                            <tgroup cols="2">
                                <colspec colwidth="7"></colspec>
                                <colspec colwidth="5"></colspec>
                                <thead>
                                    <row>
                                        <entry>
                                            <paragraph>Year</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>Leap?</paragraph>
                                        </entry>
                                    </row>
                                </thead>
                                <tbody>
                                    <row>
                                        <entry>
                                            <paragraph>1944</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>True</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>2011</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>False</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>1986</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>False</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>1800</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>False</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>1900</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>False</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>2000</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>True</paragraph>
                                        </entry>
                                    </row>
                                    <row>
                                        <entry>
                                            <paragraph>2056</paragraph>
                                        </entry>
                                        <entry>
                                            <paragraph>True</paragraph>
                                        </entry>
                                    </row>
                                </tbody>
                            </tgroup>
                        </table>
                        <paragraph>Above are some examples of what the output should be for various inputs.</paragraph>

    </statement>
    <program label="ac6_13_2_editor" interactive='activecode' language="python">

        <input>

years = [1967, 1900, 1400, 1628, 1701, 1217, 1359, 1300, 2000, 1054,
1724, 1000, 1800, 1100, 2100, 1023, 1600, 1500, 1358, 1160,
1700, 1744, 2009, 1200]

        </input>
<tests>
from unittest.gui import TestCaseGui
import re
import math
class myTests(TestCaseGui):
    def testOne(self):
        output = self.getOutput().split('\n')
        editor = self.getEditorText().split('\n')
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'

        _is_leap_year = []
        for _year in years:
            if _year % 4 == 0 :
                if _year % 100 == 0:
                    _is_leap_year.append( _year % 400 == 0)
                else:
                    _is_leap_year.append(True)
            else:
                _is_leap_year.append(False)

        self.assertEqual(is_leap_year, _is_leap_year, 'Checking answer')

        # hardcode check
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
        print_float_re = r'print\( *'+float_re+' *\)'
        self.assertFalse(re.search(print_float_re, self.getEditorText()), 'Checking for hardcoding')
        # LOOK FOR IF STATEMENTS
        outer_ifs = re.findall(r'^(if[ (].*: *)$', self.getEditorText(), re.M)
        outer_elifs = re.findall(r'^(elif[ (].*: *)$', self.getEditorText(), re.M)
        outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
        inner_ifs = re.findall(r'^( +if[ (].*: *)$', self.getEditorText(), re.M)
        inner_elifs = re.findall(r'^( +elif[ (].*: *)$', self.getEditorText(), re.M)
        inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_ifs)==0 and len(outer_elifs)==0 and len(outer_elses)==0 and len(inner_ifs)&gt;=1 and len(inner_elifs)&gt;=0 and len(inner_elses)&gt;=0, 'Checking if-statements')
        # LOOK FOR for STATEMENTS
        outer_loops = re.findall(r'^(for[ (].* in.*: *)$', self.getEditorText(), re.M)
        inner_loops = re.findall(r'^( +for[ (].* in.*: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_loops)==1 and len(inner_loops)==0, 'Checking for-statements')
myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q3" line="179" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q3', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_3">
    <statement>
                        <paragraph>What do these expressions evaluate to?</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph><literal>3 == 3</literal></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>3 != 3</literal></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>3 &gt;= 4</literal></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>not (3 &lt; 4)</literal></paragraph>
                            </list_item>
                        </enumerated_list>

    </statement>
    <program label="ac6_13_3_editor" interactive='activecode' language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program>
</exercise>
                    </TabNode>
                    <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>True</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>False</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>False</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>False</paragraph>
                            </list_item>
                        </enumerated_list>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q4" line="204" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q4', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_4">
    <statement>
                        <paragraph>Give the <strong>logical opposites</strong> of these conditions, meaning an expression that would
                            produce False whenever this expression produces True, and vice versa.  You are not
                            allowed to use the <literal>not</literal> operator.</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph><literal>a &gt; b</literal></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>a &gt;= b</literal></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>a &gt;= 18  and  day == 3</literal></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>a &gt;= 18  or  day != 3</literal></paragraph>
                            </list_item>
                        </enumerated_list>

    </statement>
    <program label="ac6_13_4_editor" interactive='activecode' language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q5" line="222" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q5', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_5">
    <statement>
                        <paragraph>Provided are the lengths of two sides of a right-angled triangle. Assign the length of the hypotenuse the the variable <literal>hypo_len</literal>.  (Hint:  <literal>x ** 0.5</literal> will return the square root, or use <literal>sqrt</literal> from the math module)</paragraph>

    </statement>
    <program label="ac6_13_5_editor" interactive='activecode' language="python">

        <input>

side1 = 3
side2 = 4

        </input>
<tests>

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(hypo_len,5,"Testing that hypo_len has been set correctly")

myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q6" line="246" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q6', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_6">
    <statement>
                        <paragraph>Provided is a list of numbers. For each of the numbers in the list, determine whether they are even. If the number is even, add <literal>True</literal> to a new list called <literal>is_even</literal>. If the number is odd, then add <literal>False</literal>.</paragraph>

    </statement>
    <program label="ac6_13_6_editor" interactive='activecode' language="python">

        <input>
num_lst = [3, 20, -1, 9, 10]

        </input>
<tests>

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
     def testOne(self):
         self.assertEqual(is_even, [False, True, False, False, True],"Testing that is_even is set correctly.")

myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q7" line="271" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q7', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_7">
    <statement>
                        <paragraph>Provided is a list of numbers. For each of the numbers in the list, determine whether they are odd. If the number is odd, add <literal>True</literal> to a new list called <literal>is_odd</literal>. If the number is even, then add <literal>False</literal>.</paragraph>

    </statement>
    <program label="ac6_13_7_editor" interactive='activecode' language="python">

        <input>
num_lst = [3, 20, -1, 9, 10]


        </input>
<tests>
from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(is_odd, [True, False, True, True, False],"Testing that is_odd is set correctly.")

        # LOOK FOR IF STATEMENTS
        outer_ifs = re.findall(r'^(if[ (].*: *)$', self.getEditorText(), re.M)
        outer_elifs = re.findall(r'^(elif[ (].*: *)$', self.getEditorText(), re.M)
        outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
        inner_ifs = re.findall(r'^( +if[ (].*: *)$', self.getEditorText(), re.M)
        inner_elifs = re.findall(r'^( +elif[ (].*: *)$', self.getEditorText(), re.M)
        inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_ifs)==0 and len(outer_elifs)==0 and len(outer_elses)==0 and len(inner_ifs)==1 and len(inner_elifs)==0 and len(inner_elses)==1, 'Checking if-statements')

myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q8" line="305" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q8', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_8">
    <statement>
                        <paragraph>Given the lengths of three sides of a triange, determine whether the triangle is right angled. If it is, the assign <literal>True</literal> to the variable <literal>is_rightangled</literal>. If it’s not, then assign <literal>False</literal> to the variable <literal>is_rightangled</literal>.</paragraph>
                        <paragraph>Hint: floating point arithmetic is not always exactly accurate,
                            so it is not safe to test floating point numbers for equality.
                            If a good programmer wants to know whether
                            <literal>x</literal> is equal or close enough to <literal>y</literal>, they would probably code it up as</paragraph>
                        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">if  abs(x - y) &lt; 0.001:      # if x is approximately equal to y
    ...</literal_block>

    </statement>
    <program label="ac6_13_8_editor" interactive='activecode' language="python">

        <input>
a = 5
b = 6
c = 8

        </input>
<tests>
from unittest.gui import TestCaseGui
import re
import math
class myTests(TestCaseGui):
    def testOne(self):
        output = self.getOutput().split('\n')
        editor = self.getEditorText().split('\n')
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'

        _is_rightangled = False
        if abs(a**2 + b**2 - c**2) &lt; 1e-7:
            _is_rightangled = True
        elif abs(a**2 - b**2 + c**2) &lt; 1e-7:
            _is_rightangled = True
        elif abs(-a**2 + b**2 + c**2) &lt; 1e-7:
            _is_rightangled = True

        self.assertEqual(is_rightangled, _is_rightangled, 'Checking answer')

        # hardcode check
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
        print_float_re = r'print\( *'+float_re+' *\)'
        self.assertFalse(re.search(print_float_re, self.getEditorText()), 'Checking for hardcoding')
            # LOOK FOR IF STATEMENTS
        outer_ifs = re.findall(r'^(if[ (].*: *)$', self.getEditorText(), re.M)
        outer_elifs = re.findall(r'^(elif[ (].*: *)$', self.getEditorText(), re.M)
        outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
        inner_ifs = re.findall(r'^( +if[ (].*: *)$', self.getEditorText(), re.M)
        inner_elifs = re.findall(r'^( +elif[ (].*: *)$', self.getEditorText(), re.M)
        inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_ifs)&gt;=1 and len(outer_elifs)&gt;=0 and len(outer_elses)&gt;=0 and
                        len(inner_ifs)&gt;=0 and len(inner_elifs)&gt;=0 and len(inner_elses)&gt;=0,
                'Checking if-statements')
        # LOOK FOR for STATEMENTS
        outer_loops = re.findall(r'^(for[ (].* in.*: *)$', self.getEditorText(), re.M)
        inner_loops = re.findall(r'^( +for[ (].* in.*: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_loops)&gt;=0 and len(inner_loops)&gt;=0, 'Checking for-statements')
myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q9" line="370" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q9', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac6_13_9">
    <statement>
                        <paragraph>Implement the calculator for the date of Easter.</paragraph>
                        <paragraph>The following algorithm computes the date for Easter Sunday for any year between 1900 to 2099.</paragraph>
                        <paragraph>Ask the user to enter a year.
                            Compute the following:</paragraph>
                        <block_quote>
                            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                                <list_item>
                                    <paragraph>a = year % 19</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>b = year % 4</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>c = year % 7</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>d = (19 * a + 24) % 30</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>e = (2 * b + 4 * c + 6 * d + 5) % 7</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>dateofeaster = 22 + d + e</paragraph>
                                </list_item>
                            </enumerated_list>
                        </block_quote>
                        <paragraph>Special note: The algorithm can give a date in April.  You will know that the date is in April if the calculation gives you an answer greater than 31.  (You’ll need to adjust)  Also, if the year is one of four special
                            years (1954, 1981, 2049, or 2076) then subtract 7 from the date.</paragraph>
                        <paragraph>Your program should print an error message if the user provides a date that is out of range.</paragraph>

    </statement>
    <program label="ac6_13_9_editor" interactive='activecode' language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program>
</exercise>
                    </TabNode>
                    <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

    <program label="answer_ex_6_13" interactive='activecode' language="python">
    
        <input>
year = int(input("Please enter a year"))
if year &gt;= 1900 and year &lt;= 2099:
    a = year % 19
    b = year % 4
    c = year % 7
    d = (19*a + 24) % 30
    e = (2*b + 4*c + 6*d + 5) % 7
    dateofeaster = 22 + d + e

    if year == 1954 or year == 2981 or year == 2049 or year == 2076:
        dateofeaster = dateofeaster - 7

    if dateofeaster &gt; 31:
        print("April", dateofeaster - 31)
    else:
        print("March", dateofeaster)
else:
    print("ERROR...year out of range")
        </input>
<tests>


</tests>

    </program>
                    </TabNode>
                    <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                        <DisqusNode line="424" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_2dfd6acf1ca849c2853dad606d1ba255', 'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': ''}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst">
                        </DisqusNode>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q9" line="430" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q9', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Conditionals', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac7_14_10">
    <statement>
                        <paragraph>Get the user to enter some text and print out True if it’s a palindrome, False otherwise. (Hint: Start by reversing the input string, and then use the == operator to compare two values to see if they are the same)</paragraph>

    </statement>
    <program label="ac7_14_10_editor" interactive='activecode' language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
<exercise label='pp6_13_11'   indentation='hide' language='python'><statement>
                <paragraph>Write a program that will print out a greeting to each student in the list. This list should also keep track of how many students have been greeted and note that each time a new student has been greeted. When only one student has entered, the program should say “The first student has entered!”. Afterwards, the program should say “There are {number here} students in the classroom!”.</paragraph>
</statement>
<blocks><block order='4' >
<cline>students = ["Jay", "Stacy", "Iman", "Trisha", "Ahmed", "Daniel", "Shadae", "Tosin", "Charlotte"]</cline>
</block><block order='6' >
<cline>num_students = 0</cline>
</block><block order='1' >
<cline>for student in students:</cline>
</block><block order='2' >
<cline>    print("Welcome to class, " + student)</cline>
<cline>    num_students += 1</cline>
</block><block order='3' >
<cline>    if num_students == 1:</cline>
<cline>        print("The first student has entered!")</cline>
</block><block order='5' >
<cline>    elif num_students > 1:</cline>
<cline>        print("There are " + str(num_students) + " students in the classroom!")</cline>
</block></blocks></exercise>            </list_item>
            <list_item>
<exercise label='pp6_13_12'   indentation='hide' language='python'><statement>
                <paragraph>Piece together a program so that it can successfully print out one print statement, given the value of x.</paragraph>
</statement>
<blocks><block order='4' >
<cline>x = 16</cline>
</block><block order='2' >
<cline>if x > 10:</cline>
</block><block order='3' >
<cline>    if x > 20:</cline>
<cline>        print("This is a large number!")</cline>
</block><block order='1' >
<cline>    else:</cline>
<cline>        print("This is a pretty big number.")</cline>
</block></blocks></exercise>            </list_item>
        </enumerated_list>
    </section>
</document>
