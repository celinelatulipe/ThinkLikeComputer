<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/Theinandnotinoperators.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Theinandnotinoperators-source.html">Theinandnotinoperators</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="the-in-and-not-in-operators" names="the\ in\ and\ not\ in\ operators">
        <title>The <literal>in</literal> and <literal>not in</literal> operators</title>
        <paragraph>The <literal>in</literal> operator tests if one string is a substring of another:</paragraph>

    <program label="ac6_4_1" interactive='activecode' language="python">
    
        <input>
print('p' in 'apple')
print('i' in 'apple')
print('ap' in 'apple')
print('pa' in 'apple')
        </input>
<tests>


</tests>

    </program>
        <paragraph>Note that a string is a substring of itself, and the empty string is a
            substring of any other string. (Also note that computer scientists
            like to think about these edge cases quite carefully!)</paragraph>

    <program label="ac6_4_2" interactive='activecode' language="python">
    
        <input>
print('a' in 'a')
print('apple' in 'apple')
print('' in 'a')
print('' in 'apple')
        </input>
<tests>


</tests>

    </program>
        <paragraph>The <literal>not in</literal> operator returns the logical opposite result of <literal>in</literal>.</paragraph>

    <program label="ac6_4_3" interactive='activecode' language="python">
    
        <input>
print('x' not in 'apple')
        </input>
<tests>


</tests>

    </program>
        <paragraph>We can also use the <literal>in</literal> and <literal>not in</literal> operators on lists!</paragraph>

    <program label="ac4_4_4" interactive='activecode' language="python">
    
        <input>
print("a" in ["a", "b", "c", "d"])
print(9 in [3, 2, 9, 10, 9.0])
print('wow' not in ['gee wiz', 'gosh golly', 'wow', 'amazing'])
        </input>
<tests>


</tests>

    </program>
        <paragraph>However, remember how you were able to check to see if an “a” was in “apple”?
            Let’s try that again to see if there’s an “a” somewhere in the following list.</paragraph>

    <program label="ac6_4_5" interactive='activecode' language="python">
    
        <input>
print("a" in ["apple", "absolutely", "application", "nope"])
        </input>
<tests>


</tests>

    </program>
        <paragraph>Clearly, we can tell that a is in the word apple, and absolutely, and application. For some reason
            though, the Python interpreter returns False. Why is that? When we use the <literal>in</literal> and <literal>not in</literal>
            operators on lists, Python checks to see if the item on the left side of the expression is equivalent
            to an element in the item on the right side of the expression. In this case, Python is checking
            whether or not an element of the list is the string “a” - nothing more or less than that.</paragraph>
    </section>
</document>
