<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/BooleanValuesandBooleanExpressions.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="BooleanValuesandBooleanExpressions-source.html">BooleanValuesandBooleanExpressions</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'True',\ 'index-0',\ '',\ None] ['single',\ 'False',\ 'index-0',\ '',\ None] ['single',\ 'boolean\ value',\ 'index-0',\ '',\ None] ['single',\ 'comparison;\ numbers',\ 'index-0',\ '',\ None] ['single',\ '&lt;;\ numbers',\ 'index-0',\ '',\ None] ['single',\ '&lt;=;\ numbers',\ 'index-0',\ '',\ None] ['single',\ '&gt;;\ numbers',\ 'index-0',\ '',\ None] ['single',\ '&gt;=;\ numbers',\ 'index-0',\ '',\ None] ['single',\ '==;\ numbers',\ 'index-0',\ '',\ None] ['single',\ '!=;\ numbers',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="boolean-values-and-boolean-expressions index-0" names="boolean\ values\ and\ boolean\ expressions">
        <title>Boolean Values and Boolean Expressions</title>

    <video xml:id="booleanexpressions" youtube="Y6CwThhquQs" width="560" />
            <paragraph>The Python type for storing true and false values is called <literal>bool</literal>, named
            after the British mathematician, George Boole. George Boole created <emphasis>Boolean
                Algebra</emphasis>, which is the basis of all modern computer arithmetic.</paragraph>
        <paragraph>There are only two <strong>boolean values</strong>.  They are <literal>True</literal> and <literal>False</literal>.  Capitalization
            is important, since <literal>true</literal> and <literal>false</literal> are not boolean values (remember Python is case
            sensitive).</paragraph>

    <program label="ac6_2_1" interactive='activecode' language="python">
    
        <input>
print(True)
print(type(True))
print(type(False))
        </input>
<tests>


</tests>

    </program>
        <note>
            <paragraph>Boolean values are not strings!</paragraph>
            <paragraph>It is extremely important to realize that True and False are not strings.   They are not
                surrounded by quotes.  They are the only two values in the data type <literal>bool</literal>.  Take a close look at the
                types shown below.</paragraph>
        </note>

    <program label="ac6_2_2" interactive='activecode' language="python">
    
        <input>
print(type(True))
print(type("True"))
        </input>
<tests>


</tests>

    </program>
        <paragraph>A <strong>boolean expression</strong> is an expression that evaluates to a boolean value.
            The equality operator, <literal>==</literal>, compares two values and produces a boolean value related to whether the
            two values are equal to one another.</paragraph>

    <program label="ac6_2_3" interactive='activecode' language="python">
    
        <input>
print(5 == 5)
print(5 == 6)
        </input>
<tests>


</tests>

    </program>
        <paragraph>In the first statement, the two operands are equal, so the expression evaluates
            to <literal>True</literal>.  In the second statement, 5 is not equal to 6, so we get <literal>False</literal>.</paragraph>
        <paragraph>The <literal>==</literal> operator is one of six common <strong>comparison operators</strong>; the others are:</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">x != y               # x is not equal to y
x &gt; y                # x is greater than y
x &lt; y                # x is less than y
x &gt;= y               # x is greater than or equal to y
x &lt;= y               # x is less than or equal to y</literal_block>
        <paragraph>Although these operations are probably familiar to you, the Python symbols are
            different from the mathematical symbols. A common error is to use a single
            equal sign (<literal>=</literal>) instead of a double equal sign (<literal>==</literal>). Remember that <literal>=</literal>
            is an assignment operator and <literal>==</literal> is a comparison operator. Also, there is
            no such thing as <literal>=&lt;</literal> or <literal>=&gt;</literal>.</paragraph>
        <comment xml:space="preserve">With reassignment it is especially important to distinguish between an</comment>
        <comment xml:space="preserve">assignment statement and a boolean expression that tests for equality.</comment>
        <comment xml:space="preserve">Because Python uses the equal token (``=``) for assignment,</comment>
        <comment xml:space="preserve">it is tempting to interpret a statement like</comment>
        <comment xml:space="preserve">``a = b`` as a boolean test.  Unlike mathematics, it is not!  Remember that the Python token</comment>
        <comment xml:space="preserve">for the equality operator is ``==``.</comment>
        <paragraph>Note too that an equality test is symmetric, but assignment is not. For example,
            if <literal>a == 7</literal> then <literal>7 == a</literal>. But in Python, the statement <literal>a = 7</literal>
            is legal and <literal>7 = a</literal> is not. (Can you explain why?)</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question6_2_1">
        <statement>

        <paragraph>Which of the following is a Boolean expression? Select all that apply.</paragraph>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>True</p>
                </statement>
                <feedback>
                    <p>True and False are both Boolean literals.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>3 == 4</p>
                </statement>
                <feedback>
                    <p>The comparison between two numbers via == results in either True or False (in this case False), both Boolean values.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>3 + 4</p>
                </statement>
                <feedback>
                    <p>3+4 evaluates to 7, which is a number, not a Boolean value.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>3 + 4 == 7</p>
                </statement>
                <feedback>
                    <p>3+4 evaluates to 7.  7 == 7 then evaluates to True, which is a Boolean value.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>&quot;False&quot;</p>
                </statement>
                <feedback>
                    <p>With the double quotes surrounding it, False is interpreted as a string, not a Boolean value. If the quotes had not been included, False alone is in fact a Boolean value.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
