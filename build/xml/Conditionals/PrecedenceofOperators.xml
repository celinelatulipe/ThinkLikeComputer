<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/PrecedenceofOperators.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="PrecedenceofOperators-source.html">PrecedenceofOperators</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'conditional\ branching',\ 'index-0',\ '',\ None] ['single',\ 'conditional\ execution',\ 'index-0',\ '',\ None] ['single',\ 'if',\ 'index-0',\ '',\ None] ['single',\ 'elif',\ 'index-0',\ '',\ None] ['single',\ 'else',\ 'index-0',\ '',\ None] ['single',\ 'if\ statement',\ 'index-0',\ '',\ None] ['single',\ 'compound\ statement',\ 'index-0',\ '',\ None] ['single',\ 'statement\ block',\ 'index-0',\ '',\ None] ['single',\ 'block',\ 'index-0',\ '',\ None] ['single',\ 'body',\ 'index-0',\ '',\ None] ['single',\ 'pass\ statement',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="precedence-of-operators index-0" names="precedence\ of\ operators">
        <title>Precedence of Operators</title>
        <paragraph>Arithmetic operators take precedence over logical operators. Python will always evaluate the arithmetic operators first (** is highest, then multiplication/division, then addition/subtraction).  Next comes the relational operators.  Finally, the logical operators are done last.  This means that the expression <literal>x*5 &gt;= 10 and y-6 &lt;= 20</literal> will be evaluated so as to first perform the arithmetic and then check the relationships.  The <literal>and</literal> will be done last.  Many programmers might place parentheses around the two relational expressions, <literal>(x*5 &gt;= 10) and (y-6 &lt;= 20)</literal>. This is not necessary, but if often makes it easier for people to read and understand the code.</paragraph>
        <paragraph>The following table summarizes the operator precedence from highest to lowest.  A complete table for the entire language can be found in the <reference name="Python Documentation" refuri="http://docs.python.org/py3k/reference/expressions.html#expression-lists">Python Documentation</reference><target ids="python-documentation" names="python\ documentation" refuri="http://docs.python.org/py3k/reference/expressions.html#expression-lists"></target>.</paragraph>
        <table>
            <tgroup cols="3">
                <colspec colwidth="7"></colspec>
                <colspec colwidth="14"></colspec>
                <colspec colwidth="15"></colspec>
                <thead>
                    <row>
                        <entry>
                            <paragraph>Level</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Category</paragraph>
                        </entry>
                        <entry>
                            <paragraph>Operators</paragraph>
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <paragraph>7(high)</paragraph>
                        </entry>
                        <entry>
                            <paragraph>exponent</paragraph>
                        </entry>
                        <entry>
                            <paragraph>**</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>6</paragraph>
                        </entry>
                        <entry>
                            <paragraph>multiplication</paragraph>
                        </entry>
                        <entry>
                            <paragraph>*,/,//,%</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>5</paragraph>
                        </entry>
                        <entry>
                            <paragraph>addition</paragraph>
                        </entry>
                        <entry>
                            <paragraph>+,-</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>4</paragraph>
                        </entry>
                        <entry>
                            <paragraph>relational</paragraph>
                        </entry>
                        <entry>
                            <paragraph>==,!=,&lt;=,&gt;=,&gt;,&lt;</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>3</paragraph>
                        </entry>
                        <entry>
                            <paragraph>logical</paragraph>
                        </entry>
                        <entry>
                            <paragraph>not</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>2</paragraph>
                        </entry>
                        <entry>
                            <paragraph>logical</paragraph>
                        </entry>
                        <entry>
                            <paragraph>and</paragraph>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <paragraph>1(low)</paragraph>
                        </entry>
                        <entry>
                            <paragraph>logical</paragraph>
                        </entry>
                        <entry>
                            <paragraph>or</paragraph>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <note>
            <paragraph>This workspace is provided for your convenience.  You can use this activecode window to try out anything you like.</paragraph>

    <program label="ac6_5_1" interactive='activecode' language="python">
<prefix>


</prefix>
    
        <input>


        </input>
<tests>


</tests>

    </program>
        </note>
        <admonition classes="admonition-common-mistake">
            <title>Common Mistake!</title>
            <paragraph>Students often incorrectly combine the in and or operators. For example, if they want to check
                that the letter x is inside of either of two variables then they tend to write it the following
                way: <literal>'x' in y or z</literal></paragraph>
            <paragraph>Written this way, the code would not always do what the programmer intended. This is because the
                <literal>in</literal> operator is only on the left side of the or statement. It doesnâ€™t get implemented on both
                sides of the or statement. In order to properly check that x is inside of either variable, the in
                operator must be used on both sides which looks like this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">'x' in y or 'x' in z</literal_block>
        </admonition>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question6_5_1">
        <statement>

        <paragraph>Which of the following properly expresses the  precedence of operators (using parentheses) in the following expression: 5*3 &gt; 10 and 4+6==11</paragraph>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>((5*3) &gt; 10) and ((4+6) == 11)</p>
                </statement>
                <feedback>
                    <p>Yes, * and + have higher precedence, followed by &gt; and ==, and then the keyword &quot;and&quot;</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>(5*(3 &gt; 10)) and (4 + (6 == 11))</p>
                </statement>
                <feedback>
                    <p>Arithmetic operators (*, +) have higher precedence than comparison operators (&gt;, ==)</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>((((5*3) &gt; 10) and 4)+6) == 11</p>
                </statement>
                <feedback>
                    <p>This grouping assumes Python simply evaluates from left to right, which is incorrect.  It follows the precedence listed in the table in this section.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>((5*3) &gt; (10 and (4+6))) == 11</p>
                </statement>
                <feedback>
                    <p>This grouping assumes that &quot;and&quot; has a higher precedence than ==, which is not true.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <paragraph>Here is an animation for the above expression:</paragraph>
<exercise runestone='se_ac6_5_1' />    </section>
</document>
