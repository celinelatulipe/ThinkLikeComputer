<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Conditionals/ConditionalExecutionBinarySelection.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="ConditionalExecutionBinarySelection-source.html">ConditionalExecutionBinarySelection</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'heading',\ 'index-0',\ '',\ None] ['single',\ 'body',\ 'index-0',\ '',\ None] ['single',\ 'selection',\ 'index-0',\ '',\ None] ['single',\ 'if',\ 'index-0',\ '',\ None] ['single',\ 'else',\ 'index-0',\ '',\ None] ['single',\ 'pass',\ 'index-0',\ '',\ None] ['single',\ 'compound\ statement',\ 'index-0',\ '',\ None] ['single',\ 'conditional\ statement',\ 'index-0',\ '',\ None] ['single',\ 'statement;\ if',\ 'index-0',\ '',\ None] ['single',\ 'statement;\ pass',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="conditional-execution-binary-selection index-0" names="conditional\ execution:\ binary\ selection">
        <title>Conditional Execution: Binary Selection</title>

    <video xml:id="binaryselection" youtube="OQ8uakCJ6yE" width="560" />
            <paragraph>In order to write useful programs, we almost always need the ability to check
            conditions and change the behavior of the program accordingly. <strong>Selection statements</strong>, sometimes
            also referred to as <strong>conditional statements</strong>, give us this ability. The simplest form of selection is the <strong>if statement</strong>.
            This is sometimes referred to as <strong>binary selection</strong> since there are two possible paths of execution.</paragraph>

    <program label="ac6_6_1" interactive='activecode' language="python">
    
        <input>
x = 15

if x % 2 == 0:
    print(x, "is even")
else:
    print(x, "is odd")
        </input>
<tests>


</tests>

    </program>
        <paragraph>The syntax for an <literal>if</literal> statement looks like this:</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">if BOOLEAN EXPRESSION:
    STATEMENTS_1        # executed if condition evaluates to True
else:
    STATEMENTS_2        # executed if condition evaluates to False</literal_block>
        <paragraph>The boolean expression after the <literal>if</literal> statement is called the <strong>condition</strong>.
            If it is true, then the indented statements get executed. If not, then the statements
            indented under the <literal>else</literal> clause get executed.</paragraph>
        <comment xml:space="preserve">.. sidebar::</comment>
        <paragraph>Below is a flowchart of an <strong>if</strong> statement with an <strong>else</strong> clause:</paragraph>
        <image candidates="{'*': 'Conditionals/Figures/flowchart_if_else.png'}" uri="Conditionals/Figures/flowchart_if_else.png"></image>
        <paragraph>As with the function definition from the last chapter and other compound
            statements like <literal>for</literal>, the <literal>if</literal> statement consists of a header line and a body. The header
            line begins with the keyword <literal>if</literal> followed by a <emphasis>boolean expression</emphasis> and ends with
            a colon (:).</paragraph>
        <paragraph>The indented statements that follow are called a <strong>block</strong>. The first
            unindented statement marks the end of the block.</paragraph>
        <paragraph>Each of the statements inside the first block of statements is executed in order if the boolean
            expression evaluates to <literal>True</literal>. The entire first block of statements
            is skipped if the boolean expression evaluates to <literal>False</literal>, and instead
            all the statements under the <literal>else</literal> clause are executed.</paragraph>
        <paragraph>There is no limit on the number of statements that can appear under the two clauses of an
            <literal>if</literal> statement, but there has to be at least one statement in each block.</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question6_6_1">
        <statement>

        <paragraph>How many lines of code can appear in the indented code block below the if and else lines in a conditional?</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>Just one.</p>
                </statement>
                <feedback>
                    <p>Each block may also contain more than one.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Zero or more.</p>
                </statement>
                <feedback>
                    <p>Each block must contain at least one statement.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>One or more.</p>
                </statement>
                <feedback>
                    <p>Yes, a block must contain at least one statement and can have many statements.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>One or more, and each must contain the same number.</p>
                </statement>
                <feedback>
                    <p>The blocks may contain different numbers of statements.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question6_6_2">
        <statement>

        <paragraph>What does the following code print? (choose from output a, b, c or nothing)</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">if (4 + 5 == 10):
    print("TRUE")
else:
    print("FALSE")</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>TRUE</p>
                </statement>
                <feedback>
                    <p>TRUE is printed by the if-block, which only executes if the conditional (in this case, 4+5 == 10) is true.  In this case 5+4 is not equal to 10.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>FALSE</p>
                </statement>
                <feedback>
                    <p>Since 4+5==10 evaluates to False, Python will skip over the if block and execute the statement in the else block.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>TRUE on one line and FALSE on the next</p>
                </statement>
                <feedback>
                    <p>Python would never print both TRUE and FALSE because it will only execute one of the if-block or the else-block, but not both.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Nothing will be printed</p>
                </statement>
                <feedback>
                    <p>Python will always execute either the if-block (if the condition is true) or the else-block (if the condition is false).  It would never skip over both blocks.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question6_6_3">
        <statement>

        <paragraph>What does the following code print?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">if (4 + 5 == 10):
    print("TRUE")
else:
    print("FALSE")
print("TRUE")</literal_block>
        <literal_block force="False" language="default" linenos="False" xml:space="preserve">a. TRUE

b.
   TRUE
   FALSE

c.
   FALSE
   TRUE
d.
   TRUE
   FALSE
   TRUE</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>Output a</p>
                </statement>
                <feedback>
                    <p>Although TRUE is printed after the if-else statement completes, both blocks within the if-else statement print something too.  In this case, Python would have had to have skipped both blocks in the if-else statement, which it never would do.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Output b</p>
                </statement>
                <feedback>
                    <p>Because there is a TRUE printed after the if-else statement ends, Python will always print TRUE as the last statement.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>Output c</p>
                </statement>
                <feedback>
                    <p>Python will print FALSE from within the else-block (because 5+4 does not equal 10), and then print TRUE after the if-else statement completes.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Output d</p>
                </statement>
                <feedback>
                    <p>To print these three lines, Python would have to execute both blocks in the if-else statement, which it can never do.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="ac6_6_2">
    <statement>
        <paragraph>Write code to assign the string <literal>"You can apply to SI!"</literal> to <literal>output</literal> <emphasis>if</emphasis> the string <literal>"SI 106"</literal> is in the list <literal>courses</literal>. If it is not in <literal>courses</literal>, assign the value <literal>"Take SI 106!"</literal> to the variable <literal>output</literal>.</paragraph>

    </statement>
    <program label="ac6_6_2_editor" interactive='activecode' language="python">

        <input>
courses = ["ENGR 101", "SI 110", "ENG 125", "SI 106", "CHEM 130"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(output, "You can apply to SI!", "Testing that output has the correct value, given the courses list provided")
      self.assertIn("if", self.getEditorText(), "Testing output (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac6_6_3">
    <statement>
        <paragraph>Create a variable, <literal>b</literal>, and assign it the value of <literal>15</literal>. Then, write code to see if the value <literal>b</literal> is greater than that of <literal>a</literal>. If it is, <literal>a</literal>’s value should be multiplied by 2. If the value of <literal>b</literal> is less than or equal to <literal>a</literal>, nothing should happen. Finally, create variable <literal>c</literal> and assign it the value of the sum of <literal>a</literal> and <literal>b</literal>.</paragraph>

    </statement>
    <program label="ac6_6_3_editor" interactive='activecode' language="python">

        <input>
a = 20

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwoA(self):
      self.assertEqual(a, 20, "Testing that a has the correct value.")

   def testTwoB(self):
      self.assertEqual(c, 35, "Testing that c has the correct value.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>
</document>
