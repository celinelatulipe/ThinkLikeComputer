<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/DisabmiguatingSquareBrackets.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="DisabmiguatingSquareBrackets-source.html">DisabmiguatingSquareBrackets</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="disambiguating-creation-vs-indexing" names="disambiguating\ []:\ creation\ vs\ indexing">
        <title>Disambiguating []: creation vs indexing</title>
        <paragraph>Square brackets <literal>[]</literal> are used in quite a few ways in Python. When you’re first learning how to use them it may be
            confusing, but with practice and repetition they’ll be easy to incorporate!</paragraph>
        <paragraph>You have currently encountered two instances where we have used square brackets. The first is creating lists and the second
            is indexing. At first glance, creating and indexing are difficult to distinguish. However, indexing requires referencing
            an already created list while simply creating a list does not.</paragraph>

    <program label="ac9_3_1" interactive='activecode' language="python">
    
        <input>
my_lst = []
        </input>
<tests>


</tests>

    </program>
        <paragraph>In the code above, a new list is created using the empty brackets. Since there’s nothing in it though, we can’t index into it.</paragraph>

    <program label="ac9_3_2" interactive='activecode' language="python">
    
        <input>
new_lst = ["NFLX", "AMZN", "GOOGL", "DIS", "XOM"]
part_of_new_lst = new_lst[0]
        </input>
<tests>


</tests>

    </program>
        <paragraph>In the code above, both lines use square brackets, but one uses them for list creation and one uses them for indexing. You can differentiate them because with list creation there is nothing between the equal sign and the opening square bracket. On the left side of the equal sign is the variable that the list is being assigned to, and on the right side of the equal sign is the two square brackets with items in the list in between them. On the second line, the square brackets come immediately after a variable name, which tells you that they are indexing into that list variable. Because we have elements inside of <literal>new_lst</literal>, we can index into it.
            In order to extract an element of the list, we use <literal>[]</literal>, but we first have to specify which list we are indexing. Additionally, we have to specify what element we want to extract. This index belongs inside of the brackets.</paragraph>
        <paragraph>The code below shows that naming a variable as a list doesn’t make it a list.</paragraph>

    <program label="ac9_3_3" interactive='activecode' language="python">
    
        <input>
lst = [0]            # using [] to create a new list
n_lst = lst[0]       # using [] to index into a list to retrieve an element

print(type(lst))
print(type(n_lst))

print(lst)
print(n_lst)
        </input>
<tests>


</tests>

    </program>
        <paragraph>Here, we see that the variable <literal>lst</literal> is assigned a list with one element, zero. Then, we see another variable called <literal>n_lst</literal> gets assigned
            the value associated with the first element of lst. Despite the variable names, only one of the above variables is
            assigned to a list.</paragraph>

    <exercise label="question9_3_1">
        <statement>

        <paragraph>Which of the following correctly uses indexing? Assume that <literal>a</literal> is a list or string. Select as many as apply.</paragraph>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>w = [a]</p>
                </statement>
                <feedback>
                    <p>No, due to the way the code was written it creates a list. This list would have one element which is the value assigned to the variable a.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>y = a[]</p>
                </statement>
                <feedback>
                    <p>Though this tries to use indexing, it does not specify what element should be taken from a.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>x = [8]</p>
                </statement>
                <feedback>
                    <p>No, this is an example of creating a list.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>t = a[0]</p>
                </statement>
                <feedback>
                    <p>Yes, this will using indexing to get the value of the first element of a.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>
</document>
