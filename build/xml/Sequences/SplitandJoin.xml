<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/SplitandJoin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="SplitandJoin-source.html">SplitandJoin</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="splitting-and-joining-strings" names="splitting\ and\ joining\ strings">
        <title>Splitting and Joining Strings</title>
        <paragraph>Two of the most useful methods on strings involve lists of strings. The <literal>split</literal> method breaks a string into a list
            of words. By default, any number of whitespace characters is considered a word boundary.</paragraph>
        <image alt='shows the phrase "leaders and best" being split on spaces' candidates="{'*': 'Sequences/Figures/split_default.gif'}" uri="Sequences/Figures/split_default.gif"></image>

    <program label="ac9_8_1" interactive='activecode' language="python">
    
        <input>
song = "The rain in Spain..."
wd_lst = song.split()
print(wd_lst)
        </input>
<tests>


</tests>

    </program>
        <paragraph>An optional argument called a <strong>delimiter</strong> can be used to specify which character(s) to use as word boundaries.</paragraph>
        <image alt='shows example of splitting "leaders and best" on "e"' candidates="{'*': 'Sequences/Figures/split_on_e.jpeg'}" uri="Sequences/Figures/split_on_e.jpeg"></image>
        <paragraph>The following example uses the string <literal>ai</literal> as the delimiter:</paragraph>

    <program label="ac9_8_2" interactive='activecode' language="python">
    
        <input>
song = "The rain in Spain..."
wd_lst = song.split('ai')
print(wd_lst)
        </input>
<tests>


</tests>

    </program>
        <paragraph>Notice that the delimiter doesnâ€™t appear in the result.</paragraph>
        <paragraph>The inverse of the <literal>split</literal> method is <literal>join</literal>.  You choose a
            desired <strong>separator</strong> string, (often called the <emphasis>glue</emphasis>)
            and join the list with the glue between each of the elements.</paragraph>
        <image alt='shows process of a "/" separating the words "leaders", "and", "best"' candidates="{'*': 'Sequences/Figures/join.gif'}" uri="Sequences/Figures/join.gif"></image>

    <program label="ac9_8_3" interactive='activecode' language="python">
    
        <input>
wd_lst = ["red", "blue", "green"]
glue = ';'
s = glue.join(wd_lst)
print(s)
print(wd_lst)

print("***".join(wd_lst))
print("".join(wd_lst))
        </input>
<tests>


</tests>

    </program>
        <paragraph>The list that you glue together (<literal>wd_lst</literal> in this example) is not modified.  Also,
            you can use empty glue (see line 8 above) or multi-character strings (see line 7 above) as glue.</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

<exercise label="ac9_8_4">
    <statement>
        <paragraph>Create a new list of the 6th through 13th elements of <literal>lst</literal> (eight items in all) and assign it to the variable <literal>output</literal>.</paragraph>

    </statement>
    <program label="ac9_8_4_editor" interactive='activecode' language="python">

        <input>
lst = ["swimming", 2, "water bottle", 44, "lollipop", "shine", "marsh", "winter", "donkey", "rain", ["Rio", "Beijing", "London"], [1,2,3], "gold", "bronze", "silver", "mathematician", "scientist", "actor", "actress", "win", "cell phone", "leg", "running", "horse", "socket", "plug", ["Phelps", "le Clos", "Lochte"], "drink", 22, "happyfeet", "penguins"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFour(self):
      self.assertEqual(output, lst[5:13], "Testing that output value is assigned to correct value.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="ac9_8_5">
    <statement>
        <paragraph>Create a variable <literal>output</literal> and assign to it a list whose elements are the words in the string <literal>str1</literal>.</paragraph>

    </statement>
    <program label="ac9_8_5_editor" interactive='activecode' language="python">

        <input>
str1 = "OH THE PLACES YOU'LL GO"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testSix(self):
      self.assertEqual(output, ["OH", "THE", "PLACES", "YOU'LL", "GO"], "Testing that output value is assigned to correct value.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>
</document>
