<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Length.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Length-source.html">Length</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ 'len\ function',\ 'index-0',\ '',\ None] ['single',\ 'function;\ len',\ 'index-0',\ '',\ None] ['single',\ 'runtime\ error',\ 'index-0',\ '',\ None] ['single',\ 'negative\ index',\ 'index-0',\ '',\ None] ['single',\ 'index;\ negative',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="length index-0" names="length">
        <title>Length</title>
        <paragraph>The <literal>len</literal> function, when applied to a string, returns the number of characters in a string.</paragraph>

    <program label="ac9_4_1" interactive='activecode' language="python">
    
        <input>
fruit = "Banana"
print(len(fruit))
        </input>
<tests>


</tests>

    </program>
        <paragraph>To get the last letter of a string, you might be tempted to try something like
            this:</paragraph>

    <program label="ac9_4_2" interactive='activecode' language="python">
    
        <input>
fruit = "Banana"
sz = len(fruit)
last = fruit[sz]       # ERROR!
print(last)
        </input>
<tests>


</tests>

    </program>
        <paragraph>That wonâ€™t work. It causes the runtime error <literal>IndexError: string index out of range</literal>. The reason is
            that there is no letter at index position 6 in <literal>"Banana"</literal>. Since we started counting at zero, the
            six indexes are numbered 0 to 5. To get the last character, we have to subtract 1 from the length.
            Give it a try in the example above.</paragraph>

    <program label="ac9_4_3" interactive='activecode' language="python">
    
        <input>
fruit = "Banana"
sz = len(fruit)
last_ch = fruit[sz-1]
print(last_ch)
        </input>
<tests>


</tests>

    </program>
        <paragraph>Alternatively, in Python we can use <strong>negative indices</strong>, which count backward from the end of the string. The expression <literal>fruit[-1]</literal> yields the last letter, <literal>fruit[-2]</literal> yields the second to last, and so on.  Try it!</paragraph>
        <paragraph>Typically, a Python programmer would combine lines 2 and 3 from the above example into a single line:</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">last_ch = fruit[len(fruit)-1]</literal_block>
        <paragraph>You can use the <literal>len</literal> function to access other predictable indices, like the middle character of a string.:</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">fruit = "grape"
mid_char = fruit[len(fruit)//2]
# the value of mid_char is "a"</literal_block>
        <paragraph>As with strings, the function <literal>len</literal> returns the length of a list (the number of items in the list).
            However, since lists can have items which are themselves sequences (e.g., strings),
            it is important to note that <literal>len</literal> only returns the top-most length.</paragraph>

    <program label="ac9_4_4" interactive='activecode' language="python">
    
        <input>
alist =  ["hello", 2.0, 5]
print(len(alist))
print(len(alist[0]))
        </input>
<tests>


</tests>

    </program>
        <paragraph>Note that <literal>alist[0]</literal> is the string <literal>"hello"</literal>, which has length 5.</paragraph>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question9_4_1">
        <statement>

        <paragraph>What is printed by the following statements?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">s = "python rocks"
print(len(s))</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>11</p>
                </statement>
                <feedback>
                    <p>The blank space counts as a character.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>12</p>
                </statement>
                <feedback>
                    <p>Yes, there are 12 characters in the string.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question9_4_2">
        <statement>

        <paragraph>What is printed by the following statements?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">alist = [3, 67, "cat", 3.14, False]
print(len(alist))</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>len returns the actual number of items in the list, not the maximum index value.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Yes, there are 5 items in this list.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="ac9_4_5">
    <statement>
        <paragraph>Assign the number of elements in <literal>lst</literal> to the variable <literal>output</literal>.</paragraph>

    </statement>
    <program label="ac9_4_5_editor" interactive='activecode' language="python">

        <input>
lst = ["hi", "morning", "dog", "506", "caterpillar", "balloons", 106, "yo-yo", "python", "moon", "water", "sleepy", "daffy", 45, "donald", "whiteboard", "glasses", "markers", "couches", "butterfly", "100", "magazine", "door", "picture", "window", ["Olympics", "handle"], "chair", "pages", "readings", "burger", "juggle", "craft", ["store", "poster", "board"], "laptop", "computer", "plates", "hotdog", "salad", "backpack", "zipper", "ring", "watch", "finger", "bags", "boxes", "pods", "peas", "apples", "horse", "guinea pig", "bowl", "EECS"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(output, 52, "Testing that output value is assigned to correct value.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>
</document>
