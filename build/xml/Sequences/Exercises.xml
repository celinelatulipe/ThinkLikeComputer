<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="Exercises-source.html">Exercises</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <paragraph></paragraph>
    <section ids="exercises" names="exercises">
        <title>Exercises</title>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
<exercise label='pp9_11_1'   indentation='hide' language='python'><statement>
                <paragraph>Write a program that will print out the length of each item in the list as well as the first and last characters of the item.</paragraph>
</statement>
<blocks><block order='2' >
<cline>weather = ["sunny", "cloudy", "partially sunny",</cline>
<cline>           "rainy", "storming", "windy", "foggy",</cline>
<cline>           "snowy", "hailing"]</cline>
</block><block order='1' >
<cline>for condition in weather:</cline>
</block><block order='4' >
<cline>    print("The word is", len(condition), "characters")</cline>
</block><block order='5' >
<cline>    first_char = condition[0]</cline>
<cline>    last_char = condition[-1]</cline>
</block><block order='3' >
<cline>    print("The first character is: " + first_char)</cline>
<cline>    print("The last character is: " + last_char)</cline>
</block></blocks></exercise>            </list_item>
            <list_item>
<exercise label='pp9_11_2'   indentation='hide' language='python'><statement>
                <paragraph>Write code to determine how many tâ€™s are in the following sentences.</paragraph>
</statement>
<blocks><block order='3' >
<cline>phrases = ["My, what a lovely day today is!",</cline>
<cline>"Have you mastered cooking yet? A tasty treat could be in your future.",</cline>
<cline>"Have you ever seen the leaves change color?"]</cline>
</block><block order='2' >
<cline>for sentence in phrases:</cline>
</block><block order='1' >
<cline>    print(sentence.count("t"))</cline>
</block></blocks></exercise>            </list_item>
            <list_item>
                <TabbedStuffNode divid="q6" line="51" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q6', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac9_11_6">
    <statement>
                        <paragraph>Although Python provides us with many list methods, it is good practice and very instructive to think about how they are implemented.  Implement a Python function that works like the following:</paragraph>
                        <enumerated_list enumtype="loweralpha" prefix="" suffix=".">
                            <list_item>
                                <paragraph>count</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>in</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>reverse</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>index</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>insert</paragraph>
                            </list_item>
                        </enumerated_list>

    </statement>
    <program label="ac9_11_6_editor" interactive='activecode' language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program>
</exercise>
                    </TabNode>
                    <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

    <program label="answer9_11_6" interactive='activecode' language="python">
    
        <input>
def count(obj, lst):
    count = 0
    for e in lst:
        if e == obj:
            count = count + 1
    return count

def is_in(obj, lst):  # cannot be called in() because in is a reserved keyword
    for e in lst:
        if e == obj:
            return True
    return False

def reverse(lst):
    reversed = []
    for i in range(len(lst)-1, -1, -1): # step through the original list backwards
        reversed.append(lst[i])
    return reversed

def index(obj, lst):
    for i in range(len(lst)):
        if lst[i] == obj:
            return i
    return -1

def insert(obj, index, lst):
    newlst = []
    for i in range(len(lst)):
        if i == index:
            newlst.append(obj)
        newlst.append(lst[i])
    return newlst

lst = [0, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]
print(count(1, lst))
print(is_in(4, lst))
print(reverse(lst))
print(index(2, lst))
print(insert('cat', 4, lst))
        </input>
<tests>


</tests>

    </program>
                    </TabNode>
                    <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                        <DisqusNode line="112" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_39ee0274e51d4c888cc20b6fefa4069c', 'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': ''}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst">
                        </DisqusNode>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q8" line="118" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q8', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac9_11_8">
    <statement>
                        <paragraph>Write a Python function that will take a list of 100 random integers between 0 and 1000 and return the maximum value.  (Note: there is a builtin function named <literal>max</literal> but pretend you cannot use it.)</paragraph>

    </statement>
    <program label="ac9_11_8_editor" interactive='activecode' language="python">

        <input>
import random as r
lst = []

for i in range(100):
    num = r.randint(1, 1000)
    lst.append(num)

def largest(lst):
    #your code here

        </input>
<tests>
from unittest.gui import TestCaseGui
import re
class myTests(TestCaseGui):
    def testOne(self):
        output = self.getOutput().split('\n')
        editor = self.getEditorText().split('\n')
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'

        self.assertEqual(largest(lst), max(lst), 'Checking for the list'+ str(lst))

        # hardcode check
        self.assertFalse(re.search(r'max', self.getEditorText()), 'Checking for max')
myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                    <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

    <program label="answer9_11_8" interactive='activecode' language="python">
    
        <input>
import random

def max(lst):
    max = 0
    for e in lst:
        if e &gt; max:
            max = e
    return max

lst = []
for i in range(100):
    lst.append(random.randint(0, 1000))

print(max(lst))
        </input>
<tests>


</tests>

    </program>
                    </TabNode>
                    <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                        <DisqusNode line="173" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_714fd5537ebf41189ce5fb6fb16d1d26', 'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': ''}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst">
                        </DisqusNode>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q9" line="179" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q9', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac9_11_9">
    <statement>
                        <paragraph>Write a function <literal>sum_of_squares(xs)</literal> that computes the sum
                            of the squares of the numbers in the list <literal>xs</literal>.  For example,
                            <literal>sum_of_squares([2, 3, 4])</literal> should return 4+9+16 which is 29:</paragraph>

    </statement>
    <program label="ac9_11_9_editor" interactive='activecode' language="python">

        <input>
def sum_of_squares(xs):
    # your code here

        </input>
<tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(sum_of_squares([2,3,4]),29,"Tested sum_of_squares on input [2,3,4]")
        self.assertEqual(sum_of_squares([0,1,-1]),2,"Tested sum_of_squares on input [0,1,-1]")
        self.assertEqual(sum_of_squares([5,12,14]),365,"Tested sum_of_squares on input [5,12,14]")

myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q10" line="206" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q10', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac9_11_10">
    <statement>
                        <paragraph>Write a function to count how many odd numbers are in a list.</paragraph>

    </statement>
    <program label="ac9_11_10_editor" interactive='activecode' language="python">

        <input>
def countOdd(lst):
    # your code here

        </input>
<tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(countOdd([1,3,5,7,9]),5,"Tested countOdd on input [1,3,5,7,9]")
        self.assertEqual(countOdd([1,2,3,4,5]),3,"Tested countOdd on input [-1,-2,-3,-4,-5]")
        self.assertEqual(countOdd([2,4,6,8,10]),0,"Tested countOdd on input [2,4,6,8,10]")
        self.assertEqual(countOdd([0,-1,12,-33]),2,"Tested countOdd on input [0,-1,12,-33]")

myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                    <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

    <program label="answer9_11_10" interactive='activecode' language="python">
    
        <input>
import random

def countOdd(lst):
    odd = 0
    for e in lst:
        if e % 2 != 0:
            odd = odd + 1
    return odd

# make a random list to test the function
lst = []
for i in range(100):
    lst.append(random.randint(0, 1000))

print(countOdd(lst))
        </input>
<tests>


</tests>

    </program>
                    </TabNode>
                    <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                        <DisqusNode line="254" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_fdd366b1b4c8494082a385e1e1197844', 'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': ''}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst">
                        </DisqusNode>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q11" line="261" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q11', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac9_11_11">
    <statement>
                        <paragraph>Sum up all the even numbers in a list.</paragraph>

    </statement>
    <program label="ac9_11_11_editor" interactive='activecode' language="python">

        <input>
def sumEven(lst):
    # your code here

        </input>
<tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testOne(self):
      self.assertEqual(sumEven([1,3,5,7,9]),0,"Tested sumEven on input [1,3,5,7,9]")
      self.assertEqual(sumEven([-1,-2,-3,-4,-5]),-6,"Tested sumEven on input [-1,-2,-3,-4,-5]")
      self.assertEqual(sumEven([2,4,6,7,9]),12,"Tested sumEven on input [2,4,6,7,9]")
      self.assertEqual(sumEven([0,1,12,33]),12,"Tested sumEven on input [0,1,12,33]")

myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
            <list_item>
                <TabbedStuffNode divid="q12" line="287" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst" tabbed_stuff_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'divid': 'q12', 'divclass': 'alert alert-warning'}">
                    <TabNode tabname="Question" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Question'}">

<exercise label="ac9_11_12">
    <statement>
                        <paragraph>Sum up all the negative numbers in a list.</paragraph>

    </statement>
    <program label="ac9_11_12_editor" interactive='activecode' language="python">

        <input>
def sumNegatives(lst):
    # your code here

        </input>
<tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(sumNegatives([-1,-2,-3,-4,-5]),-15,"Tested sumNegatives on input [-1,-2,-3,-4,-5]")
        self.assertEqual(sumNegatives([1,-3,5,-7,9]),-10,"Tested sumNegatives on input [1,-3,5,-7,9]")
        self.assertEqual(sumNegatives([-2,-4,6,-7,9]),-13,"Tested sumNegatives on input [-2,-4,6,-7,9]")
        self.assertEqual(sumNegatives([0,1,2,3,4]),0,"Tested sumNegatives on input [0,1,2,3,4]")

myTests().main()
</tests>

    </program>
</exercise>
                    </TabNode>
                    <TabNode tabname="Answer" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Answer'}">

    <program label="answer9_11_12" interactive='activecode' language="python">
    
        <input>
import random

def sumNegative(lst):
    sum = 0
    for e in lst:
        if e &lt; 0:
            sum = sum + e
    return sum

lst = []
for i in range(100):
    lst.append(random.randrange(-1000, 1000))

print(sumNegative(lst))
        </input>
<tests>


</tests>

    </program>
                    </TabNode>
                    <TabNode tabname="Discussion" tabnode_options="{'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': '', 'tabname': 'Discussion'}">
                        <DisqusNode line="334" runestone_options="{'shortname': 'interactivepython', 'identifier': 'disqus_bfe671ac1e0942f2be4de7179921f83f', 'subchapter': 'Exercises', 'chapter': 'Sequences', 'basecourse': 'FOPP-PIE', 'optional': '', 'optclass': ''}" source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/Exercises.rst">
                        </DisqusNode>
                    </TabNode>
                </TabbedStuffNode>
            </list_item>
        </enumerated_list>
    </section>
</document>
