<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/CountandIndex.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="CountandIndex-source.html">CountandIndex</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="count-and-index-methods" names="count\ and\ index\ methods">
        <title>Count and Index Methods</title>
        <paragraph>You’ve learned about methods before when drawing with the turtle module. There, you used
            <literal>.forward(50)</literal> and <literal>.color("purple")</literal> to complete actions. We refer to forward() and color() as methods
            of the turtle class. Objects like strings, tuples, and lists also have methods that we can use.</paragraph>
        <paragraph>As you create more complex programs, you will find that some tasks are common and Python objects often have
            built-in methods to help you with these tasks. This page will cover two helpful methods
            that can be called on sequence objects like strings, lists and tuples: count() and index().</paragraph>
        <section ids="count" names="count">
            <title>Count</title>
            <paragraph>The first method we’ll talk about is called <literal>count</literal>. You can call the count() method on any string, list, or tuple, by using
                <literal>variable_name.count(&lt;itemtocount&gt;)</literal>. The count() method requires that you provide one argument, which
                is what you would like to count. The method then returns the number of times that the argument occured
                in the string/list/tuple the method was used on. There are some differences between count for strings and
                count for lists. When you use count on a string, the argument can only be a string. You can’t count how
                many times the integer 2 appears in a string, though you can count how many times the string “2” appears
                in a string. For lists and tuples, the argument can be any type: a string, an integer, a floating point number, a boolean value, etc.</paragraph>

    <program label="ac9_7_1" interactive='activecode' language="python">
    
        <input>
a = "I have had an apple on my desk before!"
print(a.count("e"))
print(a.count("ha"))
        </input>
<tests>


</tests>

    </program>
            <paragraph>The activecode window above demonstrates the use of count on a string. Just like with the turtle module
                when we had to specify which turtle was changing color or moving, we have to specify which string we are
                using count on.</paragraph>

    <program label="ac9_7_2" interactive='activecode' language="python">
    
        <input>
z = ['atoms', 4, 'neutron', 6, 'proton', 4, 'electron', 4, 'electron', 'atoms']
print(z.count("4"))
print(z.count(4))
print(z.count("a"))
print(z.count("electron"))
        </input>
<tests>


</tests>

    </program>
            <paragraph>When you run the activecode window above, you’ll see how count with a list works. Notice how “4” has a
                count of zero but 4 has a count of three. This is because the list <literal>z</literal> only contains the integer 4.
                There are no strings in this list that are “4”. Additionally, when we check the count of “a”, we see that the
                program returns zero. Though some of the words in the list <emphasis>contain</emphasis> the letter “a”, the program is
                looking for items in the list that are <emphasis>just</emphasis> the string “a”.</paragraph>
        </section>
        <section ids="index" names="index">
            <title>Index</title>
            <paragraph>The other method that can be helpful for both strings and lists is the <literal>index</literal> method. The <literal>index</literal>
                method requires one argument, and, like the <literal>count</literal> method, it takes only strings when index is used
                on strings, and any type when it is used on lists/tuples. For any sequence type, <literal>index</literal> returns the
                leftmost index where the argument is found. If it is unable to find the argument in the string or list, an error will occur.</paragraph>

    <program label="ac9_7_3" interactive='activecode' language="python">
    
        <input>
music = "Pull out your music and dancing can begin"
bio = ["Metatarsal", "Metatarsal", "Fibula", [], "Tibia", "Tibia", 43, "Femur", "Occipital", "Metatarsal"]

print(music.index("m"))
print(music.index("your"))

print(bio.index("Metatarsal"))
print(bio.index([]))
print(bio.index(43))
        </input>
<tests>


</tests>

    </program>
            <paragraph>All of the above examples work, but were you surprised by any of the return values? Remember that
                <literal>index</literal> will return the left most index of the argument. Even though “Metatarsal” occurs many times
                in <literal>bio</literal>, the method will only return the location of one of them.</paragraph>
            <paragraph>Here’s another example.</paragraph>

    <program label="ac9_7_4" interactive='activecode' language="python">
    
        <input>
seasons = ["winter", "spring", "summer", "fall"]

print(seasons.index("autumn"))  #Error!
        </input>
<tests>


</tests>

    </program>
            <paragraph>In the activecode window above, we’re trying to see where “autumn” is in the list of seasons. However,
                there is no string called autumn (though there is a string called “fall” which is likely what the program
                is looking for). Remember that an error occurs if the argument is not in the string or list. This seems problematic:
                it seems like you can’t ask for the index of something in a list/tuple without potentially causing your program to crash. The
                solution to this is to first use the <strong>in</strong> operator to check if the item exists in the sequence, and then, if it does, ask for the index. See the above example modified below:</paragraph>

    <program label="ac9_7_5" interactive='activecode' language="python">
    
        <input>
seasons = ["winter", "spring", "summer", "fall"]

if "autumn" in seasons:
     print(seasons.index("autumn"))
else:
     print('"autumn" is not in the list of seasons.')
        </input>
<tests>


</tests>

    </program>
            <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question9_7_1">
        <statement>

            <paragraph>What will be stored in the variable ty below?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">qu = "wow, welcome week!"
ty = qu.index("we")</literal_block>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Yes, when we get the index of a string that is longer than one character, we get the index for the first character in the string.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>6</p>
                </statement>
                <feedback>
                    <p>When we get the index of a string that is longer than one character, we get the index for the first character in the string.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>13</p>
                </statement>
                <feedback>
                    <p>Remember that index returns the left most occurance of the argument.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>14</p>
                </statement>
                <feedback>
                    <p>Remember that index returns the left most occurance of the argument.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>There is an error.</p>
                </statement>
                <feedback>
                    <p>There is at least one 'we' in the string assigned to qu.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question9_7_2">
        <statement>

            <paragraph>What will be stored in the variable ty below?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">qu = "wow, welcome week! Were you wanting to go?"
ty = qu.count("we")</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>No, there is at least one e in the string.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>Yes, there is a difference between "we" and "We" which means there are only two in the string.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>there is a difference between "we" and "We".</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>There is an error.</p>
                </statement>
                <feedback>
                    <p>There is no error in the code.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question9_7_3">
        <statement>

            <paragraph>What will be stored in the variable ht below?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">rooms = ['bathroom', 'kitchen', 'living room', 'bedroom', 'closet', "foyer"]
ht = rooms.index("garden")</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>No, the first element is 'bathroom', not 'garden'.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>-1</p>
                </statement>
                <feedback>
                    <p>Though there is no 'garden' in the list, we do not get back -1 when we use index. Instead, we get an error.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>There is an error.</p>
                </statement>
                <feedback>
                    <p>Yes, there is no 'garden' in the list, so we get back an error.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </section>
    </section>
</document>
