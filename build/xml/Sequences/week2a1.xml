<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/week2a1.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="week2a1-source.html">week2a1</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <section ids="chapter-assessment" names="chapter\ assessment">
        <title>Chapter Assessment</title>
        <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="assess_question9_12_1">
        <statement>

        <paragraph>What will the output be for the following code?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">let = "z"
let_two = "p"
c = let_two + let
m = c*5
print(m)</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>zpzpzpzpzp</p>
                </statement>
                <feedback>
                    <p>The order of concatenation matters.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>zzzzzppppp</p>
                </statement>
                <feedback>
                    <p>Think about the order that the program is executed in, what occurs first?</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>pzpzpzpzpz</p>
                </statement>
                <feedback>
                    <p>Yes, because let_two was put before let, c has "pz" and then that is repeated five times.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>pppppzzzzz</p>
                </statement>
                <feedback>
                    <p>Think about the order that the program is executed in, what occurs first?</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>None of the above, an error will occur.</p>
                </statement>
                <feedback>
                    <p>This is correct syntax and no errors will occur.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="assess_ac_9_12_2">
    <statement>
        <paragraph>Write a program that extracts the last three items in the list <literal>sports</literal> and assigns it to the variable <literal>last</literal>. Make sure to write your code so that it works no matter how many items are in the list.</paragraph>

    </statement>
    <program label="assess_ac_9_12_2_editor" interactive='activecode' language="python">

        <input>
sports = ['cricket', 'football', 'volleyball', 'baseball', 'softball', 'track and field', 'curling', 'ping pong', 'hockey']


=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

  def test_output(self):
     self.assertEqual(last, ['curling', 'ping pong', 'hockey'], "Testing that the value of last is the last three items in sports.")
     self.assertTrue(re.search(r'last\s*=\s*\S*3:', self.getEditorText()), "Hardcode check")


myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ac_9_12_3">
    <statement>
        <paragraph>Write code that combines the following variables so that the sentence “You are doing a great job, keep it up!” is assigned to the variable <literal>message</literal>. Do not edit the values assigned to <literal>by</literal>, <literal>az</literal>, <literal>io</literal>, or <literal>qy</literal>.</paragraph>

    </statement>
    <program label="assess_ac_9_12_3_editor" interactive='activecode' language="python">

        <input>
by = "You are"
az = "doing a great "
io = "job"
qy = "keep it up!"


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def test_output(self):
    self.assertEqual(by, 'You are', "Testing original variables.")
    self.assertEqual(az, 'doing a great ', "Testing original variables.")
    self.assertEqual(io, 'job', "Testing original variables.")
    self.assertEqual(qy, 'keep it up!', "Testing original variables.")
    self.assertEqual(message, 'You are doing a great job, keep it up!', "Testing that the value of message is what was expected.")
    self.assertNotIn("You are doing a great job, keep it up!", self.getEditorText(), "Testing for hardcoding (Don't worry about actual and expected values).")


myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="assess_question9_12_4">
        <statement>

        <paragraph>What will the output be for the following code?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">ls = ['run', 'world', 'travel', 'lights', 'moon', 'baseball', 'sea']
new = ls[2:4]
print(new)</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>['travel', 'lights', 'moon']</p>
                </statement>
                <feedback>
                    <p>When we take a slice of something, it includes the item at the first index and excludes the item at the second index.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>['world', 'travel', 'lights']</p>
                </statement>
                <feedback>
                    <p>When we take a slice of something, it includes the item at the first index and excludes the item at the second index. Additionally, Python is a zero-index based language.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>['travel', 'lights']</p>
                </statement>
                <feedback>
                    <p>Yes, python is a zero-index based language and slices are inclusive of the first index and exclusive of the second.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>['world', 'travel']</p>
                </statement>
                <feedback>
                    <p>Python is a zero-index based language.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="assess_question9_12_5">
        <statement>

        <paragraph>What is the type of <literal>m</literal>?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">l = ['w', '7', 0, 9]
m = l[1:2]</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>string</p>
                </statement>
                <feedback>
                    <p>Not quite, is it slicing or accessing an element?</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>integer</p>
                </statement>
                <feedback>
                    <p>What is happening in the assignment statement for m?</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>float</p>
                </statement>
                <feedback>
                    <p>What is happening in the assignment statement for m?</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>list</p>
                </statement>
                <feedback>
                    <p>Yes, a slice returns a list no matter how large the slice.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="assess_question9_12_6">
        <statement>

        <paragraph>What is the type of <literal>m</literal>?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">l = ['w', '7', 0, 9]
m = l[1]</literal_block>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>string</p>
                </statement>
                <feedback>
                    <p>Yes, the quotes around the number mean that this is a string.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>integer</p>
                </statement>
                <feedback>
                    <p>Not quite, look again at what is being extracted.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>float</p>
                </statement>
                <feedback>
                    <p>Not quite, look again at what is being extracted.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>list</p>
                </statement>
                <feedback>
                    <p>Not quite, is it slicing or accessing an element?</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="assess_question9_12_7">
        <statement>

        <paragraph>What is the type of <literal>x</literal>?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">b = "My, what a lovely day"
x = b.split(',')</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>string</p>
                </statement>
                <feedback>
                    <p>Not quite; .split() returns a list, each of whose elements is a string.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>integer</p>
                </statement>
                <feedback>
                    <p>Not quite, look again at what types are present and what the result of .split() is.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>float</p>
                </statement>
                <feedback>
                    <p>Not quite, look again at what types are present and what the result of .split() is.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>list</p>
                </statement>
                <feedback>
                    <p>Yes, the .split() method returns a list.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="assess_question9_12_8">
        <statement>

        <paragraph>What is the type of <literal>a</literal>?</paragraph>
        <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">b = "My, what a lovely day"
x = b.split(',')
z = "".join(x)
y = z.split()
a = "".join(y)</literal_block>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>string</p>
                </statement>
                <feedback>
                    <p>Yes, the string is split into a list, then joined back into a string, then split again, and finally joined back into a string.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>integer</p>
                </statement>
                <feedback>
                    <p>Not quite, look again at what types are present and what the result of .split() is.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>float</p>
                </statement>
                <feedback>
                    <p>Not quite, look again at what types are present and what the result of .split() is.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>list</p>
                </statement>
                <feedback>
                    <p>Not quite, think about what .split() and .join() return.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="assess_ac9_12_9">
    <statement>
        <paragraph>Write code to determine how many 9’s are in the list <literal>nums</literal> and assign that value to the variable <literal>how_many</literal>. Do not use a for loop to do this.</paragraph>

    </statement>
    <program label="assess_ac9_12_9_editor" interactive='activecode' language="python">

        <input>
nums = [4, 2, 23.4, 9, 545, 9, 1, 234.001, 5, 49, 8, 9 , 34, 52, 1, -2, 9.1, 4]


=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

  def test_output(self):
    self.assertEqual(how_many, 3, "Testing that how_many is set correctly.")
    self.assertNotIn('for', self.getEditorText(), "Testing that you didn't use a for loop.")
    self.assertFalse(re.search(r'how_many\s*=\s*3', self.getEditorText()), "Hardcode check")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ac9_12_10">
    <statement>
        <paragraph>Write code that uses slicing to get rid of the the second 8 so that here are only two 8’s in the list bound to the variable <title_reference>nums</title_reference>.</paragraph>

    </statement>
    <program label="assess_ac9_12_10_editor" interactive='activecode' language="python">

        <input>
nums = [4, 2, 8, 23.4, 8, 9, 545, 9, 1, 234.001, 5, 49, 8, 9 , 34, 52, 1, -2, 9.1, 4]


=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

  def test_output(self):
    self.assertEqual(nums, [4, 2, 8, 23.4, 9, 545, 9, 1, 234.001, 5, 49, 8, 9 , 34, 52, 1, -2, 9.1, 4], "Testing that nums is set correctly.")
    self.assertTrue(re.search(r'\s*:', self.getEditorText()), "Testing that you are using slices to remove the second 8 (Don't worry about actual and expected values)")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="access_ac_9_12_11">
    <statement>
        <paragraph>Assign the last element of <literal>lst</literal> to the variable <literal>end_elem</literal>. Do this so that it works no matter how long lst is.</paragraph>

    </statement>
    <program label="access_ac_9_12_11_editor" interactive='activecode' language="python">

        <input>
lst = ["hi", "goodbye", "python", "106", "506", 91, ['all', 'Paul', 'Jackie', "UMSI", 1, "Stephen", 4.5], 109, "chair", "pizza", "wolverine", 2017, 3.92, 1817, "account", "readings", "papers", 12, "facebook", "twitter", 193.2, "snapchat", "leaders and the best", "social", "1986", 9, 29, "holiday", ["women", "olympics", "gold", "rio", 21, "2016", "men"], "26trombones"]

=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(end_elem, lst[-1], "Testing that end_elem has the correct element assigned.")
      self.assertFalse(re.search(r'end_elem\s*=\s*\S26trombones\S', self.getEditorText()), "Hardcoding Check (Don't worry about actual and expected values)")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="access_ac_9_12_12">
    <statement>
        <paragraph>Assign the number of elements in <literal>lst</literal> to the variable <literal>num_lst</literal>.</paragraph>

    </statement>
    <program label="access_ac_9_12_12_editor" interactive='activecode' language="python">

        <input>
lst = ["hi", "goodbye", "python", "106", "506", 91, ['all', 'Paul', 'Jackie', "UMSI", 1, "Stephen", 4.5], 109, "chair", "pizza", "wolverine", 2017, 3.92, 1817, "account", "readings", "papers", 12, "facebook", "twitter", 193.2, "snapchat", "leaders and the best", "social", "1986", 9, 29, "holiday", ["women", "olympics", "gold", "rio", 21, "2016", "men"], "26trombones"]

=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_lst, 30, "Testing that num_lst has the correct length assigned.")
      self.assertFalse(re.search(r'num_lst\s*=\s*30', self.getEditorText()), "Hardcoding Check (Don't worry about actual and expected values)")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ac_9_12_13">
    <statement>
        <paragraph>Create a variable called <literal>wrds</literal> and assign to it a list whose elements are the words in the string <literal>sent</literal>. Do not worry about punctuation.</paragraph>

    </statement>
    <program label="assess_ac_9_12_13_editor" interactive='activecode' language="python">

        <input>
sent = "The bicentennial for our university was in 2017"

=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(wrds, sent.split(), "Testing that wrds has been correctly assigned.")
      self.assertFalse(re.search(r'wrds\s*=\s*\S*The\S', self.getEditorText()), "Hardcoding Check (Don't worry about actual and expected values)")


myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="assess_ch9_14_lh">
        <statement>

        <paragraph>:</paragraph>
        <image align="center" alt="get the last letter of a string" candidates="{'*': 'Sequences/Figures/Chapter_9_5.PNG'}" uri="Sequences/Figures/Chapter_9_5.PNG" width="900"></image>
        <paragraph>The output above is created by 3 print() statements (one for each variable in ascendenging order ie. greeting1, greeting2, etc).Which print statements would we use to acquire this output?</paragraph>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>print(greeting1[3])</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>print(greeting2[0])</p>
                </statement>
                <feedback>
                    <p>Incorrect, this prints out the character 'B'</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>print(greeting3[5])</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>print(greeting3[2])</p>
                </statement>
                <feedback>
                    <p>Incorrect, this prints out the character 'i'</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>print(greeting2[1])</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>
</choices>

    </exercise>

        <exercise label="assess_ch9_15_lh">
            <statement>
    <block_quote><image align="center" alt="adding elements to a list" candidates="{'*': 'Sequences/Figures/Chapter_9_2.PNG'}" uri="Sequences/Figures/Chapter_9_2.PNG" width="1200"/></block_quote <var />  <var />  </paragraph></statement><setup><var><paragraph>The above program currently adds elements from one list to another char by char.
We want to change this program so our output matches the below Codelens screenshot. What function would we use to do this? <BlankNode/>
What line should we use this function on? <BlankNode/></paragraph><image align="center" alt="adding elements to a list output" candidates="{'*': 'Sequences/Figures/Chapter_9_2B.PNG'}" uri="Sequences/Figures/Chapter_9_2B.PNG" width="800"/></var><var><condition string="^\s*append\(\)\s*$"><feedback><paragraph>Correct.</paragraph></feedback></condition><condition string="^\s*.*\s*$"><feedback><paragraph>Write the function in the following format, function(). Hint: We want to add an element to a list, not concatenate one char at a time.</paragraph></feedback></condition></var></setup></exercise>
        <exercise label="assess_ch9_16_lh">
            <statement>
    <block_quote><image align="center" alt="splitting strings" candidates="{'*': 'Sequences/Figures/Chapter_9_4.PNG'}" uri="Sequences/Figures/Chapter_9_4.PNG" width="900"/></block_quote <var />  <var />  </paragraph></statement><setup><var><paragraph>Consider the above Condelens screenshot. The program that created this output split the string into a list of tokens. The function split() used <BlankNode/> as the delimeter to separate the elements and it resulted in <BlankNode/> elements.</paragraph><condition string="^\s*,|comma\s*$"><feedback><paragraph>Correct.</paragraph></feedback></condition></var><var><condition string="^\s*.*\s*$"><feedback><paragraph>Not quite. Look at the string and the final list. What do we KNOW was between each animal in the string before it was separated</paragraph></feedback></condition><condition number="[6, 6]"><feedback><paragraph>Correct.</paragraph></feedback></condition></var></setup></exercise>    </section>
</document>
