<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.19 -->
<document source="/Users/clatulip/Documents/RunestoneBooks/ThinkLikeComputer/_sources/Sequences/TheSliceOperator.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <substitution_definition names="blank"><BlankNode></BlankNode></substitution_definition>
    <substitution_definition names="docname"><reference refuri="TheSliceOperator-source.html">TheSliceOperator</reference></substitution_definition>
    <comment xml:space="preserve">Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
and/or modify this document under the terms of the GNU Free Documentation
License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being Forward, Prefaces, and
Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".</comment>
    <index entries="['single',\ '[\ :\ ];\ string\ slice',\ 'index-0',\ '',\ None] ['single',\ 'slice;\ string',\ 'index-0',\ '',\ None]" inline="False"></index>
    <target refid="index-0"></target>
    <section ids="the-slice-operator index-0" names="the\ slice\ operator">
        <title>The Slice Operator</title>
        <paragraph>A substring of a string is called a <strong>slice</strong>. Selecting a slice is similar to
            selecting a character:</paragraph>

    <program label="ac9_5_1" interactive='activecode' language="python">
    
        <input>
singers = "Peter, Paul, and Mary"
print(singers[0:5])
print(singers[7:11])
print(singers[17:21])
        </input>
<tests>


</tests>

    </program>
        <paragraph>The <literal>slice</literal> operator <literal>[n:m]</literal> returns the part of the string starting
            with the character at index n and
            going up to but <emphasis>not including</emphasis> the character at index m.</paragraph>
        <paragraph>If you omit the first index (before the colon), the slice starts at the
            beginning of the string. If you omit the second index, the slice goes to the
            end of the string. What do you think <literal>fruit[:]</literal> means?.</paragraph>

    <program label="ac9_5_2" interactive='activecode' language="python">
    
        <input>
fruit = "banana"
print(fruit[:3])
print(fruit[3:])
        </input>
<tests>


</tests>

    </program>
        <paragraph>It’s important to note that slicing a string does not change the original string (remember - strings are immutable, you can make a copy but once a string is created, it never changes). So if you want to do something with a slice of a string, you can either embed it in an expression, or you can save it to a variable, as in the example below, where we take slices of two strings, concatenate them with a hyphen in between and assign that to a new variable. Note that the original strings have not been changed.</paragraph>

    <program label="ac9_5_3" interactive='activecode' language="python">
    
        <input>
parent1_name = "Janus Franklin"
parent2_name = "Raj Singh"
kids_last_name = parent1_name[6:] + "-" + parent2_name[4:]
print("First parent's name: ", parent1_name)
print("Second parent's name: ", parent2_name)
print("Kid's last name: ", kids_last_name)
        </input>
<tests>


</tests>

    </program>
        <section ids="list-slices" names="list\ slices">
            <title>List Slices</title>
            <paragraph>The slice operation we saw with strings also works on lists.  Remember that the first index is the starting point for the slice and the second number is one index past the end of the slice (up to but not including that element).  Recall also
                that if you omit the first index (before the colon), the slice starts at the
                beginning of the sequence. If you omit the second index, the slice goes to the
                end of the sequence. Before running the code below, complete the comments on lines 2-5 by adding your predictions about what will be printed.</paragraph>

    <program label="ac9_5_4" interactive='activecode' language="python">
    
        <input>
a_list = ['a', 'b', 'c', 'd', 'e', 'f']
print(a_list[1:3])  # Predicted output:
print(a_list[:4])   # Predicted output:
print(a_list[3:])   # Predicted output:
print(a_list[:])    # Predicted output:
        </input>
<tests>


</tests>

    </program>
        </section>
        <section ids="tuple-slices" names="tuple\ slices">
            <title>Tuple Slices</title>
            <paragraph>We can’t modify the elements of a tuple, but we can make a variable reference a new tuple holding different information.
                Thankfully we can also use the slice operation on tuples as well as strings and lists. To construct the new tuple, we can
                slice parts of the old tuple and join up the bits to make a new tuple. So <literal>julia</literal> has a new recent film, and we might
                want to change her tuple. We can easily slice off the parts we want and concatenate them with a new tuple.</paragraph>

    <program label="ac9_5_5" interactive='activecode' language="python">
    
        <input>
julia = ("Julia", "Roberts", 1967, "Duplicity", 2009, "Actress", "Atlanta, Georgia")
print(julia[2])
print(julia[2:6])

print(len(julia))

julia = julia[:3] + ("Eat Pray Love", 2010) + julia[5:]
print(julia)
        </input>
<tests>


</tests>

    </program>
            <paragraph>The observant student might notice that the code above appears to modify the tuple assigned to the variable julia. Didn’t we say that tuples are immutable? What’s happening on line 7 in the above example is that a new tuple is being created, using parts of the old tuple and some new information, and then it is being assigned back to the reference variable julia. This very subtle difference (which unfortunately does not really show in CodeLens) becomes important when we start passing sequences as function parameters later in this chapter.</paragraph>
            <paragraph><strong>Check your understanding</strong></paragraph>

    <exercise label="question9_5_1">
        <statement>

            <paragraph>What is printed by the following statements?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">s = "python rocks"
print(s[3:8])</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>python</p>
                </statement>
                <feedback>
                    <p>That would be s[0:6].</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>rocks</p>
                </statement>
                <feedback>
                    <p>That would be s[7:].</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>hon r</p>
                </statement>
                <feedback>
                    <p>Yes, start with the character at index 3 and go up to but not include the character at index 8.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>Error, you cannot have two numbers inside the [ ].</p>
                </statement>
                <feedback>
                    <p>This is called slicing, not indexing. It requires a start and an end.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question9_5_2">
        <statement>

            <paragraph>What is printed by the following statements?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
print(alist[4:])</literal_block>

        </statement>
<choices>

            <choice correct='yes'>
                <statement>
                    <p>[ [ ], 3.14, False]</p>
                </statement>
                <feedback>
                    <p>Yes, the slice starts at index 4 and goes up to and including the last item.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>[ [ ], 3.14]</p>
                </statement>
                <feedback>
                    <p>By leaving out the upper bound on the slice, we go up to and including the last item.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>[ [56, 57, "dog"], [ ], 3.14, False]</p>
                </statement>
                <feedback>
                    <p>Index values start at 0.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question9_5_3">
        <statement>

            <paragraph>What is printed by the following statements?</paragraph>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve">L = [0.34, '6', 'SI106', 'Python', -2]
print(len(L[1:-1]))</literal_block>

        </statement>
<choices>

            <choice >
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>The list begins with the second item of L and includes everything up to but not including the last item.</p>
                </feedback>
            </choice>

            <choice correct='yes'>
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>Yes, there are 3 items in this list.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>The list begins with the second item of L and includes everything up to but not including the last item.</p>
                </feedback>
            </choice>

            <choice >
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>The list begins with the second item of L and includes everything up to but not including the last item.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="ac9_5_6">
    <statement>
            <paragraph>Create a new list using the 9th through 12th elements (four items in all) of <literal>new_lst</literal> and assign it to the variable <literal>sub_lst</literal>.</paragraph>

    </statement>
    <program label="ac9_5_6_editor" interactive='activecode' language="python">

        <input>
new_lst = ["computer", "luxurious", "basket", "crime", 0, 2.49, "institution", "slice", "sun", ["water", "air", "fire", "earth"], "games", 2.7, "code", "java", ["birthday", "celebration", 1817, "party", "cake", 5], "rain", "thunderstorm", "top down"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(sub_lst, new_lst[8:12], "Testing that sub_lst has the correct elements assigned.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
        </section>
    </section>
</document>
