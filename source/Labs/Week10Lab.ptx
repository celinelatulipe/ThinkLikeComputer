<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->

    <section xml:id="_week-10-lab">
        <title>Week 10 Lab</title>
        <note>
            <title>Material Covered - CodeSkulptor</title>
            <p>GUI control objects, Event handling </p>

        <p><ul>
            <li>
                <p>This lab requires the use of CodeSkulptor.</p>
            </li>
            <li>
                <p>You must show your code to the instructor to get checked off for each of the three levels.</p>
            </li>
            <li>
                <p>Make sure to comment your code and remove all hard-coding of values.</p>
            </li>
            <li>
                <p>Use CodeSkulptor's documentation when you are stuck or having troubles with syntax!</p>
            </li>
            <li>
                <p>Remember that if you modify the value of a global variable within the local scope of a function, you need to include <c>global variable_name</c> within that function.
                    <term>Otherwise, your program might run but not work as intended.</term></p>
            </li>
            <li>
                <p>
                    Make sure to save your work frequently in a .py file in case your web browser closes or gets refreshed. 
                    To do this, press the 'Save' button then the 'Download' button on the Codeskulptor 3 main web page.
                </p>
            </li>
        </ul></p>
        <image source="Labs/Figures/SaveWorkThenDownloadCodeSkulptorWebPage.png" width="70%"/>
        </note>
        <subsection xml:id="week10lab_level-1">
            <title>Level 1 - Create a stopwatch</title>
            <p>In this level you will be creating a stopwatch using CodeSkulptor 3.</p>
        <p><ol>
            <li>
                <p>Start with the default CodeSkulptor 3 script.</p> 
                <p>Go to: <url href="https://py3.codeskulptor.org/" visual="https://py3.codeskulptor.org/"></url></p>
            </li>
            <li>
                <p>Remove the message variable and add two <term>global</term> variables; 
                    one to hold the time and one to hold the increment value (how fast the timer changes). Set both of these to 0 initially.</p>
            </li>
            <li>
                <p>Create a start function that will set the increment variable to 0.005.</p>
                <p><note>Add the 'global variable_name' statement to the top of this function <term>(and the other functions discussed below)</term> 
                    in order to be able to update this global variable.</note></p>
            </li>
            <li>
                <p>Create a stop function that will set the increment to 0. Create a reset function that will set the time to 0 and the increment to 0.</p>
            </li>
            <li>
                <p>Create buttons that link to the three functions from step 2 and step 3.</p>
            </li>
            <li>
                <p>Edit the draw function so that it will draw the time variable on the canvas. Use the round() function so your time variable 
                    only prints to 2 decimal places. In addition to displaying the time, you will also need to update the time in draw, 
                    using the increment variable.</p>
            </li>
            <li>
                <p>Test to make sure your stopwatch is working.</p>
            </li>
            <li>
                <p>Show your instructor to get credit for Level 1.</p>
            </li>
        </ol></p>
        <p>Below is an example of a stopwatch. Yours should look similar.</p>
        <image source="Labs/Figures/CodeSkulptorLabLevel1.png"/>
        </subsection>
        <subsection xml:id="week10lab_level-2">
            <title>Level 2 - Part one of target shooting game</title>
            <p>In this level, you will be creating part one of a target shooting game using CodeSkulptor 3.</p>
            <p><ol>
                <li>
                    <p>Start with the default CodeSkulptor 3 script.</p>
                    <p>Go to: <url href="https://py3.codeskulptor.org/" visual="https://py3.codeskulptor.org/"></url></p>
                </li>
                <li>
                    <p>Import the random and math modules.</p>
                </li>
                <li>
                    <p>Create 3 global variables:</p>
                    <p><ul>
                        <li>
                            <p>one string that says "hit start"</p>
                        </li>
                        <li>
                            <p>one boolean for whether the game is running, set to false</p>
                        </li>
                        <li>
                            <p>one list to hold the target's current location (stored as a 2 item list of x and y coordinates).
                                Assign its initial value to 250,150 (the center of the canvas) for now. </p>
                        </li>
                    </ul></p>
                </li>
                <li>
                    <p>Edit the frame to be 500 by 300.</p>
                </li>
                <li>
                    <p>Add a button called start. Define the start button handler function. 
                        In the handler you should just set the global boolean to true to start the game.</p>
                        <p></p>
                        <p><note><term>Remember that in order to change a global variable inside a function, 
                            you need to add 'global variable_name' at the top of the function.</term></note></p>
                </li>
                <li>
                    <p>Edit the draw() handler function. If the global boolean is true then do the following:</p>
                    <p><note>Look at the Docs->Graphics Modules->Canvas->Draw Circle examples to see how to write the lines of code below.</note></p>
                </li>
            </ol></p>
            <p><ul>
            <li>
            <p>Draw four circles using the global list variable for coordinates, a line width of 1, a line colour of black, and various fill colours, as shown below. 
                The largest circle should have a radius of 30, the other circles should have radii of 22, 15 and 8.</p>
            </li>
            <li>
            <p>Next, draw two lines (look at the same documentation, but the section on drawing a line segment). 
                The lines should intersect the circle centers horizontally and vertically.</p>
            </li>
            <li>
            <p>
            Lastly, at the bottom of your program, add the <c>frame.set_draw_handler()</c> and <c>frame.start()</c> commands. 
            When you run this, the canvas should look like the image (below) after the start button is pressed.</p>
            </li>
            </ul></p>
            <p>If the global boolean is false, your code should just display the start message that tells the user to click the start button.</p>
            <image source="Labs/Figures/CodeSkulptorLabLevel2.png"/>
        </subsection>
        <subsection xml:id="week10lab_level-3">
            <title>Level 3 - Complete target shooting game</title>
            <p>This level builds upon the code from level 2.</p>
            <p><term>Make sure your code from level 2 works as instructed before proceeding with this level!</term></p>
                <p><ol>
                    <li>
                        <p>Create two global integer variables, one to increment the x direction of the target and one to increment the y direction 
                            (assign them number values between 0 and 5).</p>
                    </li>
                    <li>
                        <p>Inside the conditional in the draw() function, after you draw the target, 
                            add code to increment the target's x and y coordinates stored in the coordinate list.</p>
                            <p><note>Because you are editing elements of a list, you don't need to use the global keyword. 
                                If you run this code now, the target should move off the screen and disappear.</note></p>
                    </li>
                    <li>
                        <p>Now we need to make sure the target stays on the canvas. Add if statements that check 
                            if the target's x or y coordinate has gone outside the canvas width or height.</p>
                            <p><note>Unlike the canvas of the turtle module, the position (0,0) is at the top left of the screen, not the center.</note></p>
                                <p>Follow the sub-steps below for this part.</p>
                                <p><ul>
                                    <li>
                                        <p>Write an if statement that checks whether the current x coordinate is less than the radius of the target 
                                            OR greater than the width of the window minus the radius. If either of these conditions is true, 
                                            reverse the direction of the x increment variable by multiplying it by -1.</p> 
                                            <p><note>This means that if you were 
                                            previous adding 3 to the x coordinate each time the draw function was called, now you will be adding -3, 
                                            so that it goes in the other direction. Note that we use the radius in these conditions (for both sub-steps) 
                                            because the coordinates specify the center of the target and we need to make sure that the whole target stays on screen. 
                                            <term>Remember that the increment variable is global, so you will need to explicitly allow edits to this global variable 
                                            inside the draw function.</term></note></p>
                                    </li>
                                    <li>
                                        <p>Repeat the above sub-step for the y coordinate, checking to see if the current y is less than the radius 
                                            or greater than the  height of the window minus the radius. If either condition is true, multiply the y increment variable by -1.</p>
                                    </li>
                                    <li>
                                        <p>Run your code now, the target should move around the screen, bouncing off the edges of the canvas.</p>
                                    </li>
                                </ul></p>
                    </li>
                    <li>
                        <p>Create a mouseclick() handler and define its function (see Docs->Graphics Modules->Control Objects ->Mouse input handler).</p>
                    </li>
                    <li>
                        <p>We want to check if the mouse has clicked on the target. To do this, you need to check if the x click location is between 
                            target_x - radius and target_x + radius, and if the y click location is between target_y - radius and target_y + radius. 
                            If so, change the <term>global</term> boolean flag so the game stops and print out a winning message.</p>
                            <p><note>The x, y coordinates of the mouse click are passed into the mouse handler function as a tuple with two items, 
                                so you will need to get those coordinates in the same way that you accessed the target's x and y coordinates.</note></p>
                    </li>
                    <li>
                        <p>Show your instructor to get credit for Level 2 and Level 3.</p>
                    </li>
                </ol></p>
                <p>Below is a video of a similar program that prints a message to the console based on the position of a mouse click. You are NOT required to include these changes.</p>
                <video source="Labs/Figures/CodeSkulptorLabLevel3.mp4"/>
        </subsection>
    </section>

