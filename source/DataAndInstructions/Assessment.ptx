<?xml version="1.0"?>
<!-- <!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd"> -->
<!-- Generated by Docutils 0.19 -->
<section xml:id="_chapter-2-assessment">
	<title>Chapter 2 Assessment</title>
	<p>
		<term>Check your understanding</term>
	</p>

	<exercise label="assess_ch2_1">
		<statement>
			<p>
				There is a function we are providing in for you in this problem called <c>square</c>.
				It takes one integer and returns the square of that integer value.
				Write code to assign a variable called <c>xyz</c> the value <c>5*5</c> (five squared).
				Use the square function, rather than just multiplying with <c>*</c>.
			</p>
		</statement>


		<program label="assess_ch2_1_editor" interactive="activecode" language="python" include="ac2_4_1">
			<input>
xyz = ""
=====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(type(xyz), type(3), "Checking type of xyz")
        self.assertEqual(xyz, 25, "Checking if xyz is 25")
        self.assertIn('square', self.getEditorText(), "Testing that 'square' is in your code. (Don't worry about Actual and Expected Values.)")
myTests().main()
			</input>
			<tests>
			</tests>
		</program>
	</exercise>

	<exercise label="assess_ch2_2">
		<statement>
			<p>
				Write code to assign the number of <em>characters</em> in the string <c>rv</c> to a variable <c>num_chars</c>.
			</p>
		</statement>


		<program label="assess_ch2_2_editor" interactive="activecode" language="python">
			<input>
rv = """Once upon a midnight dreary, while I pondered, weak and weary,
    Over many a quaint and curious volume of forgotten lore,
    While I nodded, nearly napping, suddenly there came a tapping,
    As of some one gently rapping, rapping at my chamber door.
    'Tis some visitor, I muttered, tapping at my chamber door;
    Only this and nothing more."""
# Write your code here!
=====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):
    def testOne(self):
       self.assertEqual(num_chars, len(rv), "Testing that num_chars has been set to the length of rv")
myTests().main()
			</input>
			<tests>
			</tests>
		</program>
	</exercise>

	<exercise label="assess_ch2_3">
		<statement>
			<p>
				The code below initializes two variables, <c>z</c> and <c>y</c>.
				We want to assign the total number of characters in <c>z</c> and in <c>y</c> to the variable <c>a</c>.
				Which of the following solutions, if any, would be considered hard coding?
			</p>


			<program language="python"><input>
				z = "hello world"
				y = "welcome!"
				</input>
			</program>
		</statement>
		<choices>
		<choice correct="yes">
		<statement>
			<p>
				a = len("hello worldwelcome!")
			</p>
		</statement>

		<feedback>
			<p>
				Though we are using the len function here, we are hardcoding what len should return the length of.
				We are not referencing z or y.
			</p>
		</feedback>
		</choice>
		<choice correct="yes">
		<statement>
			<p>
				a = 11 + 8
			</p>
		</statement>

		<feedback>
			<p>
				This is hardcoding, we are writing in the value without referencing z or y.
			</p>
		</feedback>
		</choice>
		<choice>
		<statement>
			<p>
				a = len(z) + len(y)
			</p>
		</statement>

		<feedback>
			<p>
				This is not considered hard coding.
				We are using the function len to determine the length of what is stored in z and y, which is a correct way to approach this problem.
			</p>
		</feedback>
		</choice>
		<choice correct="yes">
		<statement>
			<p>
				a = len("hello world") + len("welcome!")
			</p>
		</statement>

		<feedback>
			<p>
				Though we are using the len function here, we are hardcoding what len should return the length of each time we call len.
				We are not referencing z or y.
			</p>
		</feedback>
		</choice>
		<choice>
		<statement>
			<p>
				none of the above are hardcoding.
			</p>
		</statement>

		<feedback>
			<p>
				At least one of these solutions is considered hardcoding.
				Take another look.
			</p>
		</feedback>
		</choice>
		</choices>
	</exercise>

	<!-- <exercise label="assess_ch2_4">
		<statement>
			<p>
				(This is not an assessment question) The code below defines functions used by one of the questions above.
				Do not modify the code, but feel free to take a look.
			</p>
		</statement>


		<program label="assess_ch2_4_editor" interactive="activecode" language="python">
			<input>
def square(num):
    return num**2
			</input>
			<tests>
			</tests>
		</program>
	</exercise> -->

	<!--  <exercise label="assess_ch2_5_lh">
	<statement>
		<block_quote><image align="center" alt="image of numerous variables being declared and assigned values" candidates="{'*': 'DataAndInstructions/Figures/cdq2-1.png'}" uri="DataAndInstructions/Figures/cdq2-1.png" width="900"/></block_quote>
		<var />  </paragraph>
	</statement><

	setup><var><paragraph>Which variables in the image above are assigned string values? List each <emphasis>variable</emphasis> in the box below, separated by a white space.</paragraph><condition string="^\s*a\s+e\s+f\s+g\s+h\s+i\s*$">
	<feedback>
		<paragraph>Correct.
		You typically use whole numbers for ages after age 1.</paragraph>
	</feedback><
	/condition></var></setup>
</exercise>

<exercise label="assess_ch2_6_lh">
	<statement>
		<block_quote><image align="center" alt="image of numerous variables being declared and assigned values" candidates="{'*': 'DataAndInstructions/Figures/cdq2-2.png'}" uri="DataAndInstructions/Figures/cdq2-2.png" width="900"/></block_quote>
		<var />  </paragraph>
	</statement><

	setup><var><paragraph>Which line number(s) will print an integer as the result of the given operation? List each line number in the box below, separated by a COMMA.</paragraph><condition string="^\s*3,6\s*$">
	<feedback>
		<paragraph>Correct! All the others either use floats or integers with the ‘/’ operation which always returns a float.</paragraph>
	</feedback><
	/condition></var></setup>
</exercise>

<exercise label="assess_ch2_7_lh">
	<statement>
		<block_quote><image align="center" alt="image of numerous variables being declared and assigned values" candidates="{'*': 'DataAndInstructions/Figures/cdq2-3.png'}" uri="DataAndInstructions/Figures/cdq2-3.png" width="900"/></block_quote>
		<var />  </paragraph>
	</statement><

	setup><var><paragraph>The image above shows a program that just completed executing (we know this because the green arrow is on the last line and there is no red arrow in the image).
	At the end of the program, which variables changed from their original value during the program’s execution? List each <emphasis>variable</emphasis> in the box below, separated by a white space.</paragraph><condition string="^\s*a\s+c\s*$">
	<feedback>
		<paragraph>Correct! Even though c finished with the same value it started with, it still was updated during the code execution.</paragraph>
	</feedback><
	/condition><condition string="^\s*a\s+c\s+e\s*$">
	<feedback>
		<paragraph>Not quite.
		Variable e is made up of values from a and b but it never gets reassigned.</paragraph>
	</feedback><
	/condition><condition string="^\s*a\s+e\s*$">
	<feedback>
		<paragraph>Not quite.
		Variable e is made up of values from a and b but it never gets reassigned.
		Read through the program again to double check which variables get new values during code execution.</paragraph>
	</feedback><
	/condition><condition string="^\s*a\s*$">
	<feedback>
		<paragraph>Almost.
		Variable a is definitely reassigned during the program but is that the only one? Go back and read the code again to see if there is any others</paragraph>
	</feedback><
	/condition></var></setup>
</exercise>
-->
<exercise label="assess_ch2_8_lh">
	<statement>
		<p>
			:
		</p>

		<image source="DataAndInstructions/Figures/cdq2-4.png" width="80%"/>
			<p>
				What does the code shown in the codelens image print when it finishes executing?
			</p>
		</statement>
		<choices>
		<choice correct="yes">
		<statement>
			<p>
				an error
			</p>
		</statement>

		<feedback>
			<p>
				This is a correct.
				When using + to stick strings together, all variables need to be a string.
				This throws a type error.
			</p>
		</feedback>
		</choice>
		<choice>
		<statement>
			<p>
				sara 11
			</p>
		</statement>

		<feedback>
			<p>
				Hmm, this would be true if 11 was a string but it isn't
			</p>
		</feedback>
		</choice>
		<choice>
		<statement>
			<p>
				sara11
			</p>
		</statement>

		<feedback>
			<p>
				Hmm, not quite, we stick a space on our string in line 3
			</p>
		</feedback>
		</choice>
		<choice>
		<statement>
			<p>
				"sara11"
			</p>
		</statement>

		<feedback>
			<p>
				Hmm, not quite, we stick a space on our string in line 3 and we don't have quotes
			</p>
		</feedback>
		</choice>
		<choice>
		<statement>
			<p>
				"sara 11"
			</p>
		</statement>

		<feedback>
			<p>
				Hmm, we don't have quotes in our string
			</p>
		</feedback>
		</choice>
		</choices>
	</exercise>

	<exercise label="assess_ch2_9_lh">
		<statement>
			<p>
				:
			</p>
			<program language="python"><input>
				name = "sara"
				age = 11
				info = name + " " + str(age)
				print(info)
				</input>
			</program>
				<p>
					Here is that same code again, but the error has been fixed.
					Which line number shows a line of code we would define as an expression?
				</p>
			</statement>
			<choices>
			<choice>
			<statement>
				<p>
					1
				</p>
			</statement>

			<feedback>
				<p>
					This is a variable being asssigned a string value
				</p>
			</feedback>
			</choice>
			<choice>
			<statement>
				<p>
					2
				</p>
			</statement>

			<feedback>
				<p>
					This is a variable being assigned an integer value
				</p>
			</feedback>
			</choice>
			<choice correct="yes">
			<statement>
				<p>
					3
				</p>
			</statement>

			<feedback>
				<p>
					Correct, "sara" + " " + age is an expression that we want to evaluate to "sara 11" and store the string in the info variable
				</p>
			</feedback>
			</choice>
			<choice>
			<statement>
				<p>
					4
				</p>
			</statement>

			<feedback>
				<p>
					This prints the string value stored the info variable
				</p>
			</feedback>
			</choice>
			</choices>
		</exercise>
	</section>
