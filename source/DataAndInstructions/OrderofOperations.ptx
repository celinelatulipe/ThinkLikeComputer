<?xml version="1.0"?>
<section xml:id="data-and-instructions_order-of-operations">
  <title>Order of Operations</title>
  <video xml:id="precedencevid" youtube="Ezve3QJv6Aw" width="auto"/>
  <p>When more than one operator appears in an expression, the order of evaluation
            depends on the <term>rules of precedence</term>. Python follows the same precedence
            rules for its mathematical operators that mathematics does.</p>
  <p>
    <ol>
      <li>
        <p><em>Parentheses</em> have the highest precedence and can be used to force an
                    expression to evaluate in the order you want. Since expressions in
                    parentheses are evaluated first, <c>2 * (3-1)</c> is 4, and <c>(1+1)**(5-2)</c> is
                    8. You can also use parentheses to make an expression easier to read, as in
                    <c>(minute * 100) / 60</c>: in this case, the parentheses don't change the result,
                    but they reinforce that the expression in parentheses will be evaluated first.</p>
      </li>
      <li>
        <p><em>Exponentiation</em> has the next highest precedence, so <c>2**1+1</c> is 3 and
                    not 4, and <c>3*1**3</c> is 3 and not 27.  Can you explain why?</p>
      </li>
      <li>
        <p><em>Multiplication and both division</em> operators have the same
                    precedence, which is higher than addition and subtraction, which
                    also have the same precedence. So <c>2*3-1</c> yields 5 rather than 4, and
                    <c>5-2*2</c> is 1, not 6.</p>
      </li>
      <li>
        <p>Operators with the <em>same</em> precedence are
                    evaluated from left-to-right. In algebra we say they are <em>left-associative</em>.
                    So in the expression <c>6-3+2</c>, the subtraction happens first, yielding 3.
                    We then add 2 to get the result 5. If the operations had been evaluated from
                    right to left, the result would have been <c>6-(3+2)</c>, which is 1.</p>
      </li>
    </ol>
  </p>
  <note>
    <p>Due to some historical quirk, an exception to the left-to-right
                left-associative rule is the exponentiation operator <c>**</c>. A useful hint
                is to always use parentheses to force exactly the order you want when
                exponentiation is involved:</p>
  </note>
  <program label="ac2_11_1" interactive="activecode" language="python">
    <input>
print(2 ** 3 ** 2)     # the right-most ** operator gets done first!
print((2 ** 3) ** 2)   # use parentheses to force the order you want!
    </input>
    <tests>
    </tests>
  </program>
  <note>
    <p>This is a second way that parentheses are used in Python. The first way you've already seen is that () indicates a function call, with the inputs going inside the parentheses. How can Python tell when parentheses specify to call a function, and when they are just forcing the order of operations for ambiguous operator expressions?</p>
    <p>The answer is that if there's a a function to the left of the parentheses, then the parentheses indicate a function call, and otherwise not.</p>
  </note>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question2_11_1">
    <statement>
      <p>What is the value of the following expression:</p>
      <program language="python">
        <input>
16 - 2 * 5 // 3 + 1
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>14</p>
        </statement>
        <feedback>
          <p>Using parentheses, the expression is evaluated as (2*5) first, then (10 // 3), then (16-3), and then (13+1).</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>24</p>
        </statement>
        <feedback>
          <p>Remember that * has precedence over  -.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>Remember that // has precedence over -.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>13.667</p>
        </statement>
        <feedback>
          <p>Remember that // does integer division.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>Here is an animation for the above expression:</p>
  <exercise runestone="se_ac2_11_1"/> 
</section>
