<?xml version="1.0"?>
<!-- <!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd"> -->
<!-- Generated by Docutils 0.19 -->
<section xml:id="chapter4_exercises">
	<title>Exercises</title>
	<exercise label="ex4_16_1">
		<statement>
			<p>
				In Robert McCloskey's
				book <em>Make Way for Ducklings</em>, the names of the ducklings are Jack, Kack, Lack,
				Mack, Nack, Ouack, Pack, and Quack.
				This loop tries to output these names in order.
			</p>

			<p>
				Of course, that's not quite right because Ouack and Quack are misspelled.
				Can you fix it?
			</p>
		</statement>


		<program label="ex4_16_1_editor" interactive="activecode" language="python">
			<input>
prefixes = "JKLMNOPQ"
suffix = "ack"
for p in prefixes:
    print(p + suffix)
			</input>
			<tests>
			from unittest.gui import TestCaseGui
			import re
			class myTests(TestCaseGui):
			def testOne(self):
			# check the answer
			self.assertTrue(re.search('Jack', self.getOutput()), 'Checking answer.')
			self.assertTrue(re.search('Kack', self.getOutput()), 'Checking answer.')
			self.assertTrue(re.search('Lack', self.getOutput()), 'Checking answer.')
			self.assertTrue(re.search('Mack', self.getOutput()), 'Checking answer.')
			self.assertTrue(re.search('Nack', self.getOutput()), 'Checking answer.')
			self.assertTrue(re.search('Ouack', self.getOutput()), 'Checking answer.')
			self.assertTrue(re.search('Pack', self.getOutput()), 'Checking answer.')
			self.assertTrue(re.search('Quack', self.getOutput()), 'Checking answer.')
			# hardcode check
			prefixes = ['J','K','L','M','N','Ou','P','Qu']
			self.assertFalse(re.search(r'('+'|'.join([p+suffix for p in prefixes])+r')', self.getEditorText()), 'Checking for hardcoding')
			myTests().main()
			</tests>
		</program>
	</exercise>

	<exercise label="ex4_16_2">
		<statement>
			<p>
				Get the user to enter some text and print it out in reverse order.
			</p>
		</statement>


		<program label="ex4_16_2_editor" interactive="activecode" language="python">
			<input>
			</input>
			<tests>
			from unittest.gui import TestCaseGui
			import re
			class myTests(TestCaseGui):
			def testOne(self):
			self.assertTrue(re.search(user_input[::-1], self.getOutput()), 'Checking answer.')
			myTests().main()
			</tests>
		</program>
	</exercise>

	<exercise xml:id="ex4_16_3">
		<statement>
			<dl>
			<li>
				<title>Write a program that uses a for loop to print</title>
				<line_block>
				<line><c>One of the months of the year is January</c></line>
				<line><c>One of the months of the year is February</c></line>
				<line><c>One of the months of the year is March</c></line>
				<line>etc â€¦</line>
				</line_block>
			</li>
			</dl>
		</statement>
        <program interactive="activecode" language="python">
		<prefix>
		</prefix>
		<input>
		</input>
		<tests>
		</tests>
	</program>
    <solution>
	<program language="python">
		<input>
for amonth in ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'November', 'December']:
    print("One of the months of the year is", amonth)
		</input>
		<tests>
		</tests>
	</program>
</solution>
</exercise>

<exercise label="ex_3_4">
	<statement>
		<p>
			Assume you have a list of numbers <c>12, 10, 32, 3, 66, 17, 42, 99, 20</c>
		</p>

		<p>
			<ol>
				<li>
					<p>
						Write a loop that prints each of the numbers on a new line.
					</p>
				</li>

				<li>
					<p>
						Write a loop that prints each number and its square on a new line.
					</p>
				</li>
			</ol>
        </p>
	</statement>


		<program label="ex_3_4_editor" interactive="activecode" language="python">
			<input>
			</input>
			<tests>
			from unittest.gui import TestCaseGui
			import re
			class myTests(TestCaseGui):
			def testOne(self):
			_seq = [12, 10, 32, 3, 66, 17, 42, 99, 20]
			_seq.extend(["{:d} +{:d}".format(number, number**2) for number in _seq])
			_seq = [str(s) for s in _seq]
			output = self.getOutput().split('\n')
			for expected, line in zip(_seq,output):
			self.assertTrue(re.search(expected, line), 'Checking line')
			outer_loops = re.findall(r'^(for[ (].* in.*: *)$', self.getEditorText(), re.M)
			inner_loops = re.findall(r'^( +for[ (].* in.*: *)$', self.getEditorText(), re.M)
			self.assertTrue(len(outer_loops)==2 and len(inner_loops)&gt;=0, 'Checking for-statements')
			myTests().main()
			</tests>
		</program>
	</exercise>

	<exercise label="pp_4_16_1" indentation="hide" language="python">
		<statement>
			<p>
				Write a program that will go through a list of temperatures and print them out to the user.
			</p>
		</statement>
		<blocks><block order="1">
		<cline>temperatures = [-3, 78, 95, 28, 56, 42, 56, 81, -10, -]</cline>
		</block><block order="3">
		<cline>for temp in temperatures:</cline>
		</block><block order="2">
		<cline>    print("The weather outside is: " + str(temp))</cline>
		</block></blocks>
	</exercise>

	<exercise label="pp_4_16_2" indentation="hide" language="python">
		<statement>
			<p>
				Write a program that will print out a greeting to each student in the list.
				This list should also keep track of how many students have been greeted and note that each time a new student has been greeted.
			</p>
		</statement>
		<blocks><block order="1">
		<cline>students = ["Jay", "Stacy", "Iman", "Trisha", "Ahmed", "Daniel", "Shadae", "Tosin", "Charlotte"]</cline>
		</block><block order="3">
		<cline>num_students = 0</cline>
		</block><block order="2">
		<cline>for student in students:</cline>
		</block><block order="5">
		<cline>    print("Welcome to class, " + student)</cline>
		</block><block order="4">
		<cline>    num_students += 1</cline>
		<cline>    print(str(num_students) + "student(s) have entered the classroom")</cline>
		</block></blocks>
	</exercise>

	<exercise xml:id="ex_4_16_4">
		<statement>
			<p>
				A drunk pirate makes a random turn and then takes 100 steps forward, makes another random turn, takes another 100 steps, turns another random amount, etc.
				A social science student records the angle of each turn before the next 100 steps are taken.
				Her experimental data is <c>160, -43, 270, -97, -43, 200, -940, 17, -86</c>.
				(Positive angles are counter-clockwise.)  Use a turtle to draw the path taken by our drunk friend.
				After the pirate is done walking, print the current heading.
				Assume that the turtle originally has a heading of 0 and accumulate the changes in heading to print out the final.
				Your solution should work for any sequence of experimental data.
			</p>
		</statement>
        <program interactive="activecode" language="python">
		<prefix>
		</prefix>
		<input>
		</input>
		<tests>
		</tests>
	</program>
    <solution>
	<program language="python">
		<input>
import turtle
wn = turtle.Screen()
lovelace = turtle.Turtle()
# move the turtle forward a little so that the whole path fits on the screen
lovelace.penup()
lovelace.forward(60)
# now draw the drunk pirate's path
lovelace.pendown()
current_heading = 0
for angle in [160, -43, 270, -97, -43, 200, -940, 17, -86]:
    # we use .left() so that positive angles are counter-clockwise
    # and negative angles are clockwise
    current_heading = (current_heading + angle) % 360
    lovelace.left(angle)
    lovelace.forward(100)
# the .heading() method gives us the turtle's current heading in degrees
print("The pirate's final heading was", current_heading)
wn.exitonclick()
		</input>
		<tests>
		</tests>
	</program>
</solution>
</exercise>
</section>
