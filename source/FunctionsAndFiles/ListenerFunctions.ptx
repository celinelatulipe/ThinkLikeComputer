<?xml version="1.0"?>
<section xml:id="functions-and-files_listener-functions">
  <title>Listener Functions</title>
  <p>We have talked about interactivity: you have gotten input from the end user and you have shown the end user output by having turtles make fun animated drawings in a canvas window. Let's take that interactivity a step further, now that we know about functions, and add a listener function to our turtle scripts.</p>
  <p>First, let's consider this turtle drawing example.</p>
  <program label="ac5_5_1" interactive="activecode" language="python">
    <input>
import turtle
import random

def random_square():
    """ draws a random square with a random small size
        at turtle's current location
         Pre-Conditions: Turtle named alex exists, pen is down """
    side = random.randrange(10, 30) # get random size
    for _ in range(4): #draw a square in location
        alex.forward(side)
        alex.left(90)

def random_location():
    """ Take turtle to a random location on canvas
        Pre-conditions: Assume turtle is named alex, and
        canvas is 400 x 400 """
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.penup()
    alex.goto(x,y) # move to location without drawing
    alex.pendown()

def random_colour():
    """ Sets turtle named alex to a random colour """
    alex.color(random.random(), random.random(), random.random())

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex
alex.speed(10)            # make alex draw fast
random_colour()
random_location()
random_square()
        </input>
    <tests>
    </tests>
  </program>
  <p>This example contains three different functions. First note how nicely modularized this code is, with each funtion doing one small thing: moving the turtle, giving the turtle a random colour, and drawing a random sized square. We call the three functions at the bottom of the script on lines 30-32. Not also that line 25 creates a random colour by generating 3 random values. Don't worry about this for now - you will learn more about digital colours in a later section of this chapter.</p>
  <p>If we wanted to draw more than one square, we could put a loop around lines 30-32, but that isn't very interactive - it doesn't involve the end user in any way. What if we want the user to decide when they have enough squares on the canvas? By adding a <term>listener function</term>, we can draw squares randomly in response to end user key presses. The version below does this, by adding a key_r function, and adding two lines of code at the bottom of the script to <term>register</term> the listener function and to start <term>listening</term> for window events such as keypresses.</p>
  <p>Run the code below, click your cursor inside the canvas and then type the &#x2018;r' key a few times to see it in action. Now the end user is in control!</p>
  <program label="ac5_5_2" interactive="activecode" language="python">
    <input>
import turtle
import random

def random_square():
    """ draws a random square with a random small size
        at turtle's current location
         Pre-Conditions: Turtle named alex exists, pen is down """
    side = random.randrange(10, 30) # get random size
    for _ in range(4): #draw a square in location
        alex.forward(side)
        alex.left(90)

def random_location():
    """ Take turtle to a random location on canvas
        Pre-conditions: Assume turtle is named alex, and
        canvas is 400 x 400 """
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.penup()
    alex.goto(x,y) # move to location without drawing
    alex.pendown()

def random_colour():
    """ Sets turtle named alex to a random colour """
    alex.color(random.random(), random.random(), random.random())

def key_r():
    """ draw randomly coloured and positioned square """
    random_colour()
    random_location()
    random_square()

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex
alex.speed(10)            # make alex draw fast
random_colour()
random_location()
random_square()

wn.onkey(key_r, 'r')    # tell the operating system to execute function 'key_r()' when the 'r' key is pressed on the keyboard
wn.listen()             # tell the operating system to listen for events on the canvas window
        </input>
    <tests>
    </tests>
  </program>
  <p>Let's add one more listener function to this script that ends the script. The version below adds a listener event for key_q that closes the canvas and ends the script.</p>
  <program label="ac5_5_3" interactive="activecode" language="python">
    <input>
import turtle
import random

def random_square():
    """ draws a random square with a random small size
        at turtle's current location
         Pre-Conditions: Turtle named alex exists, pen is down """
    side = random.randrange(10, 30) # get random size
    for _ in range(4): #draw a square in location
        alex.forward(side)
        alex.left(90)

def random_location():
    """ Take turtle to a random location on canvas
        Pre-conditions: Assume turtle is named alex, and
        canvas is 400 x 400 """
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.penup()
    alex.goto(x,y) # move to location without drawing
    alex.pendown()

def random_colour():
    """ Sets turtle named alex to a random colour """
    alex.color(random.random(), random.random(), random.random())

def key_r():
    """ draw randomly coloured and positioned square """
    random_colour()
    random_location()
    random_square()

def key_q():
    """ close the canvas window """
    wn.bye()

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex
alex.speed(10)            # make alex draw fast
random_colour()
random_location()
random_square()

wn.onkey(key_r, 'r')    # tell the operating system to execute function 'key_r()' when the 'r' key is pressed on the keyboard
wn.onkey(key_q, 'q')    # tell the operating system to execute function 'key_q()' when the 'q' key is pressed on the keyboard
wn.listen()             # tell the operating system to listen for events on the canvas window
        </input>
    <tests>
    </tests>
  </program>
  <p>Try it out yourself. Add two functions to the code below. Add a function that draws a triangle (just copy, paste and edit the square function to draw three sides, with a turning angle of 120 instead of 90). Then add a listener function that can be called in response to the end user typing &#x2018;t'. Then add a line of code at the bottom of the script to tell the computer what function to call when the user types &#x2018;t'.</p>
  <program label="ac5_5_4" interactive="activecode" language="python">
    <input>
import turtle
import random

def random_square():
    """ draws a random square with a random small size
        at turtle's current location
         Pre-Condition: Turtle name alex exists """
    side = random.randrange(10, 30) # get random size
    for _ in range(4): #draw a square in location
        alex.forward(side)
        alex.left(90)

def random_location():
    """ Take turtle to a random location on canvas
        Pre-conditions: Assume turtle is named alex, and
        canvas is 400 x 400 """
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.penup()
    alex.goto(x,y) # move to location without drawing
    alex.pendown()

def random_colour():
    """ Sets turtle to a random colour """
    alex.color(random.random(), random.random(), random.random())

def key_r():
    """ draw randomly coloured and positioned square """
    random_colour()
    random_location()
    random_square()

def key_q():
    """ close the canvas window """
    wn.bye()

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex
alex.speed(10)            # make alex draw fast
random_colour()
random_location()
random_square()

wn.onkey(key_r, 'r')    # tell the operating system to execute function 'key_r()' when the 'r' key is pressed on the keyboard
wn.onkey(key_q, 'q')    # tell the operating system to execute function 'key_q()' when the 'q' key is pressed on the keyboard
wn.listen()             # tell the operating system to listen for events on the canvas window
        </input>
    <tests>
    </tests>
  </program>
  <p>There are a number of other events we can listen for and respond to, such as mouse clicks and drags, but we will return to those when we revisit functions with parameters in Chapter 9.</p>
  <note>
    <title>Common Mistake with Listener Functions</title>
    <p>Most of the listener functions you write are functions that you should <em>never</em> invoke yourself. Notice that we never explicitly call key_r() in the scripts above. They are invoked automatically by the operating system. So, don't call your own listener functions. Run your script, be the end user, and press the keys to test your listener methods!</p>
  </note>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question5_5_a">
    <statement>
      <p>How many times will the hello function get called?</p>
      <program language="python">
        <input>
import turtle
import random


def hello():
    alex.penup()
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.goto(x, y)
    alex.pendown()
    alex.write("Hello!")

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex

alex.forward(20)

wn.onkey(hello, 'h')
wn.listen()
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>It is possible that it is never invoked, but it could be invoked</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>This function gets called in response to end user input</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It doesn't - there is an error in the code</p>
        </statement>
        <feedback>
          <p>No, there are no errors</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It depends on the end user</p>
        </statement>
        <feedback>
          <p>Yes, every time the user presses the h key, the hello function will execute</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>At least once</p>
        </statement>
        <feedback>
          <p>If the user never presses 'h', this function never executes</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question5_5_2">
    <statement>
      <p>How many times will the goodbye() function get called?</p>
      <program language="python">
        <input>
import turtle
import random

def hello():
    alex.penup()
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.goto(x, y)
    alex.pendown()
    alex.write("Hello!")

def goodbye():
    alex.penup()
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.goto(x, y)
    alex.pendown()
    alex.write("Goodbye!")

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex

alex.forward(20)

wn.onkey(hello, 'h')
wn.listen()
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>At least once</p>
        </statement>
        <feedback>
          <p>No, there are no calls to the goodbye() function</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>No, there are no calls to the goodbye() function</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It doesn't - there is an error in the code</p>
        </statement>
        <feedback>
          <p>Yes, there is a logic error because the goodbye() function is not invoked or registered as a listener function</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It depends on the end user</p>
        </statement>
        <feedback>
          <p>No, it is not registered as a listener function</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question5_5_3">
    <statement>
      <p>How many times will the goodbye() function get called?</p>
      <program language="python">
        <input>
import turtle
import random

def hello():
    alex.penup()
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.goto(x, y)
    alex.pendown()
    alex.write("Hello!")

def goodbye():
    alex.penup()
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.goto(x, y)
    alex.pendown()
    alex.write("Goodbye!")

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex

alex.forward(20)

wn.onkey(hello, 'h')
wn.onkey(goodbye, 'b')
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>At least once</p>
        </statement>
        <feedback>
          <p>No, there are no calls to the goodbye() function</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It doesn't - there is an error in the code</p>
        </statement>
        <feedback>
          <p>Yes, there is a logic error because there is no listen() function telling the operating system to listen for window events</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>No, there are no calls to the goodbye() function</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It depends on the end user</p>
        </statement>
        <feedback>
          <p>No, there are no calls to the goodbye() function</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
