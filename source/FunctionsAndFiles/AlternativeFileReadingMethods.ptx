<?xml version="1.0"?>
<section xml:id="functions-and-files_alternative-file-reading-methods">
  <title>Alternative File Reading Methods</title>
  <p>Once you have a file <q>object</q>, the thing returned by the open function, Python provides three methods to read data
            from that object. The <c>read()</c> method returns the entire contents of the file as a single string (or just the first <em>n</em>
            characters if you provide a number as an input parameter). The <c>readlines</c> method returns the entire contents of
            the file as a list of strings, where each item in the list is one line of the file. The <c>readline</c>
            method reads one line from the file and returns it as a string. The strings returned by <c>readlines</c> or
            <c>readline</c> will contain the newline character at the end.  <inline classes="xref std std-ref">Table 2</inline> summarizes these
            methods and the following session shows them in action.</p>
  <table>
    <tabular>
      <row header="yes">
        <cell>
          <term>Method Name</term>
        </cell>
        <cell>
          <term>Use</term>
        </cell>
        <cell>
          <term>Explanation</term>
        </cell>
      </row>
      <row>
        <cell>
          <c>read(n)</c>
        </cell>
        <cell>
          <c>filevar.read()</c>
        </cell>
        <cell>
                            Read and return a string of <c>n</c>
                                characters, or the entire file as a
                                single string if  <c>n</c> is not provided.
                        </cell>
      </row>
      <row>
        <cell>
          <c>readline(n)</c>
        </cell>
        <cell>
          <c>filevar.readline()</c>
        </cell>
        <cell>
                            Read and return the next line of the file with
                                all text up to and including the
                                newline character. If <c>n</c> is provided as
                                a parameter, then only <c>n</c> characters
                                will be returned if the line is longer
                                than <c>n</c>. <term>Note:</term> the parameter <c>n</c> is
                                not supported in the browser version of Python,
                                and in fact is rarely used in practice, so
                                you can safely ignore it.
                        </cell>
      </row>
      <row>
        <cell>
          <c>readlines(n)</c>
        </cell>
        <cell>
          <c>filevar.readlines()</c>
        </cell>
        <cell>
                            Returns a list of strings, each
                                representing a single line of the file.
                                If <c>n</c> is not provided then all lines of
                                the file are returned. If <c>n</c> is provided
                                then <c>n</c> characters are read but <c>n</c> is
                                rounded up so that an entire line is
                                returned.  <term>Note:</term> Like <c>readline</c>,
                                <c>readlines</c> ignores the parameter <c>n</c> in the browser.
                        </cell>
      </row>
    </tabular>
  </table>
  <p>In this course, we will generally either iterate through the lines returned by <c>readlines()</c> with a for loop,
            or use <c>read()</c> to get all of the contents as a single string.</p>
  <p>In other programming languages, where they don't have the convenient for loop method of going through the lines
            of the file one by one, they use a different pattern which requires a different kind of loop, the <c>while</c> loop.
            Fortunately, you don't need to learn this other pattern, and we will put off consideration of <c>while</c> loops
            until later in this course. We don't need them for handling data from files.</p>
  <note>
    <p>A common error that novice programmers make is not realizing that all these ways of reading the file contents,
                <term>use up the file</term>. After you call readlines(), if you call it again you'll get an empty list.</p>
  </note>
  <p>The example below shows how to use the readline() method from above and demonstrates how calling this repeatedly
            gets a different line each time, as the file is <term>used up</term>.</p>
  <program label="ac5_8_1" interactive="activecode" language="python">
    <input>
olympicsfile = open("olympics.txt", "r")

firstline = olympicsfile.readline()
print("the first line of the file is: ", firstline)
secondline = olympicsfile.readline()
print("the second line of the file is: ", secondline)

olympicsfile.close()
        </input>
    <tests>
    </tests>
  </program>

  <datafile xml:id="olympics_textfile" label="olympics.txt" filename="olympics.txt">
    <pre source="FunctionsAndFiles/olympics.txt"></pre>
  </datafile>
  <p>
    <term>Check your Understanding</term>
  </p>
  <exercise label="ac5_8_2">
    <statement>
      <p>
        <ol>
          <li>
            <p>Using the file <c>school_prompt2.txt</c>, find the number of characters in the file and assign that value to the variable <c>num_char</c>.</p>
          </li>
        </ol>
      </p>
    </statement>
    <program label="ac5_8_2_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_char, 536, "Testing that num_char has the correct value.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
<!-- file here-->
  <exercise label="ac5_8_3">
    <statement>
      <p>
        <ol>
          <li>
            <p>Find the number of lines in the file, <c>travel_plans2.txt</c>, and assign it to the variable <c>num_lines</c>.</p>
          </li>
        </ol>
      </p>
    </statement>
    <program label="ac5_8_3_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(num_lines, 11, "Testing that num_lines is assigned to correct value.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
<!-- file here-->>
  <exercise label="ac5_8_4">
    <statement>
      <p>
        <ol>
          <li>
            <p>Create a string called <c>first_forty</c> that is comprised of the first 40 characters of <c>emotion_words2.txt</c>.</p>
          </li>
        </ol>
      </p>
    </statement>
    <program label="ac5_8_4_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(first_forty, 'Sad upset blue down melancholy somber bi', "Testing that first_forty was created correctly.")
myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
<!--file here-->
</section>
