<?xml version="1.0"?>
<section xml:id="Chapter5_exercises">
	<title>Exercises</title>
	<p>
		Below are the datafiles that you have been using so far, and will continue to use for the rest of the chapter.
	</p>

	<p>
		The file below is <c>travel_plans.txt</c>.
	</p>

	<raw format="html" xml:space="preserve"><pre id="travel_plans.txt">
	This summer I will be travelling.
	I will go to...
	Italy: Rome
	Greece: Athens
	England: London, Manchester
	France: Paris, Nice, Lyon
	Spain: Madrid, Barcelona, Granada
	Austria: Vienna
	I will probably not even want to come back!
	However, I wonder how I will get by with all the different languages.
	I only know English!
	</pre></raw>

	<p>
		The file below is <c>school_prompt.txt</c>.
	</p>

	<raw format="html" xml:space="preserve"><pre id="school_prompt.txt">
	Writing essays for school can be difficult but
	many students find that by researching their topic that they
	have more to say and are better informed.
	Here are the university
	we require many undergraduate students to take a first year writing requirement
	so that they can
	have a solid foundation for their writing skills.
	This comes
	in handy for many students.
	Different schools have different requirements, but everyone uses
	writing at some point in their academic career, be it essays, research papers,
	technical write ups, or scripts.
	</pre></raw>

	<p>
		The file below is <c>emotion_words.txt</c>.
	</p>

	<raw format="html" xml:space="preserve"><pre id="emotion_words.txt">
	Sad upset blue down melancholy somber bitter troubled
	Angry mad enraged irate irritable wrathful outraged infuriated
	Happy cheerful content elated joyous delighted lively glad
	Confused disoriented puzzled perplexed dazed befuddled
	Excited eager thrilled delighted
	Scared afraid fearful panicked terrified petrified startled
	Nervous anxious jittery jumpy tense uneasy apprehensive
	</pre></raw>


		<exercise xml:id="ch5_ex_1">
			<statement>
				<p>
					The following sample file called <c>studentdata.txt</c> contains one line for each student in an imaginary class.
					The
					students name is the first thing on each line, followed by some exam scores.
					The number of scores might be different for each student.
				</p>

				<raw format="html" xml:space="preserve"><pre id="studentdata.txt">
				joe 10 15 20 30 40
				bill 23 16 19 22
				sue 8 22 17 14 32 17 24 21 2 9 11 17
				grace 12 28 21 45 26 10
				john 14 32 25 16 89
				</pre></raw>

				<p>
					Using the text file <c>studentdata.txt</c> write a program that prints out the names of
					students that have more than six quiz scores.
				</p>
			</statement>
            <program interactive="activecode" language="python">
			<input>
# Hint: first see if you can write a program that just prints out the number of scores on each line
# Then, make it print the number only if the number is at least six
# Then, switch it to printing the name instead of the number
			</input>
			<tests>
			from unittest.gui import TestCaseGui
			import re
			class myTests(TestCaseGui):
			def testOne(self):
			names = []
			with open('studentdata.txt', 'r') as fh:
			for line in fh:
			values = line.split()
			name = values[0]
			scores = values[1:]
			if len(scores) &gt; 6:
			names.append(name)
			self.assertEqual(self.getOutput().rstrip(), '\n'.join(names), 'Checking names')
			for name in names:
			self.assertFalse(re.search(name, self.getEditorText()), 'Checking for hardcoding')
			if re.search(r'[^#]+= *open', self.getEditorText(), re.M):
			self.assertTrue(re.search(r'[^#]+\.close\(', self.getEditorText(), re.M), 'Checking for matching open and close statements')
			else:
			self.assertTrue(re.search(r'with[ (] *open', self.getEditorText(), re.M), 'Checking open statement')
			myTests().main()
			</tests>
		</program>
        <solution>
		<program language="python">
			<input>
f = open("studentdata.txt", "r")
for aline in f:
    items = aline.split()
    if len(items[1:]) &gt; 6:
        print(items[0])
f.close()
			</input>
			<tests>
			</tests>
		</program>
	</solution>
</exercise>



	<exercise xml:id="ch5_ex_2">
		<statement>
			<p>
				Create a list called <c>destination</c> using the data stored in <c>travel_plans.txt</c>.
				Each element of the list should contain a line from the file that lists a country and cities inside that country.
				Hint: each line that has this information also has a colon <c>:</c> in it.
			</p>
		</statement>
        <program interactive="activecode" language="python" >
		<input>
=====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):
   def testFour(self):
      self.assertEqual(destination, ['Italy: Rome\n', 'Greece: Athens\n', 'England: London, Manchester\n', 'France: Paris, Nice, Lyon\n', 'Spain: Madrid, Barcelona, Granada\n', 'Austria: Vienna\n'], "Testing that destination is assigned to correct values.")
myTests().main()
		</input>
		<tests>
		</tests>
	</program>
</exercise>

	<exercise xml:id="ch5_ex_3">
		<statement>
			<p>
				Create a list called <c>j_emotions</c> that contains every word in <c>emotion_words.txt</c> that begins with the letter “j”.
			</p>
		</statement>
        <program interactive="activecode" language="python" >
		<input>
=====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):
   def testOne(self):
      self.assertEqual(j_emotions, ['joyous', 'jittery', 'jumpy'], "Testing that j_emotions was created correctly.")
myTests().main()
		</input>
		<tests>
		</tests>
	</program>
</exercise>

</section>
