<?xml version="1.0"?>
<section xml:id="functions-and-files_chapter-assessment">
  <title>Chapter Assessment</title>

  <datafile xml:id="school_prompt_txt" label="school_prompt.txt" filename="school_prompt.txt" hide="yes">
    <pre source="FunctionsAndFiles/TextFiles/school_prompt.txt"></pre>
  </datafile>

  <datafile xml:id="student_data_txt" label="studentdata.txt" filename="studentdata.txt" hide="yes">
    <pre source="FunctionsAndFiles/TextFiles/studentdata.txt"></pre>
  </datafile>

  <datafile xml:id="travel_plans3_txt" label="travel_plans.txt" filename="travel_plans.txt" hide="yes">
    <pre source="FunctionsAndFiles/TextFiles/travel_plans.txt"></pre>
  </datafile>

  <datafile xml:id="emotion_words4_txt" label="emotion_words.txt" filename="emotion_words.txt" hide="yes">
    <pre source="FunctionsAndFiles/TextFiles/emotion_words.txt"></pre>
  </datafile>

  <datafile xml:id="SP500_txt" label="SP500.txt" filename="SP500.txt" hide="yes">
    <pre source="FunctionsAndFiles/TextFiles/SP500.txt"></pre>
  </datafile>

  <exercise label="assess_ch5_1">
    <statement>
      <p>The textfile, <c>travel_plans.txt</c>, contains the summer travel plans for someone with some commentary. Find the total number of characters in the file and save to the variable <c>num</c>.</p>
    </statement>
    <program label="assess_ch5_1_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num, 316, "Testing that num value is assigned to correct value.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch5_2">
    <statement>
      <p>We have provided a file called <c>emotion_words.txt</c> that contains lines of words that describe emotions. Find the total number of words in the file and assign this value to the variable <c>num_words</c>.</p>
    </statement>
    <program label="assess_ch5_2_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_words, 48, "Testing that num_words was assigned to the correct value.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch5_3">
    <statement>
      <p>Assign to the variable <c>num_lines</c> the number of lines in the file <c>school_prompt.txt</c>.</p>
    </statement>
    <program label="assess_ch5_3_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_lines, 10, "Testing that num_lines has the correct value.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch5_4">
    <statement>
      <p>Assign the first 30 characters of <c>school_prompt.txt</c> as a string to the variable <c>beginning_chars</c>.</p>
    </statement>
    <program label="assess_ch5_4_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(len(beginning_chars), 30, "Testing that beginning_chars has the correct length.")
      self.assertEqual(beginning_chars, "Writing essays for school can ", "Testing that beginning_chars has the correct string.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch5_5">
    <statement>
      <p><term>Challenge:</term> Using the file <c>school_prompt.txt</c>, assign the third word of every line to a list called <c>three</c>.</p>
    </statement>
    <program label="assess_ch5_5_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(three, ['for', 'find', 'to', 'many', 'they', 'solid', 'for', 'have', 'some', 'ups,'], "Testing that three has the correct value.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch5_6">
    <statement>
      <p><term>Challenge:</term> Create a list called <c>emotions</c> that contains the first word of every line in <c>emotion_words.txt</c>.</p>
    </statement>
    <program label="assess_ch5_6_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(emotions, ['Sad', 'Angry', 'Happy', 'Confused', 'Excited', 'Scared', 'Nervous'], "Testing that emotions was created correctly.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch5_7">
    <statement>
      <p>Assign the first 33 characters from the textfile, <c>travel_plans.txt</c> to the variable <c>first_chars</c>.</p>
    </statement>
    <program label="assess_ch5_7_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFive(self):
      self.assertEqual(first_chars, "This summer I will be travelling.", "Testing that first_chars is assigned to correct value.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch5_8">
    <statement>
      <p><term>Challenge:</term> Using the file <c>school_prompt.txt</c>, if the character 'p' is in a word, then add the word to a list called <c>p_words</c>.</p>
    </statement>
    <program label="assess_ch5_8_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(p_words, ['topic', 'point', 'papers,', 'ups,', 'scripts.'], "Testing that p_words has the correct list.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch5_9">
    <statement>
      <p>Read in the contents of the file <c>SP500.txt</c> which has monthly data for 2016 and 2017 about the S&amp;P 500 closing prices as well as some other financial indicators, including the <q>Long Term Interest Rate</q>, which is interest rate paid on 10-year U.S. government bonds.</p>
      <p>Write a program that computes the average closing price (the second column, labeled SP500) and the highest long-term interest rate. Both should be computed only for the period from June 2016 through May 2017. Save the results in the variables <c>mean_SP</c> and <c>max_interest</c>.</p>
    </statement>
    <program label="assess_ch5_9_editor" interactive="activecode" language="python" codelens="no">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertLess(abs(mean_SP - 2237), 0.5, "Testing that mean_SP is within 0.5 of the correct value. Make sure to use only the correct 12 month period.")
      self.assertEqual(max_interest, 2.49, "Testing the max_interest is correct. Make sure to use only the correct 12 month period.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>

  </exercise>
  <exercise label="assess_ch5_10_lh">
    <statement>
      <p>: <var/>  <var/>  </p>
    </statement>
    <setup>
      <var>
        <image source="FunctionsAndFiles/Figures/cdq5-1.png" width="100%" alt="image of numerous variables being declared and assigned values"/>
        <p>The hello function is in the <BlankNode/> scope, while var_x is in the <BlankNode/> scope.</p>
      </var>
      <var>
        <condition string="^\s*global\s*$">
          <feedback>
            <p>Correct! This function is in the global scope and avalaible for use everywhere.</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Hmmm try again, look at the image to see the different frames</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="assess_ch5_11_lh">
    <statement>
      <p>:</p>
      <image source="FunctionsAndFiles/Figures/cdq5-2.png" width="50%"/>
      <p>What does the following code print? Be sure to examine the current state of the program what will happen on the next executable line. Select as many as apply.</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>an error</p>
        </statement>
        <feedback>
          <p>This is a correct. The code reads top to bottom and we hit an error of hello() not being defined before any prints happen.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>Hmm, this is inside the hello() function. Does our code get that far?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Hello there, I am a method.</p>
        </statement>
        <feedback>
          <p>Hmm, this is inside the hello() function. Does our code get that far?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>x</p>
        </statement>
        <feedback>
          <p>x is a variable, not the value. You can tell because it doesn't have quotes</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>10</p>
        </statement>
        <feedback>
          <p>Hmm, this is at the bottom of our code. Does our code get that far?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="assess_ch5_12_lh">
    <statement>
      <p>Given the image below, select the lines of code that call a function.</p>
      <image source="FunctionsAndFiles/Figures/cdq5-3.png" width="50%"/>
    </statement>
    <feedback>
      <p>Remember, the () indicate a function (even if there is something between them) and that lines that start with def are DEFINING a function, not calling one.</p>
    </feedback>
    <areas>
      <cline>
        <area correct="no">import pickle as p</area>
      </cline>
      <cline>
        <area correct="no">import random as r</area>
      </cline>
      <cline>
        <area correct="no">import string as s</area>
      </cline>
      <cline/>
      <cline>
        <area correct="no">def say_hello():</area>
      </cline>
      <cline>
        <area correct="no">var_x = "Matilda":</area>
      </cline>
      <cline>
        <area correct="yes">print("hi there ", var_x)</area>
      </cline>
      <cline/>
      <cline>
        <area correct="no">def snacks():</area>
      </cline>
      <cline>
        <area correct="yes">say_hello()</area>
      </cline>
      <cline>
        <area correct="yes">print("I love snacks")</area>
      </cline>
      <cline/>
      <cline>
        <area correct="yes">say_hello()</area>
      </cline>
      <cline>
        <area correct="no">type_y =</area>
        <area correct="no">"say_hello()"</area>
      </cline>
    </areas>
  </exercise>
</section>
