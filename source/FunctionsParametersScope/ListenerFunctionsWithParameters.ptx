<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->

    
    
    
    <section xml:id="_listener-functions-with-parameters">
        <title>Listener Functions with Parameters</title>
        <p>Recall that in Chapter 6 we learned about adding interactivity to programs by adding <term>listener functions</term> that can respond to user events. The script below draws one random square, and then allows more squares to be drawn whenever the user presses the r key. The <term>key_r</term> function is a listener function that only gets called when the operating system detects that the r key is pressed by the user, while the turtle window is <term>listening</term> (note the statement on line X that tells the operating system to listen for events on this turtle graphics window).</p>

    <program label="ac8_12_1" interactive="activecode" language="python">
    
        <input>
import turtle
import random

def random_square():
    """ draws a random square with a random small size
        at turtle's current location
         Pre-Condition: Turtle name alex exists """
    side = random.randrange(10, 30) # get random size
    for _ in range(4): #draw a square in location
        alex.forward(side)
        alex.left(90)

def random_location():
    """ Take turtle to a random location on canvas
        Pre-conditions: Assume turtle is named alex, and
        canvas is 400 x 400 """
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.penup()
    alex.goto(x,y) # move to location without drawing
    alex.pendown()

def random_colour():
    """ Sets turtle to a random colour """
    alex.color(random.random(), random.random(), random.random())

def key_r():
    """ draw randomly coloured and positioned square """
    random_colour()
    random_location()
    random_square()

def key_q():
    """ close the canvas window """
    wn.bye()

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex
alex.speed(10)            # make alex draw fast
random_colour()
random_location()
random_square()

wn.onkey(key_r, 'r')    # tell the operating system to execute function 'key_r()' when the 'r' key is pressed on the keyboard
wn.onkey(key_q, 'q')    # tell the operating system to execute function 'key_q()' when the 'q' key is pressed on the keyboard
wn.listen()             # tell the operating system to listen for events on the canvas window
        </input>
<tests>


</tests>

    </program>
        <p>Now that we know about function parameters, we can revisit these listener functions and make use of other types of user events. What if we want the user to define not just when to add a square, but <term>where</term> to add a square? We can register a listener function that will listen for mouse click events. The reason we need parameters is that the operating system, when passing a mouse click event to Python, will pass along x and y coordinates of where in the turtle window the click happened. Those coordinates will be stored in x and y parameters. The script below is a modification of the one above that adds a mouse click listener.</p>

    <program label="ac8_12_2" interactive="activecode" language="python">
    
        <input>
import turtle
import random

def random_square():
    """ draws a random square with a random small size
        at turtle's current location
         Pre-Condition: Turtle name alex exists """
    side = random.randrange(10, 30) # get random size
    for _ in range(4): #draw a square in location
        alex.forward(side)
        alex.left(90)

def random_location():
    """ Take turtle to a random location on canvas
        Pre-conditions: Assume turtle is named alex, and
        canvas is 400 x 400 """
    x = random.randrange(-200, 200) # get random x location
    y = random.randrange(-200, 200) # get random y location
    alex.penup()
    alex.goto(x,y) # move to location without drawing
    alex.pendown()

def random_colour():
    """ Sets turtle to a random colour """
    alex.color(random.random(), random.random(), random.random())

def key_r():
    """ draw randomly coloured and positioned square """
    random_colour()
    random_location()
    random_square()

def key_q():
    """ close the canvas window """
    wn.bye()

def click(x, y):
    """ go to clicked location, pick random color and draw square """
    alex.penup()
    alex.goto(x, y)
    alex.pendown()
    random_colour()
    random_square()

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex
alex.speed(10)            # make alex draw fast
random_colour()
random_location()
random_square()

wn.onkey(key_r, 'r')    # tell the operating system to execute function 'key_r()' when the 'r' key is pressed on the keyboard
wn.onkey(key_q, 'q')    # tell the operating system to execute function 'key_q()' when the 'q' key is pressed on the keyboard
wn.onclick(click)       # tell the operating system to execute function 'click' when the user clicks the mouse
wn.listen()             # tell the operating system to listen for events on the canvas window
        </input>
<tests>


</tests>

    </program>
        <p>Try this out yourself in the script below. The script registers four listener functions. Two are already complete. Complete the other two functions, as specified in the comments.</p>

    <program label="ac8_12_3" interactive="activecode" language="python">
    
        <input>
import turtle
import random

def random_color():
    """ Sets turtle to a random colour """
    alex.color(random.random(), random.random(), random.random())


def quit():
    """ close the canvas window """
    wn.bye()

# TODO: create a toggle_pen function. If the pen is down, lift it up, if the pen is up, put it down.


# TODO: create a move function with x &amp; y parameters. Move the turtle to the given x, y coordinates.


wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex
alex.speed(10)            # make alex draw fast

wn.onkey(random_color, 'c')    # tell the operating system to execute function 'random_colour()' when the 'c' key is pressed on the keyboard
wn.onkey(quit, 'q')    # tell the operating system to execute function 'quit()' when the 'q' key is pressed on the keyboard
wn.onkey(toggle_pen, 'p')    # tell the operating system to execute function 'toggle_pen' when the 'p' key is pressed on the keyboard
wn.onclick(move)       # tell the operating system to execute function 'move' when the user clicks the mouse
wn.listen()             # tell the operating system to listen for events on the canvas window
        </input>
<tests>


</tests>

    </program>
        <p><term>Check your understanding</term></p>

    <exercise label="question8_12_1">
        <statement>

        <p>Where does the message get written on canvas?</p>
        <program language="python"><input>
import turtle
import random


def here(x, y):
    alex.penup()
    alex.goto(x, y)
    alex.pendown()
    alex.write("You are here!")

wn = turtle.Screen()      # Set up the window and its attributes
alex = turtle.Turtle()    # create alex
alex.goto(100, 100)

wn.onclick(here)
wn.listen()
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>center of the canvas</p>
                </statement>
                <feedback>
                    <p>It is possible that it is drawn there, if that's where the user clicks</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>100, 100</p>
                </statement>
                <feedback>
                    <p>It is possible that it is drawn there, if that's where the user clicks</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It doesn't - the 'here' function is never called</p>
                </statement>
                <feedback>
                    <p>The message is in a listener function</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>It depends on where the end user clicks</p>
                </statement>
                <feedback>
                    <p>Yes, because the code displaying the message is in a listener function that is called when the user clicks on the canvas</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

