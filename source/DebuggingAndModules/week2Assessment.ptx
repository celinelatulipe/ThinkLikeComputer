<?xml version="1.0"?>
<section xml:id="debugging-and-modules_chapter-assessment">
  <title>Chapter Assessment</title>
  <subsection xml:id="debugging-and-modules_chapter-assessment-debugging">
    <title>Drawing with Turtles</title>
  <p>
    <term>Check your understanding</term>
  </p>

  <exercise label="assess_ch3_1">
    <statement>
      <p>What are correct ways to tell a turtle named Tex to move forward 20 pixels? Select as many as apply.</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>Tex.forward(20)</p>
        </statement>
        <feedback>
          <p>This is a correct way to move a turtle forward.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>forward() + 20</p>
        </statement>
        <feedback>
          <p>This does not use the turtle method necessary to move a turtle forward. Additionally, how would the program know what turtle should be moving?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>forward(20)</p>
        </statement>
        <feedback>
          <p>This does not use the turtle method necessary to move a turtle forward. Additionally, how would the program know what turtle should be moving?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>forward(20).Tex</p>
        </statement>
        <feedback>
          <p>This is not the correct structure to execute the task.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Tex.forward(10 + 10)</p>
        </statement>
        <feedback>
          <p>You are allowed to write expressions inside of methods, so this is correctly written.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="assess_ch3_2">
    <statement>
      <p>Which is the correct way to make a new instance of the Turtle class?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>turtle(Turtle)</p>
        </statement>
        <feedback>
          <p>When making a new instance of the turtle class, you need to use dot notation.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>turtle.Turtle()</p>
        </statement>
        <feedback>
          <p>Yes, this is the correct way.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Turtle.turtle()</p>
        </statement>
        <feedback>
          <p>turtle represents the class and should be first.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Turtle(turtle)</p>
        </statement>
        <feedback>
          <p>When making a new instance of the turtle class, you need to use dot notation.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="assess_ch3_3">
    <statement>
      <p>What does each instance of the Turtle class represent?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>The turtle class.</p>
        </statement>
        <feedback>
          <p>Though each instance does use the turtle class, this is not the best answer.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The same turtle that is used in each drawing your programs make.</p>
        </statement>
        <feedback>
          <p>Each instance that is made using the turtle class is unique. Remember how you can have multiple 'turtles' in a single drawing? Each of those are different turtles but they are all instances of the turtle class.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>A unique 'turtle' that you can use to draw.</p>
        </statement>
        <feedback>
          <p>Yes, an instance of the turtle class represents a unique turtle. The turtle class is like a stencil or mold that can be used to make as many turtles as you would like.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="assess_ch3_4">
    <statement>
      <p>Select all of the following things that methods can do:</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>Change the value of an attribute.</p>
        </statement>
        <feedback>
          <p>Methods can change the value that is associated with an attribute.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Return values.</p>
        </statement>
        <feedback>
          <p>Methods can return values.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Create new attributes of an instance and set their values.</p>
        </statement>
        <feedback>
          <p>Attributes do not need to be pre-declared; any code can add a new attribute to an instance just by assigning a value to it.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Delete object instances.</p>
        </statement>
        <feedback>
          <p>You do not explicitly delete object instances; when there are no variables or other references to them, so that they can't be accessed, they are automatically deleted.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>None of the above.</p>
        </statement>
        <feedback>
          <p>Methods can do at least one of the above. Take another look.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="assess_ch3_5">
    <statement>
      <p>For an instance of a class that is assigned to the variable <c>student</c>, what is the proper way to refer to the <c>title</c> attribute/instance variable?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>student.title()</p>
        </statement>
        <feedback>
          <p>This accesses the attribute but then tries to invoke it as a method, which will fail if title is not a method.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>title.student()</p>
        </statement>
        <feedback>
          <p>student is the object, so it goes before the period; the attribute goes after.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>title.student</p>
        </statement>
        <feedback>
          <p>student is the object, so it goes before the period; the attribute goes after.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>student(title)</p>
        </statement>
        <feedback>
          <p>This would be the syntax for a function named student being called on a variable named title.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>student.title</p>
        </statement>
        <feedback>
          <p>Yes, this is the correct syntax to use.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="assess_ch3_6">
    <statement>
      <p>What is the name of jane's attribute (not method) that is referred to in the following code? </p>
      <program language="python">
        <input>
        import turtle

        jane = turtle.Turtle()
        jane.forward(20)
        print(jane.x)
      </input>
      </program>
      <p>The attribute is <var/> </p>
    </statement>
    <setup>
      <var width="5">
        <condition string="^\s*x\s*$">
          <feedback>
            <p>Good work!</p>
          </feedback>
        </condition>
        <condition string="^\s*jane\s*$">
          <feedback>
            <p>jane is an instance, not an attribute.</p>
          </feedback>
        </condition>
        <condition string="^\s*forward\s*$">
          <feedback>
            <p>forward is a method.</p>
          </feedback>
        </condition>
        <condition string="^\s*turtle\s*$">
          <feedback>
            <p>turtle is the class, not an attribute.</p>
          </feedback>
        </condition>
        <condition string="^\s*\s*$">
          <feedback>
            <p>Incorrect, try again.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="assess_question1_3_1_1_8">
    <statement>
      <p>What are the names of the instances in the following code? Please put one instance per blank space and enter them in the order that the computer would read them.</p> 
      <program language="python">
        <input>
        import turtle
        wn = turtle.Screen()
  
        jazz = turtle.Turtle()
        jazz.forward(50)
        jazz.right(90)
        pop = turtle.Turtle()
        pop.left(180)
        pop.forward(76)
      </input>
      </program>
      <p> <var/> </p>
      <p> <var/> </p>
      <p> <var/> </p>
    </statement>
    <setup>
      <var>
        <condition string="^\s*wn\s*$">
          <feedback>
            <p>Good work!</p>
          </feedback>
        </condition>
        <condition string="^\s*jazz\s*$">
          <feedback>
            <p>Try a different location</p>
          </feedback>
        </condition>
        <condition string="^\s*pop\s*$">
          <feedback>
            <p>Try a different location</p>
          </feedback>
        </condition>
        <condition string="^\s*\s*$">
          <feedback>
            <p>Incorrect, try again.</p>
          </feedback>
        </condition>
      </var>
      <var>
        <condition string="^\s*jazz\s*$">
          <feedback>
            <p>Good work!</p>
          </feedback>
        </condition>
        <condition string="^\s*wn\s*$">
          <feedback>
            <p>Try a different location</p>
          </feedback>
        </condition>
        <condition string="^\s*pop\s*$">
          <feedback>
            <p>Try a different location</p>
          </feedback>
        </condition>
        <condition string="^\s*\s*$">
          <feedback>
            <p>Incorrect, try again.</p>
          </feedback>
        </condition>
      </var>
      <var>
        <condition string="^\s*pop\s*$">
          <feedback>
            <p>Good work!</p>
          </feedback>
        </condition>
        <condition string="^\s*wn\s*$">
          <feedback>
            <p>Try a different location</p>
          </feedback>
        </condition>
        <condition string="^\s*jazz\s*$">
          <feedback>
            <p>Try a different location</p>
          </feedback>
        </condition>
        <condition string="^\s*\s*$">
          <feedback>
            <p>Incorrect, try again.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  </subsection>
  <subsection xml:id="debugging-and-modules_chapter-assessment-turtles">
    <title>Drawing with Turtles</title>
    <exercise label="assess_ch3_7">
      <statement>
        <p>Write code to draw a regular pentagon (a five-sided figure with all sides the same length).</p>
      </statement>
      <program label="assess_ch3_7_editor" interactive="activecode" language="python" codelens="no">
        <input>
import turtle
        </input>
      <tests>
    </tests>
      </program>
    </exercise>
    <exercise label="assess_ch3_8">
      <statement>
        <p>Write a program that uses the turtle module to draw something. It doesn't have to be complicated, but draw something different than we have done in the past. (Hint: if you are drawing something complicated, it could get tedious to watch it draw over and over. Try setting <c>.speed(10)</c> for the turtle to draw fast, or <c>.speed(0)</c> for it to draw super fast with no animation.)</p>
      </statement>
      <program label="assess_ch3_8_editor" interactive="activecode" language="python" codelens="no">
        <input>
import turtle
        </input>
      <tests>
    </tests>
      </program>
    </exercise>
  </subsection>
  <subsection xml:id="debugging-and-modules_debugging-modules">
    <title>Debugging &amp; Modules</title>
    <exercise label="assess_ch3_9_lh">
      <statement>
        <image source="DebuggingAndModules/Figures/cdq3-1.png" width="100%" alt="module random being imported"/>
        <p>Given the above screenshot of the CodeLens animation, we can say that modules (e.g random) are which of the following?</p>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>variables</p>
          </statement>
          <feedback>
            <p>modules make use of lots of functions and variables but they are not variables themselves, do you see that arrow in the image?</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>objects</p>
          </statement>
          <feedback>
            <p>Correct! The arrow in the screenshot tells us that a module is an object being referenced.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>modules can be called as variables or objects</p>
          </statement>
          <feedback>
            <p>While we sometimes think of variables and objects in a similar fashion they aren't the same thing and modules definitely are not both.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>none, they are their own unique label</p>
          </statement>
          <feedback>
            <p>Everything in Python has to be stored somewhere on a computer, even modules. This means modules have to be types of variables or objects.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="assess_ch3_10_lh">
      <statement>
        <image source="DebuggingAndModules/Figures/cdq3-2.png" width="100%" alt="calculating the mean of 3 numbers"/>
        <p> Consider the above screenshot of the CodeLens animation. This code is supposed to calculate the mean (average) of the 3 numbers but there is a semantic error on which line number? <var/> </p>
      </statement>
      <setup>
        <var>
          <condition string="^\s*4\s*$">
            <feedback>
              <p>Correct! Order of operations comes into play here and we need some brackets. Try writing this code for yourself with the right brackets and see if you can get the correct mean (should be 4).</p>
            </feedback>
          </condition>
          <condition string="^\s*1\s*$">
            <feedback>
              <p>Semantic errors have to do with logic. This statement assigns a value to the variable num1.</p>
            </feedback>
          </condition>
          <condition string="^\s*2\s*$">
            <feedback>
              <p>Semantic errors have to do with logic. This statement assigns a value to the variable num2.</p>
            </feedback>
          </condition>
          <condition string="^\s*3\s*$">
            <feedback>
              <p>Semantic errors have to do with logic. This statement assigns a value to the variable num3.</p>
            </feedback>
          </condition>
          <condition string="^\s*5\s*$">
            <feedback>
              <p>Semantic errors have to do with logic. This statement does not involve any calculations.</p>
            </feedback>
          </condition>
          <condition string="^\s*\s*$">
            <feedback>
              <p>Invalid response. Enter only an integer value (1 to 5 inclusive).</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="assess_ch3_11_lh">
      <statement>
        <image source="DebuggingAndModules/Figures/cdq3-3.png" width="100%" alt="code with type error in it"/>
        <p>Fill in the blanks to describe how you would fix the error seen above.</p>
        <p>This type error can be solved by <var/>  one of the variables to a(n) <var/>.</p>
      </statement>
      <setup>
        <var>        
          <condition string="^\s*casting|cast|converting|changing|type converting\s*$">
            <feedback>
              <p>Correct.</p>
            </feedback>
          </condition>
          <condition string="^\s\s*$">
            <feedback>
              <p>Try again.</p>
            </feedback>
          </condition>
        </var>
        <var>        
          <condition string="^\s*integer|int\s*$">
            <feedback>
              <p>Correct.</p>
            </feedback>
          </condition>
          <condition string="^\s\s*$">
            <feedback>
              <p>Try again.</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
  </subsection>
</section>
