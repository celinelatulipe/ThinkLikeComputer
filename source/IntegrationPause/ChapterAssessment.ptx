<?xml version="1.0"?>

    
    
    <section xml:id="_integration-practice">
        <title>Integration Practice</title>

    <exercise label="assess_ch7_1_lh">
        <statement>

        <blockquote>
            <image source="IntegrationPause/Figures/cdq7-1.png" width="100%" alt="if statement code"/>
            <p>The CodeLens screenshot above shows a piece of code mid execution. Which of the following images shows the correct global frame state?
                Pay special attention to where the arrows are in the screenshot.</p>
            <image source="IntegrationPause/Figures/cdq7-1-mc.png" width="100%" alt="if statement code"/>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>i</p>
                </statement>
                <feedback>
                    <p>Not quite, walk through the code line by line</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>ii</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>iii</p>
                </statement>
                <feedback>
                    <p>Not quite, walk through the code line by line</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="assess_ch7_2_lh">
        <statement>

        <blockquote>
            <image source="IntegrationPause/Figures/cdq7-2.png" width="100%" alt="if statement code"/>
            <p>Which code snippet would result in the given CodeLens screenshot of the Global frame?</p>
            <image source="IntegrationPause/Figures/cdq7-2-mc.png" width="100%" alt="if statement code"/>
        </blockquote>

        </statement>
        <choices>

            <choice correct="yes">
                <statement>
                    <p>i</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ii</p>
                </statement>
                <feedback>
                    <p>Not quite, walk through the code line by line and see what it would produce</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>iii</p>
                </statement>
                <feedback>
                    <p>Not quite, walk through the code line by line</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="assess_ch7_3_lh">
    <statement>
        <image source="IntegrationPause/Figures/cdq7-3.png" width="100%" alt="code to run"/>
        <p>
            Using the image of the CodeLens program above, what will the program output to the console?
            <var/>
        </p> 
    </statement>
    <!-- </exercise> -->
<setup>
    <var>
        
        <condition string="^\s*21\s*$">
            <feedback>
                <p>Correct! Great job understanding the code</p>
            </feedback>
        </condition>
        <condition string="^\s*\s*$">
            <feedback>
                <p>Incorrect.</p>
            </feedback>
        </condition>
    </var>
</setup>
</exercise>   

<exercise xml:id="assess_ch7_4_lh">
    <statement>
        <p>
            3.	Write a Python program that asks the user to enter a temperature in Celsius three times (accomplish this using a loop). 
            For each input, calculate and display the equivalent temperature in Fahrenheit (accomplish this using a function called <term>temperature_convertor</term>). 
            Your function should return the temperature in Fahrenheit for each iteration. Print this temperature to the user.
        </p>

    </statement>
    <program xml:id="assess_ch7_4_lh_editor" interactive="activecode" language="python">

        <input>
        </input>
<tests>
    from unittest.gui import TestCaseGui

    class myTests(TestCaseGui):
    
       def testTwo(self):
          self.assertEqual(temperature_convertor(0), 32, "Testing that temperature_convertor(0) returns 32")
          self.assertEqual(temperature_convertor(56), 132.8, "Testing that temperature_convertor(56) returns 132.8")
    
    myTests().main()
</tests>

    </program>
</exercise>
 </section>

