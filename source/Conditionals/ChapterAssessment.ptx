<?xml version="1.0"?>
<section xml:id="conditionals_chapter-assessment">
  <title>Chapter Assessment</title>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="assess_ch6_1">
    <statement>
      <p><c>rainfall_mi</c> is a string that contains the average number of inches of rainfall in Michigan for every month (in inches) with every month separated by a comma.
            Write code to compute the number of months that have more than 3 inches of rainfall. Store the result in the variable <c>num_rainy_months</c>.
            In other words, count the number of items with values <c>&gt; 3.0</c>.</p>
      <p>Hard-coded answers will receive no credit.</p>
    </statement>
    <program label="assess_ch6_1_editor" interactive="activecode" language="python">
      <input>
rainfall_mi = "1.65, 1.46, 2.05, 3.03, 3.35, 3.46, 2.83, 3.23, 3.5, 2.52, 2.8, 1.85"
=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertIn('for', self.getEditorText(), "Testing that your code has a for loop (Don't worry about actual and expected values).")
        self.assertEqual(num_rainy_months, 5, "Testing that num_rainy_months has the right value")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_2">
    <statement>
      <p>The variable <c>sentence</c> stores a string. Write code to determine how many words in <c>sentence</c> start and end with the same letter, including one-letter words.
            Store the result in the variable <c>same_letter_count</c>.</p>
      <p>Hard-coded answers will receive no credit.</p>
    </statement>
    <program label="assess_ch6_2_editor" interactive="activecode" language="python">
      <input>
sentence = "students flock to the arb for a variety of outdoor activities such as jogging and picnicking"

# Write your code here.


        </input>
      <tests>

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(same_letter_count, 2, "Checking that same_letter_count has the correct value")
        self.assertIn('for ', self.getEditorText(), "Testing that your code has a for loop")
myTests().main()
</tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_3">
    <statement>
      <p>Write code to count the number of strings in list <c>items</c> that have the character <c>w</c> in it. Assign that number to the variable <c>acc_num</c>.</p>
      <p>HINT 1: Use the accumulation pattern!</p>
      <p>HINT 2: the <c>in</c> operator checks whether a substring is present in a string.</p>
      <p>Hard-coded answers will receive no credit.</p>
    </statement>
    <program label="assess_ch6_3_editor" interactive="activecode" language="python">
      <input>
items = ["whirring", "wow!", "calendar", "wry", "glass", "", "llama","tumultuous","owing"]


=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertIn(' in ', self.getEditorText(), "Testing that you are using the in operator.")
        self.assertEqual(acc_num, 4, "Testing that acc_num has been set to the number of strings that have 'w' in them.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_4">
    <statement>
      <p>Write code that counts the number of words in <c>sentence</c> that contain <em>either</em> an <q>a</q> or an <q>e</q>. Store the result in the variable <c>num_a_or_e</c>.</p>
      <p>Note 1: be sure to not double-count words that contain both an a and an e.</p>
      <p>HINT 1: Use the <c>in</c> operator.</p>
      <p>HINT 2: You can either use <c>or</c> or <c>elif</c>.</p>
      <p>Hard-coded answers will receive no credit.</p>
    </statement>
    <program label="assess_ch6_4_editor" interactive="activecode" language="python">
      <input>
sentence = "python is a high level general purpose programming language that can be applied to many different classes of problems."


=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertIn(' in ', self.getEditorText(), "Testing that you are using the in operator.")
        self.assertEqual(num_a_or_e, 14, "Testing that num_a_or_e has been set to the correct number.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_5">
    <statement>
      <p>Write code that will count the number of vowels in the sentence <c>s</c> and assign the result to the variable <c>num_vowels</c>. For this problem, vowels are only a, e, i, o, and u. Hint: use the <c>in</c> operator with <c>vowels</c>.</p>
    </statement>
    <program label="assess_ch6_5_editor" interactive="activecode" language="python">
      <input>
s = "singing in the rain and playing in the rain are two entirely different situations but both can be fun"
vowels = ['a','e','i','o','u']

# Write your code here.


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
       self.assertEqual(num_vowels, 32, "testing whether num_vowels is set correctly")

    def testOneA(self):
       self.assertIn('for', self.getEditorText(), "Testing that you are using a for loop.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_6">
    <statement>
      <p>Create one conditional so that if <q>Friendly</q> is in <c>w</c>, then <q>Friendly is here!</q> should be assigned to the variable <c>wrd</c>. If it's not, check if <q>Friend</q> is in <c>w</c>. If so, the string <q>Friend is here!</q> should be assigned to the variable <c>wrd</c>, otherwise <q>No variation of friend is in here.</q> should be assigned to the variable <c>wrd</c>. (Also consider: does the order of your conditional statements matter for this problem? Why?)</p>
    </statement>
    <program label="assess_ch6_6_editor" interactive="activecode" language="python">
      <input>
w = "Friendship is a wonderful human experience!"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(wrd, "Friend is here!", "Testing the value of wrd")
      self.assertIn("else", self.getEditorText(), "Checking that you used an else clause.")
      self.assertIn("elif", self.getEditorText(), "Checking that you used an elif clause.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_7">
    <statement>
      <p>We have written conditionals for you to use. Create the variable x and assign it some integer so that at the end of the code, <c>output</c> will be assigned the string <c>"Consistently working"</c>.</p>
    </statement>
    <program label="assess_ch6_7_editor" interactive="activecode" language="python">
      <input>
if x &gt;= 10:
    output = "working"
else:
    output = "Still working"
if x &gt; 12:
    output = "Always working"
elif x &lt; 7:
    output = "Forever working"
else:
    output = "Consistently working"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(output, "Consistently working", "Testing the value of output")
   def testTwo(self):
      self.assertIn(x, [7,8,9,10,11,12], "Testing that x was assigned a correct number" )

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_8">
    <statement>
      <p>Write code so that if <c>"STATS 250"</c> is in the list <c>schedule</c>, then the string <c>"You could be in Information Science!"</c> is assigned to the variable <c>resp</c>. Otherwise, the string <c>"That's too bad."</c> should be assigned to the variable <c>resp</c>.</p>
    </statement>
    <program label="assess_ch6_8_editor" interactive="activecode" language="python">
      <input>
schedule = ["SI 106", "STATS 250", "SI 110", "ENGLISH 124/125"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(resp, "You could be in Information Science!", "Testing the value of resp given the schedule list provided.")
      self.assertIn("if", self.getEditorText(), "Testing that you used an if clause.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_9">
    <statement>
      <p>Create the variable <c>z</c> whose value is <c>30</c>. Write code to see if <c>z</c> is greater than <c>y</c>. If so, add 5 to <c>y</c>'s value, otherwise do nothing. Then, multiply <c>z</c> and <c>y</c>, and assign the resulting value to the variable <c>x</c>.</p>
    </statement>
    <program label="assess_ch6_9_editor" interactive="activecode" language="python">
      <input>
y = 22

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(x, 810, "Testing the value of x")
   def testTwo(self):
      self.assertEqual(z, 30, "Testing the value of z.")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_10">
    <statement>
      <p>For each string in <c>wrd_lst</c>, find the number of characters in the string. If the number of characters is less than 6, add 1 to <c>accum</c> so that in the end, <c>accum</c> will contain an integer representing the total number of words in the list that have fewer than 6 characters.</p>
    </statement>
    <program label="assess_ch6_10_editor" interactive="activecode" language="python">
      <input>
wrd_lst = ["Hello", "activecode", "Java", "C#", "Python", "HTML and CSS", "Javascript", "Swift", "php"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(accum, 5, "Testing the value of accum")
      self.assertIn('for ', self.getEditorText(), "Testing that your code has a for loop")

myTests().main()
        </input>
    <tests>
    </tests>
    </program>
  </exercise>
  <exercise label="assess_ch6_11_lh">
    <statement>
      <image source="Conditionals/Figures/cdq6-1.png" width="100%"/>
        <p>The CodeLens image (above) shows how the <c>and</c> operator is evaluated by Python.</p>
        <p>The truth table (below) is suppose to evaluate <q>A and B</q>, but it has some incorrect values in the third column.</p>
        <p>Click on the <term>INCORRECT</term> "A and B" values in the table below.</p>
        <p></p>
        <p></p>
    </statement>
    <areas>
      <table>
        <title>Truth Table</title>
        <tabular halign="center">
          <row>
            <cell bottom="major"> A </cell>
            <cell bottom="major"> B </cell>
            <cell bottom="major"> A and B </cell>
          </row>
          <row>
            <cell> True </cell>
            <cell> False </cell>
            <cell> <area correct="yes"> True </area> </cell> 
          </row>
          <row>
            <cell> False </cell>
            <cell> False </cell>
            <cell> <area correct="yes"> True </area> </cell> 
          </row>
          <row>
            <cell> True </cell>
            <cell> True </cell>
            <cell> <area correct="no"> True </area> </cell>
          </row>
          <row>
            <cell> False </cell>
            <cell> True </cell>
            <cell> <area correct="no"> False </area> </cell>
          </row>
        </tabular>
      </table>
    </areas>
  </exercise>
  <image source="Conditionals/Figures/cdq6-2.png" width="50%"/>
  <exercise label="assess_ch6_12_lh">
    <statement>
      <p>This code has a semantic error. Notice in the CodeLens image above that the output states the user is underage. Without changing the values of the variables, select the portion of the code that needs to change.</p>
    </statement>
    <feedback>
      <p>Consider the different boolean logic operators and what each means</p>
    </feedback>
    <areas>
      <cline>MANITOBA_LEGAL_AGE = <area correct="no">18</area></cline>
      <cline/>
      <cline>my_age = <area correct="no">18</area></cline>
      <cline/>
      <cline>
        <area correct="no">if my_age</area>
        <area correct="yes">&gt;</area>
        <area correct="no">MANITOBA_LEGAL_AGE:</area>
      </cline>
      <cline>
        <area correct="no">print("You are of legal age in Manitoba")</area>
      </cline>
      <cline>
        <area correct="no">else:</area>
      </cline>
      <cline>
        <area correct="no">print("You are underage in Manitoba")</area>
      </cline>
    </areas>
  </exercise>
  <exercise label="assess_ch6_13">
    <statement>
      <p>Given that same code/image from the previous question, what operator should be used so the code works as intended? <var/>  </p>
    </statement>
    <setup>
      <var>
        <condition string="^\s*&gt;=\s*$">
          <feedback>
            <p>Correct! You are legal in Manitoba if your age is greater than OR equal to 18</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Hmmm try again, you may want to review the different types of boolean operators</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="assess_ch6_14_lh">
    <statement>
      <image source="Conditionals/Figures/cdq6-3.png" width="90%"/>
      <p>Given num = 49 on line 3, what value of i will cause line 14 to run? 
        <var/> 
      </p>
      <note> <p> Prime numbers are numbers greater than 1 that only have two factors, 1 and the number itself. 
        Notice that in order to reach line 14, line 12 must evaluate to true. 
        Walk through the code to determine what is happening here and what the value will be when line 12 becomes true.
      </p>  </note>
    </statement>
    <setup>
      <var>
        <condition string="^\s*7\s*$">
          <feedback>
            <p>Correct! When i = 7, (num % i) will equal 0.</p>
          </feedback>
        </condition>
        <condition string="^\s*\s*$">
          <feedback>
            <p>Hmmm try again, what causes the conditional on line 12 to be true?</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>
