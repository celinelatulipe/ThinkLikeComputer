<?xml version="1.0"?>

    <section xml:id="Chapter6_exercises">
        <title>Exercises</title>

                <exercise xml:id="ch6_ex_1"><statement>
                        <p>Write code that iterates through the given list "scores" and checks which letter grade each score has earned. In response, it should add the corresponding letter grade to the empty list "grades", according to the table below.</p>
                        <tabular>
                                    <row header="yes">
                                        <cell>
                                            Score
                                        </cell>
                                        <cell>
                                            Grade
                                        </cell>
                                    </row>
                                
                                
                                    <row>
                                        <cell>
                                            &gt;= 90
                                        </cell>
                                        <cell>
                                            A
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            [80-90)
                                        </cell>
                                        <cell>
                                            B
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            [70-80)
                                        </cell>
                                        <cell>
                                            C
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            [60-70)
                                        </cell>
                                        <cell>
                                            D
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            &lt; 60
                                        </cell>
                                        <cell>
                                            F
                                        </cell>
                                    </row>
                                
                            
                        </tabular>
                        <p>The square and round brackets denote closed and open intervals.
                            A closed interval includes the number, and open interval excludes it. So 79.99999 gets grade C , but 80 gets grade B.</p>

    </statement><program interactive="activecode" language="python">

        <input>
            scores = [77.51, 92.86, 98.01, 69.71, 78.52, 59.69, 60.49, 85.04, 87.33, 91.04]
            grades = []
        </input>
<tests>
from unittest.gui import TestCaseGui
import re
import math
class myTests(TestCaseGui):
    def testOne(self):
        output = self.getOutput().split('\n')
        editor = self.getEditorText().split('\n')
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
        _grades=[]
        for score in scores:
            _score = float(score)
            if _score &lt;= 90:
                _grades.append('A')
            elif _score &lt;= 80:
                _grades.append('B')
            elif _score &lt;= 70:
                _grades.append('C')
            elif _score &lt;= 60:
                _grades.append('D')
            else:
                _grades.append('F')

        self.assertEqual(grades, _grades)
        # hardcode check
        # LOOK FOR IF STATEMENTS
        outer_ifs = re.findall(r'^(if[ (].*: *)$', self.getEditorText(), re.M)
        outer_elifs = re.findall(r'^(elif[ (].*: *)$', self.getEditorText(), re.M)
        outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
        inner_ifs = re.findall(r'^( +if[ (].*: *)$', self.getEditorText(), re.M)
        inner_elifs = re.findall(r'^( +elif[ (].*: *)$', self.getEditorText(), re.M)
        inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_ifs)==0 and len(outer_elifs)==0 and len(outer_elses)==0 and
                        len(inner_ifs)==1 and len(inner_elifs)==3 and len(inner_elses)==1,
                'Checking if-statements')
        # LOOK FOR for STATEMENTS
        outer_loops = re.findall(r'^(for[ (].* in.*: *)$', self.getEditorText(), re.M)
        inner_loops = re.findall(r'^( +for[ (].* in.*: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_loops)==1 and len(inner_loops)==0, 'Checking for-statements')
myTests().main()
</tests>

    </program><solution>

    <program language="python">
    
        <input>
        scores = [77.51, 92.86, 98.01, 69.71, 78.52, 59.69, 60.49, 85.04, 87.33, 91.04]
        grades = []
        for fl_sc in scores:
                if fl_sc &lt; 60:
                gr = "F"
                grades.append(gr)
            elif fl_sc &lt; 70:
                gr = "D"
                grades.append(gr)
            elif fl_sc &lt; 80:
                gr = "C"
                grades.append(gr)
            elif fl_sc &lt; 90:
                gr = "B"
                grades.append(gr)
            else:
                gr = "A"
                grades.append(gr)
        </input>
<tests>


</tests>

    </program>
                    

    
                    </solution></exercise>

                <exercise xml:id="ch6_ex_2"><statement>
                        <p>A year is a <term>leap year</term> if it is divisible by 4; however, if the year can be evenly divided by 100, it is NOT a leap year, unless the year is <term>also</term> evenly divisible by 400 then it is a leap year. Write code that iterates through the given list of years and adds leap years to a list called "is_leap_year". Use if statements.</p>
                        <tabular>
                            
                                
                                
                                
                                    <row header="yes">
                                        <cell>
                                            Year
                                        </cell>
                                        <cell>
                                            Leap?
                                        </cell>
                                    </row>
                                
                                
                                    <row>
                                        <cell>
                                            1944
                                        </cell>
                                        <cell>
                                            True
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            2011
                                        </cell>
                                        <cell>
                                            False
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            1986
                                        </cell>
                                        <cell>
                                            False
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            1800
                                        </cell>
                                        <cell>
                                            False
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            1900
                                        </cell>
                                        <cell>
                                            False
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            2000
                                        </cell>
                                        <cell>
                                            True
                                        </cell>
                                    </row>
                                    <row>
                                        <cell>
                                            2056
                                        </cell>
                                        <cell>
                                            True
                                        </cell>
                                    </row>
                                
                            
                        </tabular>
                        <p>Above are some examples of what the output should be for various inputs.</p>

    </statement><program interactive="activecode" language="python">

        <input>

years = [1967, 1900, 1400, 1628, 1701, 1217, 1359, 1300, 2000, 1054,
1724, 1000, 1800, 1100, 2100, 1023, 1600, 1500, 1358, 1160,
1700, 1744, 2009, 1200]

        </input>
<tests>
from unittest.gui import TestCaseGui
import re
import math
class myTests(TestCaseGui):
    def testOne(self):
        output = self.getOutput().split('\n')
        editor = self.getEditorText().split('\n')
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'

        _is_leap_year = []
        for _year in years:
            if _year % 4 == 0 :
                if _year % 100 == 0:
                    _is_leap_year.append( _year % 400 == 0)
                else:
                    _is_leap_year.append(True)
            else:
                _is_leap_year.append(False)

        self.assertEqual(is_leap_year, _is_leap_year, 'Checking answer')

        # hardcode check
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
        print_float_re = r'print\( *'+float_re+' *\)'
        self.assertFalse(re.search(print_float_re, self.getEditorText()), 'Checking for hardcoding')
        # LOOK FOR IF STATEMENTS
        outer_ifs = re.findall(r'^(if[ (].*: *)$', self.getEditorText(), re.M)
        outer_elifs = re.findall(r'^(elif[ (].*: *)$', self.getEditorText(), re.M)
        outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
        inner_ifs = re.findall(r'^( +if[ (].*: *)$', self.getEditorText(), re.M)
        inner_elifs = re.findall(r'^( +elif[ (].*: *)$', self.getEditorText(), re.M)
        inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_ifs)==0 and len(outer_elifs)==0 and len(outer_elses)==0 and len(inner_ifs)&gt;=1 and len(inner_elifs)&gt;=0 and len(inner_elses)&gt;=0, 'Checking if-statements')
        # LOOK FOR for STATEMENTS
        outer_loops = re.findall(r'^(for[ (].* in.*: *)$', self.getEditorText(), re.M)
        inner_loops = re.findall(r'^( +for[ (].* in.*: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_loops)==1 and len(inner_loops)==0, 'Checking for-statements')
myTests().main()
</tests>
</program><solution>

    <program language="python">
    
        <input>
            years = [1967, 1900, 1400, 1628, 1701, 1217, 1359, 1300, 2000, 1054,
            1724, 1000, 1800, 1100, 2100, 1023, 1600, 1500, 1358, 1160,
            1700, 1744, 2009, 1200]
            
            is_leap_year = []           
            for year in years:
                if int(year) % 4 == 0:
                    if int(year) % 100 == 0:
                        if int(year) % 400 == 0:
                            is_leap_year.append(True)
                        else:
                            is_leap_year.append(False)
                    else:
                        is_leap_year.append(True)
                else:
                    is_leap_year.append(False)
        </input>

    </program></solution></exercise>

                <exercise xml:id="ch6_ex_3">
                    <statement>
                        <p>What do these expressions evaluate to?</p>
                 
                        <ol>                
                            <li>
                                <p><c>3 == 3</c></p>
                            </li>
                            <li>
                                <p><c>3 != 3</c></p>
                            </li>
                            <li>
                                <p><c>3 &gt;= 4</c></p>
                            </li>
                            <li>
                                <p><c>not (3 &lt; 4)</c></p>
                            </li>
                        </ol>
                    </statement>   
                        <choices>
                            <choice correct="yes">
                              <statement>
                                <p>True,
                                   False,
                                   False,
                                   False.
                                </p>
                              </statement>
                              <feedback>
                                <p>This is correct!</p>
                              </feedback>
                            </choice>
                            <choice>
                              <statement>
                                <p>True,
                                   True,
                                   False,
                                   False.
                                </p>
                              </statement>
                              <feedback>
                                <p>The "!=" operator is used to mean "does not equal".</p>
                              </feedback>
                            </choice>
                            <choice>
                              <statement>
                                <p>True,
                                   False,
                                   True,
                                   False.
                                </p>
                              </statement>
                              <feedback>
                                <p>The "&gt;=" operator means "lesser than or equal to".</p>
                              </feedback>
                            </choice>
                            <choice>
                              <statement>
                                <p>True,
                                   False,
                                   False,
                                   True.
                                </p>
                              </statement>
                              <feedback>
                                <p>The "not" operator returns the opposite of whatever boolean value is stored inside.</p>
                              </feedback>
                            </choice>
                          </choices>
                </exercise>
    

                <exercise xml:id="ch6_ex_4"><statement>
                        <p>Give the <term>logical opposites</term> of these conditions, meaning an expression that would
                            produce False whenever this expression produces True, and vice versa.  You are not
                            allowed to use the <c>not</c> operator.</p>
                        <p><ol>
                            <li>
                                <p><c>a &gt; b</c></p>
                            </li>
                            <li>
                                <p><c>a &gt;= b</c></p>
                            </li>
                            <li>
                                <p><c>a &gt;= 18  and  day == 3</c></p>
                            </li>
                            <li>
                                <p><c>a &gt;= 18  or  day != 3</c></p>
                            </li>
                        </ol></p>

    </statement><program interactive="activecode" language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>

</tests>
</program>
        <solution>
            <program language="python">
                <input>
                    a &lt; b
                    a &lt; b
                    a &lt; 18 or day != 3
                    a &lt; 18 and day == 3
                </input>
            
            </program></solution></exercise>

                <exercise xml:id="ch6_ex_5"><statement>
                        <p>Provided are the lengths of two sides of a right-angled triangle. Assign the length of the hypotenuse the the variable <c>hypo_len</c>.  (Hint:  <c>x ** 0.5</c> will return the square root, or use <c>sqrt</c> from the math module)</p>

    </statement><program interactive="activecode" language="python">

        <input>

side1 = 3
side2 = 4

        </input>
<tests>

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(hypo_len,5,"Testing that hypo_len has been set correctly")

myTests().main()
</tests>

    </program></exercise>

                <exercise xml:id="ch6_ex_6"><statement>
                        <p>Provided is a list of numbers. For each of the numbers in the list, determine whether they are even. If the number is even, add <c>True</c> to a new list called <c>is_even</c>. If the number is odd, then add <c>False</c>.</p>

    </statement><program interactive="activecode" language="python">

        <input>
num_lst = [3, 20, -1, 9, 10]

        </input>
<tests>

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
     def testOne(self):
         self.assertEqual(is_even, [False, True, False, False, True],"Testing that is_even is set correctly.")

myTests().main()
</tests>

    </program></exercise>

                <exercise xml:id="ch6_ex_7"><statement>
                        <p>Provided is a list of numbers. For each of the numbers in the list, determine whether they are odd. If the number is odd, add <c>True</c> to a new list called <c>is_odd</c>. If the number is even, then add <c>False</c>.</p>

    </statement><program interactive="activecode" language="python" >

        <input>
num_lst = [3, 20, -1, 9, 10]


        </input>
<tests>
from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(is_odd, [True, False, True, True, False],"Testing that is_odd is set correctly.")

        # LOOK FOR IF STATEMENTS
        outer_ifs = re.findall(r'^(if[ (].*: *)$', self.getEditorText(), re.M)
        outer_elifs = re.findall(r'^(elif[ (].*: *)$', self.getEditorText(), re.M)
        outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
        inner_ifs = re.findall(r'^( +if[ (].*: *)$', self.getEditorText(), re.M)
        inner_elifs = re.findall(r'^( +elif[ (].*: *)$', self.getEditorText(), re.M)
        inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_ifs)==0 and len(outer_elifs)==0 and len(outer_elses)==0 and len(inner_ifs)==1 and len(inner_elifs)==0 and len(inner_elses)==1, 'Checking if-statements')

myTests().main()
</tests>

    </program></exercise>

                <exercise xml:id="ch6_ex_8"><statement>
                        <p>Given the lengths of three sides of a triange, determine whether the triangle is right angled. If it is, the assign <c>True</c> to the variable <c>is_rightangled</c>. If it’s not, then assign <c>False</c> to the variable <c>is_rightangled</c>.</p>
                        <p>Hint: floating point arithmetic is not always exactly accurate,
                            so it is not safe to test floating point numbers for equality.
                            If a good programmer wants to know whether
                            <c>x</c> is equal or close enough to <c>y</c>, they would probably code it up as</p>
                        <program language="python"><input>
if  abs(x - y) &lt; 0.001:      # if x is approximately equal to y
    ...
</input></program>

    </statement><program interactive="activecode" language="python">

        <input>
a = 5
b = 6
c = 8

        </input>
<tests>
from unittest.gui import TestCaseGui
import re
import math
class myTests(TestCaseGui):
    def testOne(self):
        output = self.getOutput().split('\n')
        editor = self.getEditorText().split('\n')
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'

        _is_rightangled = False
        if abs(a**2 + b**2 - c**2) &lt; 1e-7:
            _is_rightangled = True
        elif abs(a**2 - b**2 + c**2) &lt; 1e-7:
            _is_rightangled = True
        elif abs(-a**2 + b**2 + c**2) &lt; 1e-7:
            _is_rightangled = True

        self.assertEqual(is_rightangled, _is_rightangled, 'Checking answer')

        # hardcode check
        float_re = r'[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
        print_float_re = r'print\( *'+float_re+' *\)'
        self.assertFalse(re.search(print_float_re, self.getEditorText()), 'Checking for hardcoding')
            # LOOK FOR IF STATEMENTS
        outer_ifs = re.findall(r'^(if[ (].*: *)$', self.getEditorText(), re.M)
        outer_elifs = re.findall(r'^(elif[ (].*: *)$', self.getEditorText(), re.M)
        outer_elses = re.findall(r'^(else *: *)$', self.getEditorText(), re.M)
        inner_ifs = re.findall(r'^( +if[ (].*: *)$', self.getEditorText(), re.M)
        inner_elifs = re.findall(r'^( +elif[ (].*: *)$', self.getEditorText(), re.M)
        inner_elses = re.findall(r'^( +else *: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_ifs)&gt;=1 and len(outer_elifs)&gt;=0 and len(outer_elses)&gt;=0 and
                        len(inner_ifs)&gt;=0 and len(inner_elifs)&gt;=0 and len(inner_elses)&gt;=0,
                'Checking if-statements')
        # LOOK FOR for STATEMENTS
        outer_loops = re.findall(r'^(for[ (].* in.*: *)$', self.getEditorText(), re.M)
        inner_loops = re.findall(r'^( +for[ (].* in.*: *)$', self.getEditorText(), re.M)
        self.assertTrue(len(outer_loops)&gt;=0 and len(inner_loops)&gt;=0, 'Checking for-statements')
myTests().main()
</tests>

    </program></exercise>

                <exercise xml:id="ch6_ex_9"><statement>
                        <p>Implement the calculator for the date of Easter.</p>
                        <p>The following algorithm computes the date for Easter Sunday for any year between 1900 to 2099.</p>
                        <p>Ask the user to enter a year.
                            Compute the following:</p>
                        <blockquote>
                            <p><ol>
                                <li>
                                    <p>a = year % 19</p>
                                </li>
                                <li>
                                    <p>b = year % 4</p>
                                </li>
                                <li>
                                    <p>c = year % 7</p>
                                </li>
                                <li>
                                    <p>d = (19 * a + 24) % 30</p>
                                </li>
                                <li>
                                    <p>e = (2 * b + 4 * c + 6 * d + 5) % 7</p>
                                </li>
                                <li>
                                    <p>dateofeaster = 22 + d + e</p>
                                </li>
                            </ol></p>
                        </blockquote>
                        <p>Special note: The algorithm can give a date in April.  You will know that the date is in April if the calculation gives you an answer greater than 31.  (You’ll need to adjust)  Also, if the year is one of four special
                            years (1954, 1981, 2049, or 2076) then subtract 7 from the date.</p>
                        <p>Your program should print an error message if the user provides a date that is out of range.</p>

    </statement><program interactive="activecode" language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program><solution>

    <program language="python">
    
        <input>
year = int(input("Please enter a year"))
if year &gt;= 1900 and year &lt;= 2099:
    a = year % 19
    b = year % 4
    c = year % 7
    d = (19*a + 24) % 30
    e = (2*b + 4*c + 6*d + 5) % 7
    dateofeaster = 22 + d + e

    if year == 1954 or year == 2981 or year == 2049 or year == 2076:
        dateofeaster = dateofeaster - 7

    if dateofeaster &gt; 31:
        print("April", dateofeaster - 31)
    else:
        print("March", dateofeaster)
else:
    print("ERROR...year out of range")
        </input>
<tests>


</tests>

    </program>
                    

    
                    </solution></exercise>

                <exercise xml:id="ch6_ex_10"><statement>
                        <p>Get the user to enter some text and print out True if it’s a palindrome, False otherwise. (Hint: Start by reversing the input string, and then use the == operator to compare two values to see if they are the same)</p>

    </statement><program interactive="activecode" language="python">
<prefix>


</prefix>

        <input>


        </input>
<tests>


</tests>

    </program></exercise>

<exercise xml:id="pp6_13_11" indentation="hide" language="python"><statement>
                <p>Write a program that will print out a greeting to each student in the list. This list should also keep track of how many students have been greeted and note that each time a new student has been greeted. When only one student has entered, the program should say “The first student has entered!”. Afterwards, the program should say “There are {number here} students in the classroom!”.</p>
</statement>
<blocks><block order="4">
<cline>students = ["Jay", "Stacy", "Iman", "Trisha", "Ahmed", "Daniel", "Shadae", "Tosin", "Charlotte"]</cline>
</block><block order="6">
<cline>num_students = 0</cline>
</block><block order="1">
<cline>for student in students:</cline>
</block><block order="2">
<cline>    print("Welcome to class, " + student)</cline>
<cline>    num_students += 1</cline>
</block><block order="3">
<cline>    if num_students == 1:</cline>
<cline>        print("The first student has entered!")</cline>
</block><block order="5">
<cline>    elif num_students &gt; 1:</cline>
<cline>        print("There are " + str(num_students) + " students in the classroom!")</cline>
</block></blocks></exercise>      

<exercise xml:id="pp6_13_12" indentation="hide" language="python"><statement>
                <p>Piece together a program so that it can successfully print out one print statement, given the value of x.</p>
</statement>
<blocks><block order="4">
<cline>x = 16</cline>
</block><block order="2">
<cline>if x &gt; 10:</cline>
</block><block order="3">
<cline>    if x &gt; 20:</cline>
<cline>        print("This is a large number!")</cline>
</block><block order="1">
<cline>    else:</cline>
<cline>        print("This is a pretty big number.")</cline>
</block></blocks></exercise>            
    </section>

